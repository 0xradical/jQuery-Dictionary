<?xml version="1.0" encoding="UTF-8"?>
<d:dictionary xmlns="http://www.w3.org/1999/xhtml" xmlns:d="http://www.apple.com/DTDs/DictionaryService-1.0.rng">
  <d:entry id="_add__selector___0_0" d:title=".add()" d:value="add()">
    <d:index d:title=".add()" d:value="add()"/>
    <d:index d:title=".add( selector )" d:value="add( selector )"/>
    <d:index d:title=".add( elements )" d:value="add( elements )"/>
    <d:index d:title=".add( html )" d:value="add( html )"/>
    <d:index d:title=".add( jQuery object )" d:value="add( jQuery object )"/>
    <d:index d:title=".add( selector, context )" d:value="add( selector, context )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.add( selector )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Add elements to the set of matched elements.</p><ul class="signatures">
<li class="signature" id="add-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.add( selector )</h4>
<p class="arguement"><strong>selector</strong>A string representing a selector expression to find additional elements to add to the set of matched elements.</p>
</li>
<li class="signature" id="add-elements">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.add( elements )</h4>
<p class="arguement"><strong>elements</strong>One or more elements to add to the set of matched elements.</p>
</li>
<li class="signature" id="add-html">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.add( html )</h4>
<p class="arguement"><strong>html</strong>An HTML fragment to add to the set of matched elements.</p>
</li>
<li class="signature" id="add-jQuery object">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3.2/">1.3.2</a></span>.add( jQuery object )</h4>
<p class="arguement"><strong>jQuery object</strong>An existing jQuery object to add to the set of matched elements.</p>
</li>
<li class="signature" id="add-selector-context">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.add( selector, context )</h4>
<p class="arguement"><strong>selector</strong>A string representing a selector expression to find additional elements to add to the set of matched elements.</p>
<p class="arguement"><strong>context</strong>The point in the document at which the selector should begin matching; similar to the context argument of the <code>$(selector, context)</code> method.</p>
</li>
</ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.add()</code> method constructs a new jQuery object from the union of those elements and the ones passed into the method. The argument to <code>.add()</code> can be pretty much anything that  <code>$()</code> accepts, including a jQuery selector expression, references to DOM elements, or an HTML snippet.</p><p>The updated set of elements can be used in a following (chained) method, or assigned to a variable for later use. For example:</p><pre>
$("p").add("div").addClass("widget");
var pdiv = $("p").add("div");
</pre><p>The following will <em>not</em> save the added elements, because the <code>.add()</code> method creates a new set and leaves the original set in pdiv unchanged:</p><pre>
var pdiv = $("p");
pdiv.add("div");  // WRONG, pdiv will not change
</pre><p>Consider a page with a simple list and a paragraph following it:</p><pre>&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a paragraph&lt;/p&gt;</pre><p>We can select the list items and then the paragraph by using either a selector or a reference to the DOM element itself as the <code>.add()</code> method's argument:</p><pre>$('li').add('p').css('background-color', 'red');</pre><p>Or:</p><pre>$('li').add(document.getElementsByTagName('p')[0])
  .css('background-color', 'red');</pre><p>The result of this call is a red background behind all four elements.
Using an HTML snippet as the <code>.add()</code> method's argument (as in the third version), we can create additional elements on the fly and add those elements to the matched set of elements. Let's say, for example, that we want to alter the background of the list items along with a newly created paragraph:</p><pre>$('li').add('&lt;p id="new"&gt;new paragraph&lt;/p&gt;')
  .css('background-color', 'red');</pre><p>Although the new paragraph has been created and its background color changed, it still does not appear on the page. To place it on the page, we could add one of the insertion methods to the chain.</p><p>As of jQuery 1.4 the results from .add() will always be returned in document order (rather than a simple concatenation).</p><p><strong>Note:</strong> To reverse the <code>.add()</code> you can use <a href="http://api.jquery.com/not"><code>.not( elements | selector )</code></a> to remove elements from the jQuery results, or <a href="http://api.jquery.com/end"><code>.end()</code></a> to return to the selection before you added.</p></div>
  </d:entry>
  <d:entry id="_addclass__classname___1_0" d:title=".addClass()" d:value="addClass()">
    <d:index d:title=".addClass()" d:value="addClass()"/>
    <d:index d:title=".addClass( className )" d:value="addClass( className )"/>
    <d:index d:title=".addClass( function(index, currentClass) )" d:value="addClass( function(index, currentClass) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.addClass( className )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Adds the specified class(es) to each of the set of matched elements.</p><ul class="signatures">
<li class="signature" id="addClass-className">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.addClass( className )</h4>
<p class="arguement"><strong>className</strong>One or more class names to be added to the class attribute of each matched element.</p>
</li>
<li class="signature" id="addClass-functionindex- currentClass">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.addClass( function(index, currentClass) )</h4>
<p class="arguement"><strong>function(index, currentClass)</strong>A function returning one or more space-separated class names to be added to the existing class name(s). Receives the index position of the element in the set and the existing class name(s) as arguments. Within the function, <code>this</code> refers to the current element in the set.</p>
</li>
</ul>
<p>It's important to note that this method does not replace a class. It simply adds the class, appending it to any which may already be assigned to the elements.</p><p>More than one class may be added at a time, separated by a space, to the set of matched elements, like so:</p><pre>$("p").addClass("myClass yourClass");</pre><p>This method is often used with <code>.removeClass()</code> to switch elements' classes from one to another, like so:</p><pre>$("p").removeClass("myClass noClass").addClass("yourClass");</pre><p>Here, the <code>myClass</code> and <code>noClass</code> classes are removed from all paragraphs, while <code>yourClass</code> is added.</p><p>As of jQuery 1.4, the <code>.addClass()</code> method's argument can receive a function.</p><pre>$("ul li:last").addClass(function() {
  return "item-" + $(this).index();
});</pre><p>Given an unordered list with five <code>&lt;li&gt;</code> elements, this example adds the class "item-4" to the last <code>&lt;li&gt;</code>.</p></div>
  </d:entry>
  <d:entry id="_ajaxstop__handler_____2_0" d:title=".ajaxStop()" d:value="ajaxStop()">
    <d:index d:title=".ajaxStop()" d:value="ajaxStop()"/>
    <d:index d:title=".ajaxStop( handler() )" d:value="ajaxStop( handler() )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.ajaxStop( handler() )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.</p><ul class="signatures"><li class="signature" id="ajaxStop-handler">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.ajaxStop( handler() )</h4>
<p class="arguement"><strong>handler()</strong>The function to be invoked.</p>
</li></ul>
<p>Whenever an Ajax request completes, jQuery checks whether there are any other outstanding Ajax requests. If none remain, jQuery triggers the <code>ajaxStop</code> event. Any and all handlers that have been registered with the <code>.ajaxStop()</code> method are executed at this time. The <code>ajaxStop</code> event is also triggered if the last outstanding Ajax request is cancelled by returning false within the <code>beforeSend</code> callback function. </p><p>To observe this method in action, we can set up a basic Ajax load request:</p><pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre><p>We can attach our event handler to any element:</p><pre>$('.log').ajaxStop(function() {
  $(this).text('Triggered ajaxStop handler.');
});</pre><p>Now, we can make an Ajax request using any jQuery method:</p><pre>$('.trigger').click(function() {
  $('.result').load('ajax/test.html');
});</pre><p>When the user clicks the button and the Ajax request completes, the log message is displayed.</p><p>Because <code>.ajaxStop()</code> is implemented as a method of jQuery object instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p></div>
  </d:entry>
  <d:entry id="jquery_extend__target____object1______objectn_____3_0" d:title="jQuery.extend()" d:value="jQueryextend()">
    <d:index d:title="jQuery.extend()" d:value="jQueryextend()"/>
    <d:index d:title="jQuery.extend()" d:value="extend()"/>
    <d:index d:title="jQuery.extend( target [, object1] [, objectN] )" d:value="jQueryextend( target [, object1] [, objectN] )"/>
    <d:index d:title="jQuery.extend(  [deep], target, object1 [, objectN] )" d:value="jQueryextend(  [deep], target, object1 [, objectN] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.extend( target [, object1]  [, objectN]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>Merge the contents of two or more objects together into the first object.</p><ul class="signatures">
<li class="signature" id="jQuery-extend-target-object1-objectN">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.extend( target [, object1] [, objectN] )</h4>
<p class="arguement"><strong>target</strong> An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.</p>
<p class="arguement"><strong>object1</strong>An object containing additional properties to merge in.</p>
<p class="arguement"><strong>objectN</strong>Additional objects containing properties to merge in.</p>
</li>
<li class="signature" id="jQuery-extend-deep-target-object1-objectN">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1.4/">1.1.4</a></span>jQuery.extend(  [deep], target, object1 [, objectN] )</h4>
<p class="arguement"><strong>deep</strong>If true, the merge becomes recursive (aka. deep copy).</p>
<p class="arguement"><strong>target</strong>The object to extend. It will receive the new properties.</p>
<p class="arguement"><strong>object1</strong>An object containing additional properties to merge in.</p>
<p class="arguement"><strong>objectN</strong>Additional objects containing properties to merge in.</p>
</li>
</ul>
<p>When we supply two or more objects to <code>$.extend()</code>, properties from all of the objects are added to the target object.</p><p>If only one argument is supplied to <code>$.extend()</code>, this means the target argument was omitted. In this case, the jQuery object itself is assumed to be the target. By doing this, we can add new functions to the jQuery namespace.  This can be useful for plugin authors wishing to add new methods to JQuery.</p><p>Keep in mind that the target object (first argument) will be modified, and will also be returned from <code>$.extend()</code>. If, however, we want to preserve both of the original objects, we can do so by passing an empty object as the target:</p><pre>var object = $.extend({}, object1, object2);</pre><p>The merge performed by <code>$.extend()</code> is not recursive by default; if a property of the first object is itself an object or array, it will be completely overwritten by a property with the same key in the second object. The values are not merged. This can be seen in the example below by examining the value of banana. However, by passing <code>true</code> for the first function argument, objects will be recursively merged.</p><p>Undefined properties are not copied. However, properties inherited from the object's prototype <em>will</em> be copied over. For performance reasons, properties that have values of built-in JavaScript types such as Date or RegExp are not re-constructed, and will appear as plain Objects in the resulting object or array.</p><blockquote>
<p><strong>Note:</strong> When performing a deep extend, Object and Array are extended, however primitive types such string, boolean and number are not. For specific needs that fall outside of this behaviour, it is recommended to write a custom extend method as this will be significantly faster from a performance perspective. </p>
</blockquote></div>
  </d:entry>
  <d:entry id="_fadein____duration______callback_____4_0" d:title=".fadeIn()" d:value="fadeIn()">
    <d:index d:title=".fadeIn()" d:value="fadeIn()"/>
    <d:index d:title=".fadeIn(  [duration] [, callback] )" d:value="fadeIn(  [duration] [, callback] )"/>
    <d:index d:title=".fadeIn(  [duration] [, easing] [, callback] )" d:value="fadeIn(  [duration] [, easing] [, callback] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.fadeIn(  [duration]  [, callback]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Display the matched elements by fading them to opaque.</p><ul class="signatures">
<li class="signature" id="fadeIn-duration-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.fadeIn(  [duration] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="fadeIn-duration-easing-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.fadeIn(  [duration] [, easing] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
</ul>
<p>The <code>.fadeIn()</code> method animates the opacity of the matched elements.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of  <code>400</code> milliseconds is used.</p><p>We can animate any element, such as a simple image:</p><pre>&lt;div id="clickme"&gt;
      Click here
    &lt;/div&gt;
    &lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;
    With the element initially hidden, we can show it slowly:
    $('#clickme').click(function() {
      $('#book').fadeIn('slow', function() {
        // Animation complete
      });
    });</pre><p class="image four-across">
      <img src="/images/0042_06_33.png" alt=""/><img src="/images/0042_06_34.png" alt=""/><img src="/images/0042_06_35.png" alt=""/><img src="/images/0042_06_36.png" alt=""/></p><h4 id="easing">Easing</h4><p><strong>As of jQuery 1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com">jQuery UI suite</a>.</p><h4 id="callback-function">Callback Function</h4><p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole. </p><p><strong>As of jQuery 1.6</strong>, the <code><a href="http://api.jquery.com/promise/">.promise()</a></code> method can be used in conjunction with the <code><a href="http://api.jquery.com/deferred.done/">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href="http://api.jquery.com/promise/#example-1">example for .promise()</a> ).  </p><ul><li>All jQuery effects, including <code>.fadeIn()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li>
<li>Because of the nature of <a href="https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame"><code>requestAnimationFrame()</code></a>, you should never queue animations using a <code>setInterval</code> or <code>setTimeout</code> loop. In order to preserve CPU resources, browsers that support <code>requestAnimationFrame</code> will not update animations when the window/tab is not displayed. If you continue to queue animations via <code>setInterval</code> or <code>setTimeout</code> while animation is paused, all of the queued animations will begin playing when the window/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements <a href="http://api.jquery.com/queue"><code>.queue()</code></a> to set the timeout to start the next animation.&#13;
</li>
</ul></div>
  </d:entry>
  <d:entry id="_fadeout____duration______callback_____5_0" d:title=".fadeOut()" d:value="fadeOut()">
    <d:index d:title=".fadeOut()" d:value="fadeOut()"/>
    <d:index d:title=".fadeOut(  [duration] [, callback] )" d:value="fadeOut(  [duration] [, callback] )"/>
    <d:index d:title=".fadeOut(  [duration] [, easing] [, callback] )" d:value="fadeOut(  [duration] [, easing] [, callback] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.fadeOut(  [duration]  [, callback]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Hide the matched elements by fading them to transparent.</p><ul class="signatures">
<li class="signature" id="fadeOut-duration-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.fadeOut(  [duration] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="fadeOut-duration-easing-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.fadeOut(  [duration] [, easing] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
</ul>
<p>The <code>.fadeOut()</code> method animates the opacity of the matched elements. Once the opacity reaches 0, the <code>display</code> style property is set to <code>none</code>, so the element no longer affects the layout of the page.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of  <code>400</code> milliseconds is used.</p><p>We can animate any element, such as a simple image:</p><pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;</pre><p>With the element initially shown, we can hide it slowly:</p><pre>$('#clickme').click(function() {
  $('#book').fadeOut('slow', function() {
    // Animation complete.
  });
});</pre><p class="image four-across">
      <img src="/images/0042_06_37.png" alt=""/><img src="/images/0042_06_38.png" alt=""/><img src="/images/0042_06_39.png" alt=""/><img src="/images/0042_06_40.png" alt=""/></p><blockquote>
<p><strong>Note: </strong>To avoid unnecessary DOM manipulation, <code>.fadeOut()</code> will not hide an element that is already considered hidden. For information on which elements jQuery considers hidden, see <a href="http://api.jquery.com/hidden-selector"> :hidden Selector</a>.</p>
</blockquote><h4 id="easing">Easing</h4><p><strong>As of jQuery 1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com">jQuery UI suite</a>.</p><h4 id="callback-function">Callback Function</h4><p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p><p><strong>As of jQuery 1.6</strong>, the <code><a href="http://api.jquery.com/promise/">.promise()</a></code> method can be used in conjunction with the <code><a href="http://api.jquery.com/deferred.done/">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href="http://api.jquery.com/promise/#example-1">example for .promise()</a> ).  </p><ul><li>All jQuery effects, including <code>.fadeOut()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li>
<li>Because of the nature of <a href="https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame"><code>requestAnimationFrame()</code></a>, you should never queue animations using a <code>setInterval</code> or <code>setTimeout</code> loop. In order to preserve CPU resources, browsers that support <code>requestAnimationFrame</code> will not update animations when the window/tab is not displayed. If you continue to queue animations via <code>setInterval</code> or <code>setTimeout</code> while animation is paused, all of the queued animations will begin playing when the window/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements <a href="http://api.jquery.com/queue"><code>.queue()</code></a> to set the timeout to start the next animation.&#13;
</li>
</ul></div>
  </d:entry>
  <d:entry id="_fadeto__duration__opacity____callback_____6_0" d:title=".fadeTo()" d:value="fadeTo()">
    <d:index d:title=".fadeTo()" d:value="fadeTo()"/>
    <d:index d:title=".fadeTo( duration, opacity [, callback] )" d:value="fadeTo( duration, opacity [, callback] )"/>
    <d:index d:title=".fadeTo( duration, opacity [, easing] [, callback] )" d:value="fadeTo( duration, opacity [, easing] [, callback] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.fadeTo( duration, opacity [, callback]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Adjust the opacity of the matched elements.</p><ul class="signatures">
<li class="signature" id="fadeTo-duration-opacity-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.fadeTo( duration, opacity [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>opacity</strong>A number between 0 and 1 denoting the target opacity.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="fadeTo-duration-opacity-easing-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.fadeTo( duration, opacity [, easing] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>opacity</strong>A number between 0 and 1 denoting the target opacity.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
</ul>
<p>The <code>.fadeTo()</code> method animates the opacity of the matched elements.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, the default duration of  <code>400</code> milliseconds is used. Unlike the other effect methods, <code>.fadeTo()</code> requires that <code>duration</code> be explicitly specified.</p><p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p><p>We can animate any element, such as a simple image:</p><pre>&lt;div id="clickme"&gt;
    Click here
  &lt;/div&gt;
  &lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;
  With the element initially shown, we can dim it slowly:
  $('#clickme').click(function() {
    $('#book').fadeTo('slow', 0.5, function() {
      // Animation complete.
    });
  });
  </pre><p class="image four-across"> 
    <img src="/images/0042_06_41.png" alt=""/><img src="/images/0042_06_42.png" alt=""/><img src="/images/0042_06_43.png" alt=""/><img src="/images/0042_06_44.png" alt=""/></p><p>With <code>duration</code> set to <code>0</code>, this method just changes the <code>opacity</code> CSS property, so <code>.fadeTo(0, opacity)</code> is the same as <code>.css('opacity', opacity)</code>.</p><ul><li>All jQuery effects, including <code>.fadeTo()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li>
<li>Because of the nature of <a href="https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame"><code>requestAnimationFrame()</code></a>, you should never queue animations using a <code>setInterval</code> or <code>setTimeout</code> loop. In order to preserve CPU resources, browsers that support <code>requestAnimationFrame</code> will not update animations when the window/tab is not displayed. If you continue to queue animations via <code>setInterval</code> or <code>setTimeout</code> while animation is paused, all of the queued animations will begin playing when the window/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements <a href="http://api.jquery.com/queue"><code>.queue()</code></a> to set the timeout to start the next animation.&#13;
</li>
</ul></div>
  </d:entry>
  <d:entry id="_fadetoggle____duration______easing______callback_____7_0" d:title=".fadeToggle()" d:value="fadeToggle()">
    <d:index d:title=".fadeToggle()" d:value="fadeToggle()"/>
    <d:index d:title=".fadeToggle(  [duration] [, easing] [, callback] )" d:value="fadeToggle(  [duration] [, easing] [, callback] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.fadeToggle(  [duration]  [, easing]  [, callback]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Display or hide the matched elements by animating their opacity.</p><ul class="signatures"><li class="signature" id="fadeToggle-duration-easing-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.4/">1.4.4</a></span>.fadeToggle(  [duration] [, easing] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li></ul>
<p>The <code>.fadeToggle()</code> method animates the opacity of the matched elements. When called on a visible element, the element's <code>display</code> style property is set to <code>none</code> once the opacity reaches 0, so the element no longer affects the layout of the page.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p><h4 id="easing">Easing</h4><p>The string representing an easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com">jQuery UI suite</a>.</p><h4 id="callback-function">Callback Function</h4><p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p><p><strong>As of jQuery 1.6</strong>, the <code><a href="http://api.jquery.com/promise/">.promise()</a></code> method can be used in conjunction with the <code><a href="http://api.jquery.com/deferred.done/">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href="http://api.jquery.com/promise/#example-1">example for .promise()</a> ).  </p><ul>
<li>All jQuery effects, including <code>.fadeToggle()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li>
<li>Because of the nature of <a href="https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame"><code>requestAnimationFrame()</code></a>, you should never queue animations using a <code>setInterval</code> or <code>setTimeout</code> loop. In order to preserve CPU resources, browsers that support <code>requestAnimationFrame</code> will not update animations when the window/tab is not displayed. If you continue to queue animations via <code>setInterval</code> or <code>setTimeout</code> while animation is paused, all of the queued animations will begin playing when the window/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements <a href="http://api.jquery.com/queue"><code>.queue()</code></a> to set the timeout to start the next animation.
</li>
</ul></div>
  </d:entry>
  <d:entry id="file_8_0" d:title=":file Selector" d:value="file Selector">
    <d:index d:title=":file Selector" d:value="file Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">file</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements of type file.</p>
      <p><code>:file</code> is equivalent to <code>[type="file"]</code>. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':file')</code> is equivalent to <code>$('*:file')</code>, so <code>$('input:file')</code> should be used instead. </p>
      <ul>
        <li>Because <code>:file</code> is a jQuery extension and not part of the CSS specification, queries using <code>:file</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type="file"]</code> instead.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_filter__selector___9_0" d:title=".filter()" d:value="filter()">
    <d:index d:title=".filter()" d:value="filter()"/>
    <d:index d:title=".filter( selector )" d:value="filter( selector )"/>
    <d:index d:title=".filter( function(index) )" d:value="filter( function(index) )"/>
    <d:index d:title=".filter( element )" d:value="filter( element )"/>
    <d:index d:title=".filter( jQuery object )" d:value="filter( jQuery object )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.filter( selector )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Reduce the set of matched elements to those that match the selector or pass the function's test. </p><ul class="signatures">
<li class="signature" id="filter-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.filter( selector )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match the current set of elements against.</p>
</li>
<li class="signature" id="filter-functionindex">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.filter( function(index) )</h4>
<p class="arguement"><strong>function(index)</strong>A function used as a test for each element in the set. <code>this</code> is the current DOM element.</p>
</li>
<li class="signature" id="filter-element">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.filter( element )</h4>
<p class="arguement"><strong>element</strong>An element to match the current set of elements against.</p>
</li>
<li class="signature" id="filter-jQuery object">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.filter( jQuery object )</h4>
<p class="arguement"><strong>jQuery object</strong>An existing jQuery object to match the current set of elements against.</p>
</li>
</ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.filter()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; all elements matching the selector will be included in the result.</p><p>Consider a page with a simple list on it:</p><p>We can apply this method to the set of list items:</p><pre>
  $('li').filter(':even').css('background-color', 'red');
</pre><p>The result of this call is a red background for items 1, 3, and 5, as they match the selector (recall that <code>:even</code> and <code>:odd</code> use 0-based indexing).</p><h4 id="using-filter-function">Using a Filter Function</h4><p>The second form of this method allows us to filter elements against a function rather than a selector. For each element, if the function returns <code>true</code> (or a "truthy" value), the element will be included in the filtered set; otherwise, it will be excluded. Suppose we have a somewhat more involved HTML snippet:</p><pre>
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; item 1 -
    one strong tag&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; item &lt;strong&gt;2&lt;/strong&gt; -
    two &lt;span&gt;strong tags&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
  &lt;li&gt;list item 6&lt;/li&gt;
&lt;/ul&gt;
</pre><p>We can select the list items, then filter them based on their contents:</p><pre>
$('li').filter(function(index) {
  return $('strong', this).length == 1;
}).css('background-color', 'red');
</pre><p>This code will alter the first list item only, as it contains exactly one <code>&lt;strong&gt;</code> tag. Within the filter function, <code>this</code> refers to each DOM element in turn. The parameter passed to the function tells us the index of that DOM element within the set matched by the jQuery object.</p><p>We can also take advantage of the <code>index</code> passed through the function, which indicates the 0-based position of the element within the unfiltered set of matched elements:</p><pre>
$('li').filter(function(index) {
  return index % 3 == 2;
}).css('background-color', 'red');
</pre><p>This alteration to the code will cause the third and sixth list items to be highlighted, as it uses the modulus operator (<code>%</code>) to select every item with an <code>index</code> value that, when divided by 3, has a remainder of <code>2</code>.</p></div>
  </d:entry>
  <d:entry id="_find__selector___10_0" d:title=".find()" d:value="find()">
    <d:index d:title=".find()" d:value="find()"/>
    <d:index d:title=".find( selector )" d:value="find( selector )"/>
    <d:index d:title=".find( jQuery object )" d:value="find( jQuery object )"/>
    <d:index d:title=".find( element )" d:value="find( element )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.find( selector )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</p><ul class="signatures">
<li class="signature" id="find-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.find( selector )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li>
<li class="signature" id="find-jQuery object">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.find( jQuery object )</h4>
<p class="arguement"><strong>jQuery object</strong>A jQuery object to match elements against.</p>
</li>
<li class="signature" id="find-element">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.find( element )</h4>
<p class="arguement"><strong>element</strong>An element to match elements against.</p>
</li>
</ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.find()</code> method allows us to search through the descendants of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.find()</code> and <code>.children()</code> methods are similar, except that the latter only travels a single level down the DOM tree.</p><p>The first signature for the <code>.find()</code>method accepts a selector expression of the same type that we can pass to the <code>$()</code> function. The elements will be filtered by testing whether they match this selector.</p><p>Consider a page with a basic nested list on it:</p><pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre><p>If we begin at item II, we can find list items within it:</p><pre>$('li.item-ii').find('li').css('background-color', 'red');</pre><p>The result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.</p><blockquote><p>Unlike in the rest of the tree traversal methods, the selector expression is required in a call to <code>.find()</code>. If we need to retrieve all of the descendant elements, we can pass in the universal selector <code>'*'</code> to accomplish this.</p></blockquote><p><a href="http://api.jquery.com/jquery/#selector-context">Selector context</a> is implemented with the <code>.find()</code> <code>method;</code> therefore, <code>$('li.item-ii').find('li')</code> is equivalent to <code>$('li', 'li.item-ii')</code>.</p><p><strong>As of jQuery 1.6</strong>, we can also filter the selection with a given jQuery collection or element. With the same nested list as above, if we start with:</p><pre>var $allListElements = $('li');</pre><p>And then pass this jQuery object to find:</p><pre>$('li.item-ii').find( $allListElements );</pre><p>This will return a jQuery collection which contains only the list elements that are descendants of item II.</p><p>Similarly, an element may also be passed to find:</p><pre>
var item1 = $('li.item-1')[0];
$('li.item-ii').find( item1 ).css('background-color', 'red');
</pre><p>The result of this call would be a red background on item 1.</p></div>
  </d:entry>
  <d:entry id="_first___11_0" d:title=".first()" d:value="first()">
    <d:index d:title=".first()" d:value="first()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.first()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Reduce the set of matched elements to the first in the set.</p><ul class="signatures"><li class="signature" id="first"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.first()</h4></li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.first()</code> method constructs a new jQuery object from the first matching element.</p><p>Consider a page with a simple list on it:</p><pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>We can apply this method to the set of list items:</p><pre>$('li').first().css('background-color', 'red');</pre><p>The result of this call is a red background for the first item.</p></div>
  </d:entry>
  <d:entry id="first_child_12_0" d:title=":first-child Selector" d:value="first-child Selector">
    <d:index d:title=":first-child Selector" d:value="first-child Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">first-child</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements that are the first child of their parent.</p>
      <p>While <a href="/first-selector">:first</a> matches only a single element, the <code>:first-child</code> selector can match more than one: one for each parent. This is equivalent to <code>:nth-child(1)</code>.</p>
    </div>
  </d:entry>
  <d:entry id="_ajaxsuccess__handler_event__xmlhttprequest__ajaxoptions____13_0" d:title=".ajaxSuccess()" d:value="ajaxSuccess()">
    <d:index d:title=".ajaxSuccess()" d:value="ajaxSuccess()"/>
    <d:index d:title=".ajaxSuccess( handler(event, XMLHttpRequest, ajaxOptions) )" d:value="ajaxSuccess( handler(event, XMLHttpRequest, ajaxOptions) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.ajaxSuccess( handler(event, XMLHttpRequest, ajaxOptions) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.</p><ul class="signatures"><li class="signature" id="ajaxSuccess-handlerevent- XMLHttpRequest- ajaxOptions">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.ajaxSuccess( handler(event, XMLHttpRequest, ajaxOptions) )</h4>
<p class="arguement"><strong>handler(event, XMLHttpRequest, ajaxOptions)</strong>The function to be invoked.</p>
</li></ul>
<p>Whenever an Ajax request completes successfully, jQuery triggers the <code>ajaxSuccess</code> event. Any and all handlers that have been registered with the <code>.ajaxSuccess()</code> method are executed at this time.</p><p>To observe this method in action, we can set up a basic Ajax load request:</p><pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre><p>We can attach our event handler to any element:</p><pre>$('.log').ajaxSuccess(function() {
  $(this).text('Triggered ajaxSuccess handler.');
});</pre><p>Now, we can make an Ajax request using any jQuery method:</p><pre>$('.trigger').click(function() {
  $('.result').load('ajax/test.html');
});</pre><p>When the user clicks the button and the Ajax request completes successfully, the log message is displayed.</p><p><strong>Note:</strong> Because <code>.ajaxSuccess()</code> is implemented as a method of jQuery object instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p><p>All <code>ajaxSuccess</code> handlers are invoked, regardless of what Ajax request was completed. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an <code>ajaxSuccess</code> handler is executed, it is passed the event object, the <code>XMLHttpRequest</code> object, and the settings object that was used in the creation of the request. For example, we can restrict our callback to only handling events dealing with a particular URL:</p><p><strong>Note:</strong> You can get the returned ajax contents by looking at <code>xhr.responseXML</code> or <code>xhr.responseHTML</code> for xml and html respectively.</p><pre>$('.log').ajaxSuccess(function(e, xhr, settings) {
  if (settings.url == 'ajax/test.html') {
    $(this).text('Triggered ajaxSuccess handler. The ajax response was:' 
                     + xhr.responseHTML );
  }
});</pre></div>
  </d:entry>
  <d:entry id="first_14_0" d:title=":first Selector" d:value="first Selector">
    <d:index d:title=":first Selector" d:value="first Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">first</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects the first matched element.</p>
      <p>The <code>:first</code> pseudo-class is equivalent to <code>:eq(0)</code>. It could also be written as <code>:lt(1)</code>. While this matches only a single element, <a href="first-child-selector">:first-child</a> can match more than one: One for each parent.</p>
      <ul>
        <li>Because <code>:first</code> is a jQuery extension and not part of the CSS specification, queries using <code>:first</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:first</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":first")</code></a>.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_focus__handler_eventobject____15_0" d:title=".focus()" d:value="focus()">
    <d:index d:title=".focus()" d:value="focus()"/>
    <d:index d:title=".focus( handler(eventObject) )" d:value="focus( handler(eventObject) )"/>
    <d:index d:title=".focus(  [eventData], handler(eventObject) )" d:value="focus(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.focus( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "focus" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="focus-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.focus( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="focus-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.focus(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="focus"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.focus()</h4></li>
</ul>
<ul>
<li>This method is a shortcut for <code>.bind('focus', handler)</code> in the first and second variations, and <code>.trigger('focus')</code> in the third.</li>
<li>The <code>focus</code> event is sent to an element when it gains focus. This event is implicitly applicable to a limited set of elements, such as  form elements (<code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, etc.) and links (<code>&lt;a href&gt;</code>). In recent browser versions, the event can be extended to include all element types by explicitly setting the element's <code>tabindex</code> property. An element can gain focus via keyboard commands, such as the Tab key, or by mouse clicks on the element.</li>
<li>Elements with focus are usually highlighted in some way by the browser, for example with a dotted line surrounding the element. The focus is used to determine which element is the first to receive keyboard-related events.</li>
</ul>
<p>For example, consider the HTML:</p><pre>&lt;form&gt;
  &lt;input id="target" type="text" value="Field 1" /&gt;
  &lt;input type="text" value="Field 2" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
</pre><p>The event handler can be bound to the first input field:</p><pre>$('#target').focus(function() {
  alert('Handler for .focus() called.');
});</pre><p>Now clicking on the first field, or tabbing to it from another field, displays the alert:</p><p><span class="output">Handler for .focus() called.</span></p><p>We can trigger the event when another element is clicked:</p><pre>$('#other').click(function() {
  $('#target').focus();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p><p>The <code>focus</code> event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the <code>focus</code> event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping <code>focus</code> to the <code>focusin</code> event in its event delegation methods, <a href="http://api.jquery.com/live/"><code>.live()</code></a> and <a href="http://api.jquery.com/delegate/"><code>.delegate()</code></a>.</p><blockquote><p>Triggering the focus on hidden elements causes an error in Internet Explorer. Take care to only call <code>.focus()</code> without parameters on elements that are visible.</p></blockquote></div>
  </d:entry>
  <d:entry id="focus_16_0" d:title=":focus selector" d:value="focus selector">
    <d:index d:title=":focus selector" d:value="focus selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">focus</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects element if it is currently focused.</p>
      <p>As with other pseudo-class selectors (those that begin with a ":"), it is recommended to precede <code>:focus</code> with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':focus')</code> is equivalent to <code>$('*:focus')</code>.  If you are looking for the currently focused element, <code>$( document.activeElement )</code> will retrieve it without having to search the whole DOM tree.</p>
    </div>
  </d:entry>
  <d:entry id="_focusin__handler_eventobject____17_0" d:title=".focusin()" d:value="focusin()">
    <d:index d:title=".focusin()" d:value="focusin()"/>
    <d:index d:title=".focusin( handler(eventObject) )" d:value="focusin( handler(eventObject) )"/>
    <d:index d:title=".focusin(  [eventData], handler(eventObject) )" d:value="focusin(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.focusin( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "focusin" JavaScript event.</p><ul class="signatures">
<li class="signature" id="focusin-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.focusin( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="focusin-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.focusin(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
</ul>
<p>This method is a shortcut for <code>.bind('focusin', handler)</code>.</p><p>The <code>focusin</code> event is sent to an element when it, or any element inside of it, gains focus. This is distinct from the <a href="/focus">focus</a> event in that it supports detecting the focus event on parent elements (in other words, it supports event bubbling).</p><p>This event will likely be used together with the <a href="/focusout">focusout</a> event.</p></div>
  </d:entry>
  <d:entry id="_focusout__handler_eventobject____18_0" d:title=".focusout()" d:value="focusout()">
    <d:index d:title=".focusout()" d:value="focusout()"/>
    <d:index d:title=".focusout( handler(eventObject) )" d:value="focusout( handler(eventObject) )"/>
    <d:index d:title=".focusout(  [eventData], handler(eventObject) )" d:value="focusout(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.focusout( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "focusout" JavaScript event.</p><ul class="signatures">
<li class="signature" id="focusout-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.focusout( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="focusout-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.focusout(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
</ul>
<p>This method is a shortcut for <code>.bind('focusout', handler)</code>.</p><p>The <code>focusout</code> event is sent to an element when it, or any element inside of it, loses focus. This is distinct from the <a href="/blur">blur</a> event in that it supports detecting the loss of focus from parent elements (in other words, it supports event bubbling).</p><p>This event will likely be used together with the <a href="/focusin">focusin</a> event.</p></div>
  </d:entry>
  <d:entry id="jquery_fx_interval_19_0" d:title="jQuery.fx.interval" d:value="jQueryfxinterval">
    <d:index d:title="jQuery.fx.interval" d:value="jQueryfxinterval"/>
    <d:index d:title="jQuery.fx.interval" d:value="fxinterval"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.fx.interval</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Number">Number</a></span>
</h2><p class="desc"><strong>Description: </strong>The rate (in milliseconds) at which animations fire.</p><ul class="signatures"><li class="signature" id="jQuery-fx-interval"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>jQuery.fx.interval</h4></li></ul>
<p>This property can be manipulated to adjust the number of frames per second at which animations will run. The default is 13 milliseconds. Making this a lower number could make the animations run smoother in faster browsers (such as Chrome) but there may be performance and CPU implications of doing so.</p><p>Since jQuery uses one global interval, no animation should be running or all animations should stop for the change of this property to take effect.</p><p><strong>Note:</strong><code>jQuery.fx.interval</code> currently has no effect in browsers that support the <code>requestAnimationFrame</code> property, such as Google Chrome 11. This behavior is subject to change in a future release.</p></div>
  </d:entry>
  <d:entry id="jquery_fx_off_20_0" d:title="jQuery.fx.off" d:value="jQueryfxoff">
    <d:index d:title="jQuery.fx.off" d:value="jQueryfxoff"/>
    <d:index d:title="jQuery.fx.off" d:value="fxoff"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.fx.off</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Globally disable all animations.</p><ul class="signatures"><li class="signature" id="jQuery-fx-off"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>jQuery.fx.off</h4></li></ul>
<p>When this property is set to <code>true</code>, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:</p><ul>
<li>jQuery is being used on a low-resource device.</li>
    <li>Users are encountering accessibility problems with the animations (see the article <a href="http://www.jdeegan.phlegethon.org/turn_off_animation.html">Turn Off Animation</a> for more information).</li>
    </ul>
<p>Animations can be turned back on by setting the property to <code>false</code>.</p></div>
  </d:entry>
  <d:entry id="jquery_get__url____data______success_data__textstatus__jqxhr_______datatype_____21_0" d:title="jQuery.get()" d:value="jQueryget()">
    <d:index d:title="jQuery.get()" d:value="jQueryget()"/>
    <d:index d:title="jQuery.get()" d:value="get()"/>
    <d:index d:title="jQuery.get( url [, data] [, success(data, textStatus, jqXHR)] [, dataType] )" d:value="jQueryget( url [, data] [, success(data, textStatus, jqXHR)] [, dataType] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.get( url [, data]  [, success(data, textStatus, jqXHR)]  [, dataType]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jqXHR">jqXHR</a></span>
</h2><p class="desc"><strong>Description: </strong>Load data from the server using a HTTP GET request.</p><ul class="signatures"><li class="signature" id="jQuery-get-url-data-successdata- textStatus- jqXHR-dataType">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.get( url [, data] [, success(data, textStatus, jqXHR)] [, dataType] )</h4>
<p class="arguement"><strong>url</strong>A string containing the URL to which the request is sent.</p>
<p class="arguement"><strong>data</strong>A map or string that is sent to the server with the request.</p>
<p class="arguement"><strong>success(data, textStatus, jqXHR)</strong>A callback function that is executed if the request succeeds.</p>
<p class="arguement"><strong>dataType</strong>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).</p>
</li></ul>
<p>This is a shorthand Ajax function, which is equivalent to:</p><pre>$.ajax({
  url: <em>url</em>,
  data: <em>data</em>,
  success: <em>success</em>,
  dataType: <em>dataType</em>
});
</pre><p>The <code>success</code> callback function is passed the returned data, which will be an XML root element, text string, JavaScript file, or JSON object, depending on the MIME type of the response. It is also passed the text status of the response. </p><p><strong>As of jQuery 1.5</strong>, the <code>success</code> callback function is also passed a <a href="http://api.jquery.com/jQuery.get/#jqxhr-object">"jqXHR" object</a> (in <strong>jQuery 1.4</strong>, it was passed the <code>XMLHttpRequest</code> object). However, since JSONP and cross-domain GET requests do not use <abbr title="XMLHTTPRequest">XHR</abbr>,  in those cases the <code>(j)XHR</code> and <code>textStatus</code> parameters passed to the success callback are undefined.</p><p>Most implementations will specify a success handler:</p><pre>$.get('ajax/test.html', function(data) {
  $('.result').html(data);
  alert('Load was performed.');
});
</pre><p>This example fetches the requested HTML snippet and inserts it on the page.</p><h4 id="jqxhr-object">The jqXHR Object</h4><p><strong>As of jQuery 1.5</strong>, all of jQuery's Ajax methods return  a superset of the <code>XMLHTTPRequest</code> object. This jQuery XHR object, or "jqXHR," returned by <code>$.get()</code> implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see <a href="http://api.jquery.com/category/deferred-object/">Deferred object</a> for more information). For convenience and consistency with the callback names used by <code><a href="http://api.jquery.com/jQuery.ajax/">$.ajax()</a></code>, it provides <code>.error()</code>, <code>.success()</code>, and <code>.complete()</code> methods. These methods take a function argument that is called when the request terminates, and the function receives the same arguments as the correspondingly-named <code>$.ajax()</code> callback.</p><p>The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including <code>$.get()</code>, to chain multiple <code>.success()</code>, <code>.complete()</code>, and <code>.error()</code> callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</p><pre>// Assign handlers immediately after making the request,
  // and remember the jqxhr object for this request
  var jqxhr = $.get("example.php", function() {
    alert("success");
  })
  .success(function() { alert("second success"); })
  .error(function() { alert("error"); })
  .complete(function() { alert("complete"); });

  // perform other work here ...

  // Set another completion function for the request above
  jqxhr.complete(function(){ alert("second complete"); });</pre><ul>
<li>Due to browser security restrictions, most "Ajax" requests are subject to the <a title="Same Origin Policy on Wikipedia" href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a>; the request can not successfully retrieve data from a different domain, subdomain, or protocol.</li>
<li>If a request with jQuery.get() returns an error code, it will fail silently unless the script has also called the global <a href="http://api.jquery.com/ajaxError/">.ajaxError() </a> method or. As of jQuery 1.5, the <code>.error()</code> method of the <code>jqXHR</code> object returned by jQuery.get() is also available for error handling.</li>
<li>Script and JSONP requests are not subject to the same origin policy restrictions.</li>
</ul></div>
  </d:entry>
  <d:entry id="_get____index_____22_0" d:title=".get()" d:value="get()">
    <d:index d:title=".get()" d:value="get()"/>
    <d:index d:title=".get(  [index] )" d:value="get(  [index] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.get(  [index]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Element,%20Array">Element, Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Retrieve the DOM elements matched by the jQuery object.</p><ul class="signatures"><li class="signature" id="get-index">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.get(  [index] )</h4>
<p class="arguement"><strong>index</strong>A zero-based integer indicating which element to retrieve.</p>
</li></ul>
<p>The <code>.get()</code> method grants us access to the DOM nodes underlying each jQuery object. Suppose we had a simple unordered list on the page:</p><pre>
&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
&lt;/ul&gt;
</pre><p>Without a parameter, <code>.get()</code> returns all of the elements:</p><pre>alert($('li').get());</pre><p>All of the matched DOM nodes are returned by this call, contained in a standard array:</p><p><span class="result">[&lt;li id="foo"&gt;, &lt;li id="bar"&gt;]</span></p><p>With an index specified, .get() will retrieve a single element:</p><pre>($('li').get(0));</pre><p>Since the index is zero-based, the first list item is returned:</p><p><span class="output">&lt;li id="foo"&gt;</span></p><p>Each jQuery object also masquerades as an array, so we can use the array dereferencing operator to get at the list item instead:</p><pre>alert($('li')[0]);</pre><p>However, this syntax lacks some of the additional capabilities of .get(), such as specifying a negative index:</p><pre>alert($('li').get(-1));</pre><p>A negative index is counted from the end of the matched set, so this example will return the last item in the list:</p><p><span class="output">&lt;li id="bar"&gt;</span></p></div>
  </d:entry>
  <d:entry id="jquery_getjson__url____data______success_data__textstatus__jqxhr______23_0" d:title="jQuery.getJSON()" d:value="jQuerygetJSON()">
    <d:index d:title="jQuery.getJSON()" d:value="jQuerygetJSON()"/>
    <d:index d:title="jQuery.getJSON()" d:value="getJSON()"/>
    <d:index d:title="jQuery.getJSON( url [, data] [, success(data, textStatus, jqXHR)] )" d:value="jQuerygetJSON( url [, data] [, success(data, textStatus, jqXHR)] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.getJSON( url [, data]  [, success(data, textStatus, jqXHR)]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jqXHR">jqXHR</a></span>
</h2><p class="desc"><strong>Description: </strong>Load JSON-encoded data from the server using a GET HTTP request.</p><ul class="signatures"><li class="signature" id="jQuery-getJSON-url-data-successdata- textStatus- jqXHR">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.getJSON( url [, data] [, success(data, textStatus, jqXHR)] )</h4>
<p class="arguement"><strong>url</strong>A string containing the URL to which the request is sent.</p>
<p class="arguement"><strong>data</strong>A map or string that is sent to the server with the request.</p>
<p class="arguement"><strong>success(data, textStatus, jqXHR)</strong>A callback function that is executed if the request succeeds.</p>
</li></ul>
<p>This is a shorthand Ajax function, which is equivalent to:</p><pre>$.ajax({
  url: <em>url</em>,
  dataType: 'json',
  data: <em>data</em>,
  success: <em>callback</em>
});
</pre><p>Data that is sent to the server is appended to the URL as a query string. If the value of the <code>data</code> parameter is an object (map), it is converted to a string and url-encoded before it is appended to the URL.</p><p>Most implementations will specify a success handler:</p><pre>$.getJSON('ajax/test.json', function(data) {
  var items = [];

  $.each(data, function(key, val) {
    items.push('&lt;li id="' + key + '"&gt;' + val + '&lt;/li&gt;');
  });

  $('&lt;ul/&gt;', {
    'class': 'my-new-list',
    html: items.join('')
  }).appendTo('body');
});
</pre><p>This example, of course, relies on the structure of the JSON file:</p><pre>{
  "one": "Singular sensation",
  "two": "Beady little eyes",
  "three": "Little birds pitch by my doorstep"
}
</pre><p>Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body.</p><p>The <code>success</code> callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the <code><a href="/jQuery.parseJSON">$.parseJSON()</a></code> method. It is also passed the text status of the response.</p><p><strong>As of jQuery 1.5</strong>, the <code>success</code> callback function receives a <a href="http://api.jquery.com/jQuery.get/#jqxhr-object">"jqXHR" object</a> (in <strong>jQuery 1.4</strong>, it received the <code>XMLHttpRequest</code> object). However, since JSONP and cross-domain GET requests do not use <abbr title="XMLHTTPRequest">XHR</abbr>, in those cases the <code>jqXHR</code> and <code>textStatus</code> parameters passed to the success callback are undefined.</p><blockquote>
    <p><strong>Important:</strong> As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see <a href="http://json.org/">http://json.org/</a>.</p>
  </blockquote><h4 id="jsonp">JSONP</h4><p>If the URL includes the string "callback=?" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the <code>jsonp</code> data type in <code><a href="http://api.jquery.com/jQuery.ajax/">$.ajax()</a></code> for more details.</p><h4 id="jqxhr-object">The jqXHR Object</h4><p><strong>As of jQuery 1.5</strong>, all of jQuery's Ajax methods return  a superset of the <code>XMLHTTPRequest</code> object. This jQuery XHR object, or "jqXHR," returned by <code>$.getJSON()</code> implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see <a href="http://api.jquery.com/category/deferred-object/">Deferred object</a> for more information). For convenience and consistency with the callback names used by <code><a href="http://api.jquery.com/jQuery.ajax/">$.ajax()</a></code>, it provides <code>.error()</code>, <code>.success()</code>, and <code>.complete()</code> methods. These methods take a function argument that is called when the request terminates, and the function receives the same arguments as the correspondingly-named <code>$.ajax()</code> callback.</p><p>The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including <code>$.getJSON()</code>, to chain multiple <code>.success()</code>, <code>.complete()</code>, and <code>.error()</code> callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</p><pre>// Assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.getJSON("example.json", function() {
  alert("success");
})
.success(function() { alert("second success"); })
.error(function() { alert("error"); })
.complete(function() { alert("complete"); });

// perform other work here ...

// Set another completion function for the request above
jqxhr.complete(function(){ alert("second complete"); });</pre><ul>
<li>Due to browser security restrictions, most "Ajax" requests are subject to the <a title="Same Origin Policy on Wikipedia" href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a>; the request can not successfully retrieve data from a different domain, subdomain, or protocol.</li>
<li>Script and JSONP requests are not subject to the same origin policy restrictions.</li>
</ul></div>
  </d:entry>
  <d:entry id="all_24_0" d:title="All Selector (“*”)" d:value="All Selector (“*”)">
    <d:index d:title="All Selector (“*”)" d:value="All Selector (“*”)"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">all</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements.</p>
      <p>Caution: The all, or universal, selector is extremely slow, except when used by itself.</p>
    </div>
  </d:entry>
  <d:entry id="jquery_getscript__url____success_data__textstatus______25_0" d:title="jQuery.getScript()" d:value="jQuerygetScript()">
    <d:index d:title="jQuery.getScript()" d:value="jQuerygetScript()"/>
    <d:index d:title="jQuery.getScript()" d:value="getScript()"/>
    <d:index d:title="jQuery.getScript( url [, success(data, textStatus)] )" d:value="jQuerygetScript( url [, success(data, textStatus)] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.getScript( url [, success(data, textStatus)]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jqXHR">jqXHR</a></span>
</h2><p class="desc"><strong>Description: </strong>Load a JavaScript file from the server using a GET HTTP request, then execute it.</p><ul class="signatures"><li class="signature" id="jQuery-getScript-url-successdata- textStatus">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.getScript( url [, success(data, textStatus)] )</h4>
<p class="arguement"><strong>url</strong>A string containing the URL to which the request is sent.</p>
<p class="arguement"><strong>success(data, textStatus)</strong>A callback function that is executed if the request succeeds.</p>
</li></ul>
<p>This is a shorthand Ajax function, which is equivalent to:</p><pre>$.ajax({
  url: <em>url</em>,
  dataType: "script",
  success: <em>success</em>
});
</pre><p>The callback is passed the returned JavaScript file. This is generally not useful as the script will already have run at this point.</p><p>The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page:</p><pre>$(".result").html("&lt;p&gt;Lorem ipsum dolor sit amet.&lt;/p&gt;");</pre><p>Scripts are included and run by referencing the file name:</p><pre>$.getScript('ajax/test.js', function(data, textStatus){
   console.log(data); //data returned
   console.log(textStatus); //success
   console.log('Load was performed.');
});</pre><p><strong>Note:</strong> Should you require an additional callback for errors when using the <code>getScript()</code> method, the global <code>ajaxError()</code> callback event may be used to achieve this as follows:</p><pre>
$( "div.log" ).ajaxError(function(e, jqxhr, settings, exception) {
  if (settings.dataType=='script') {
    $(this).text( "Triggered ajaxError handler." );
  }
});
</pre></div>
  </d:entry>
  <d:entry id="jquery_globaleval__code___26_0" d:title="jQuery.globalEval()" d:value="jQueryglobalEval()">
    <d:index d:title="jQuery.globalEval()" d:value="jQueryglobalEval()"/>
    <d:index d:title="jQuery.globalEval()" d:value="globalEval()"/>
    <d:index d:title="jQuery.globalEval( code )" d:value="jQueryglobalEval( code )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.globalEval( code )</span> <span class="returns"/>
</h2><p class="desc"><strong>Description: </strong>Execute some JavaScript code globally.</p><ul class="signatures"><li class="signature" id="jQuery-globalEval-code">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0.4/">1.0.4</a></span>jQuery.globalEval( code )</h4>
<p class="arguement"><strong>code</strong>The JavaScript code to execute.</p>
</li></ul>
<p>This method behaves differently from using a normal JavaScript <code>eval()</code> in that it's executed within the global context (which is important for loading external scripts dynamically).</p></div>
  </d:entry>
  <d:entry id="jquery_grep__array__function_elementofarray__indexinarray_____invert_____27_0" d:title="jQuery.grep()" d:value="jQuerygrep()">
    <d:index d:title="jQuery.grep()" d:value="jQuerygrep()"/>
    <d:index d:title="jQuery.grep()" d:value="grep()"/>
    <d:index d:title="jQuery.grep( array, function(elementOfArray, indexInArray) [, invert] )" d:value="jQuerygrep( array, function(elementOfArray, indexInArray) [, invert] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.grep( array, function(elementOfArray, indexInArray) [, invert]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Array">Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Finds the elements of an array which satisfy a filter function. The original array is not affected.</p><ul class="signatures"><li class="signature" id="jQuery-grep-array-functionelementOfArray- indexInArray-invert">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.grep( array, function(elementOfArray, indexInArray) [, invert] )</h4>
<p class="arguement"><strong>array</strong>The array to search through.</p>
<p class="arguement"><strong>function(elementOfArray, indexInArray)</strong>The function to process each item against.  The first argument to the function is the item, and the second argument is the index.  The function should return a Boolean value.  <code>this</code> will be the global window object.</p>
<p class="arguement"><strong>invert</strong>If "invert" is false, or not provided, then the function returns an array consisting of all elements for which "callback" returns true.  If "invert" is true, then the function returns an array consisting of all elements for which "callback" returns false.</p>
</li></ul>
<p>The <code>$.grep()</code> method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.</p><p> The filter function will be passed two arguments: the current array item and its index. The filter function must return 'true' to include the item in the result array.</p></div>
  </d:entry>
  <d:entry id="gt_28_0" d:title=":gt() Selector" d:value="gt() Selector">
    <d:index d:title=":gt() Selector" d:value="gt() Selector"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">gt</span>  selector</h2><p class="desc"><strong>Description: </strong>Select all elements at an index greater than index within the matched set.</p><ul class="signatures"><li><dl class="arguments">
<dt>index</dt>
<dd>Zero-based index.</dd>
</dl></li></ul>
<p><strong>index-related selectors</strong></p><p>The index-related selector expressions (including this "greater than" selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (<code>.myclass</code>) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</p><p>Note that since JavaScript arrays use <em>0-based indexing</em>, these selectors reflect that fact. This is why <code>$('.myclass:gt(1)')</code> selects elements after the second element in the document with the class <code>myclass</code>, rather than after the first. In contrast, <code>:nth-child(n)</code> uses <em>1-based indexing</em> to conform to the CSS specification.</p><ul><li>Because <code>:gt()</code> is a jQuery extension and not part of the CSS specification, queries using <code>:gt()</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>$("your-pure-css-selector").slice(index)</code> instead.</li></ul></div>
  </d:entry>
  <d:entry id="_has__selector___29_0" d:title=".has()" d:value="has()">
    <d:index d:title=".has()" d:value="has()"/>
    <d:index d:title=".has( selector )" d:value="has( selector )"/>
    <d:index d:title=".has( contained )" d:value="has( contained )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.has( selector )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</p><ul class="signatures">
<li class="signature" id="has-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.has( selector )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li>
<li class="signature" id="has-contained">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.has( contained )</h4>
<p class="arguement"><strong>contained</strong>A DOM element to match elements against.</p>
</li>
</ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.has()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against the descendants of the matching elements; the element will be included in the result if any of its descendant elements matches the selector.</p><p>Consider a page with a nested list as follows:</p><pre>
 &lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2
    &lt;ul&gt;
      &lt;li&gt;list item 2-a&lt;/li&gt;
      &lt;li&gt;list item 2-b&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
&lt;/ul&gt;
</pre><p>We can apply this method to the set of list items as follows:</p><pre>$('li').has('ul').css('background-color', 'red');</pre><p>The result of this call is a red background for item 2, as it is the only <code>&lt;li&gt;</code> that has a <code>&lt;ul&gt;</code> among its descendants.</p></div>
  </d:entry>
  <d:entry id="attributehas_30_0" d:title="Has Attribute Selector [name]" d:value="Has Attribute Selector [name]">
    <d:index d:title="Has Attribute Selector [name]" d:value="Has Attribute Selector [name]"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">attributeHas</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects elements that have the specified attribute, with any value. </p><ul class="signatures"><li><dl class="arguments">
<dt>attribute</dt>
<dd>An attribute name.</dd>
</dl></li></ul>
</div>
  </d:entry>
  <d:entry id="has_31_0" d:title=":has() Selector" d:value="has() Selector">
    <d:index d:title=":has() Selector" d:value="has() Selector"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">has</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects elements which contain at least one element that matches the specified selector.</p><ul class="signatures"><li><dl class="arguments">
<dt>selector</dt>
<dd>Any selector.</dd>
</dl></li></ul>
<p>The expression <code>$('div:has(p)')</code> matches a <code>&lt;div&gt;</code> if a <code>&lt;p&gt;</code> exists anywhere among its descendants, not just as a direct child.</p><ul><li>Because <code>:has()</code> is a jQuery extension and not part of the CSS specification, queries using <code>:has()</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>$("your-pure-css-selector").has(selector/DOMElement)</code> instead.</li></ul></div>
  </d:entry>
  <d:entry id="_hasclass__classname___32_0" d:title=".hasClass()" d:value="hasClass()">
    <d:index d:title=".hasClass()" d:value="hasClass()"/>
    <d:index d:title=".hasClass( className )" d:value="hasClass( className )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.hasClass( className )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Determine whether any of the matched elements are assigned the given class.</p><ul class="signatures"><li class="signature" id="hasClass-className">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.hasClass( className )</h4>
<p class="arguement"><strong>className</strong>The class name to search for.</p>
</li></ul>
<p>Elements may have more than one class assigned to them. In HTML, this is represented by separating the class names with a space:</p><pre>&lt;div id="mydiv" class="foo bar"&gt;&lt;/div&gt;</pre><p>The <code>.hasClass()</code> method will return <code>true</code> if the class is assigned to an element, even if other classes also are. For example, given the HTML above, the following will return <code>true</code>:</p><pre>$('#mydiv').hasClass('foo')</pre><p>As would:</p><pre>$('#mydiv').hasClass('bar')</pre><p>While this would return <code>false</code>:</p><pre>$('#mydiv').hasClass('quux')</pre></div>
  </d:entry>
  <d:entry id="jquery_hasdata__element___33_0" d:title="jQuery.hasData()" d:value="jQueryhasData()">
    <d:index d:title="jQuery.hasData()" d:value="jQueryhasData()"/>
    <d:index d:title="jQuery.hasData()" d:value="hasData()"/>
    <d:index d:title="jQuery.hasData( element )" d:value="jQueryhasData( element )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.hasData( element )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Determine whether an element has any jQuery data associated with it.</p><ul class="signatures"><li class="signature" id="jQuery-hasData-element">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>jQuery.hasData( element )</h4>
<p class="arguement"><strong>element</strong>A DOM element to be checked for data.</p>
</li></ul>
<p>The <code>jQuery.hasData()</code> method provides a way to determine if an element currently has any values that were set using <code><a href="/jQuery.data">jQuery.data()</a></code>. If no data is associated with an element (there is no data object at all or the data object is empty), the method returns <code>false</code>; otherwise it returns <code>true</code>.</p><p>The primary advantage of <code>jQuery.hasData(element)</code> is that it does not create and associate a data object with the element if none currently exists. In contrast, <code>jQuery.data(element)</code> always returns a data object to the caller, creating one if no data object previously existed.
</p></div>
  </d:entry>
  <d:entry id="header_34_0" d:title=":header Selector" d:value="header Selector">
    <d:index d:title=":header Selector" d:value="header Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">header</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements that are headers, like h1, h2, h3 and so on.</p>
      <ul>
        <li>Because <code>:header</code> is a jQuery extension and not part of the CSS specification, queries using <code>:header</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:header</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":header")</code></a>.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_andself___35_0" d:title=".andSelf()" d:value="andSelf()">
    <d:index d:title=".andSelf()" d:value="andSelf()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.andSelf()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Add the previous set of elements on the stack to the current set.</p><ul class="signatures"><li class="signature" id="andSelf"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.andSelf()</h4></li></ul>
<p>As described in the discussion for <code><a href="http://api.jquery.com/end/">.end()</a></code>, jQuery objects maintain an internal stack that keeps track of changes to the matched set of elements. When one of the DOM traversal methods is called, the new set of elements is pushed onto the stack. If the previous set of elements is desired as well, <code>.andSelf()</code> can help.</p><p>Consider a page with a simple list on it:</p><pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>The result of the following code is a red background behind items 3, 4 and 5:</p><pre>$('li.third-item').nextAll().andSelf()
  .css('background-color', 'red');
</pre><p>First, the initial selector locates item 3, initializing the stack with the set containing just this item. The call to <code>.nextAll()</code> then pushes the set of items 4 and 5 onto the stack. Finally, the <code>.andSelf()</code> invocation merges these two sets together, creating a jQuery object that points to all three items in document order: <code>{[&lt;li.third-item&gt;,&lt;li&gt;,&lt;li&gt; ]}</code>.</p></div>
  </d:entry>
  <d:entry id="_height___36_0" d:title=".height()" d:value="height()">
    <d:index d:title=".height()" d:value="height()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.height()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Integer">Integer</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current computed height for the first element in the set of matched elements.</p><ul class="signatures"><li class="signature" id="height"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.height()</h4></li></ul>
<p>The difference between <code>.css('height')</code> and <code>.height()</code> is that the latter returns a unit-less pixel value (for example, <code>400</code>) while the former returns a value with units intact (for example, <code>400px</code>). The <code>.height()</code> method is recommended when an element's height needs to be used in a mathematical calculation.</p><p class="image"><img src="/images/0042_04_01.png"/></p><p>This method is also able to find the height of the window and document.</p><pre>$(window).height();   // returns height of browser viewport
$(document).height(); // returns height of HTML document</pre><p>Note that <code>.height()</code> will always return the content height, regardless of the value of the CSS <code>box-sizing</code> property.</p></div>
  </d:entry>
  <d:entry id="_height__value___36_1" d:title=".height()" d:value="height()">
    <d:index d:title=".height()" d:value="height()"/>
    <d:index d:title=".height( value )" d:value="height( value )"/>
    <d:index d:title=".height( function(index, height) )" d:value="height( function(index, height) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.height( value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set the CSS height of every matched element.</p><ul class="signatures">
<li class="signature" id="height-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.height( value )</h4>
<p class="arguement"><strong>value</strong>An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).</p>
</li>
<li class="signature" id="height-functionindex- height">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.1/">1.4.1</a></span>.height( function(index, height) )</h4>
<p class="arguement"><strong>function(index, height)</strong>A function returning the height to set. Receives the index position of the element in the set and the old height as arguments. Within the function, <code>this</code> refers to the current element in the set.</p>
</li>
</ul>
<p>When calling <code>.height(value)</code>, the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, a valid CSS measurement must be provided for the height (such as <code>100px</code>, <code>50%</code>, or <code>auto</code>). Note that in modern browsers, the CSS height property does not include padding, border, or margin.</p><p>If no explicit unit was specified (like 'em' or '%') then "px" is concatenated to the value.</p><p>Note that <code>.height(value)</code> sets the height of the box in accordance with the CSS <code>box-sizing</code> property. Changing this property to <code>border-box</code> will cause this function to change the outerHeight of the box instead of the content height.</p></div>
  </d:entry>
  <d:entry id="hidden_37_0" d:title=":hidden Selector" d:value="hidden Selector">
    <d:index d:title=":hidden Selector" d:value="hidden Selector"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">hidden</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects all elements that are hidden.</p><p>Elements can be considered hidden for several reasons:</p><ul>
<li>They have a CSS <code>display</code> value of <code>none</code>.</li>
<li>They are form elements with <code>type="hidden"</code>.</li>
<li>Their width and height are explicitly set to 0.</li>
<li>An ancestor element is hidden, so the element is not shown on the page.</li>
</ul>
<p>Elements with <code>visibility: hidden</code> or <code>opacity: 0</code> are considered to be visible, since they still consume space in the layout. During animations that hide an element, the element is considered to be visible until the end of the animation. During animations to show an element, the element is considered to be visible at the start of the animation.</p><p>How <code>:hidden</code> is determined was changed in jQuery 1.3.2. An element is assumed to be hidden if it or any of its parents consumes no space in the document. CSS visibility isn't taken into account (therefore <code>$(elem).css('visibility','hidden').is(':hidden') == false</code>). The <a href="http://docs.jquery.com/Release:jQuery_1.3.2#:visible.2F:hidden_Overhauled">release notes</a> outline the changes in more detail.</p><ul><li>Because <code>:hidden</code> is a jQuery extension and not part of the CSS specification, queries using <code>:hidden</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:hidden</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":hidden")</code></a>.</li></ul></div>
  </d:entry>
  <d:entry id="_hide_____38_0" d:title=".hide()" d:value="hide()">
    <d:index d:title=".hide()" d:value="hide()"/>
    <d:index d:title=".hide( duration [, callback] )" d:value="hide( duration [, callback] )"/>
    <d:index d:title=".hide(  [duration] [, easing] [, callback] )" d:value="hide(  [duration] [, easing] [, callback] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.hide(  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Hide the matched elements.</p><ul class="signatures">
<li class="signature" id="hide"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.hide()</h4></li>
<li class="signature" id="hide-duration-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.hide( duration [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="hide-duration-easing-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.hide(  [duration] [, easing] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
</ul>
<p>With no parameters, the <code>.hide()</code> method is the simplest way to hide an element:</p><pre>$('.target').hide();
</pre><p>The matched elements will be hidden immediately, with no animation. This is roughly equivalent to calling <code>.css('display', 'none')</code>, except that the value of the <code>display</code> property is saved in jQuery's data cache so that <code>display</code> can later be restored to its initial value. If an element has a <code>display</code> value of <code>inline</code>, then is hidden and shown, it will once again be displayed <code>inline</code>.</p><p>When a duration is provided, <code>.hide()</code> becomes an animation method. The <code>.hide()</code> method animates the width, height, and opacity of the matched elements simultaneously. When these properties reach 0, the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p><p>As of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com">jQuery UI suite</a>.</p><p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p><p>We can animate any element, such as a simple image:</p><pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;
With the element initially shown, we can hide it slowly:
$('#clickme').click(function() {
  $('#book').hide('slow', function() {
    alert('Animation complete.');
  });
});</pre><p class="image four-across"> 
  <img src="/images/0042_06_05.png" alt=""/><img src="/images/0042_06_06.png" alt=""/><img src="/images/0042_06_07.png" alt=""/><img src="/images/0042_06_08.png" alt=""/></p><ul><li>All jQuery effects, including <code>.hide()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li></ul></div>
  </d:entry>
  <d:entry id="jquery_holdready__hold___39_0" d:title="jQuery.holdReady()" d:value="jQueryholdReady()">
    <d:index d:title="jQuery.holdReady()" d:value="jQueryholdReady()"/>
    <d:index d:title="jQuery.holdReady()" d:value="holdReady()"/>
    <d:index d:title="jQuery.holdReady( hold )" d:value="jQueryholdReady( hold )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.holdReady( hold )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#undefined">undefined</a></span>
</h2><p class="desc"><strong>Description: </strong>Holds or releases the execution of jQuery's ready event.</p><ul class="signatures"><li class="signature" id="jQuery-holdReady-hold">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>jQuery.holdReady( hold )</h4>
<p class="arguement"><strong>hold</strong>Indicates whether the ready hold is being requested or released</p>
</li></ul>
<p>The <code>$.holdReady()</code> method allows the caller to delay jQuery's ready event. This <em>advanced feature</em> would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the <code>&lt;head&gt;</code> immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect. </p><p>To delay the ready event, first call <code>$.holdReady(true)</code>. When the ready event should be released to execute, call <code>$.holdReady(false)</code>. Note that multiple holds can be put on the ready event, one for each <code>$.holdReady(true)</code> call. The ready event will not actually fire until all holds have been released with a corresponding number of <code>$.holdReady(false)</code> calls <em>and</em> the normal document ready conditions are met. (See <a href="http://api.jquery.com/ready/"><code>ready</code></a> for more information.)</p></div>
  </d:entry>
  <d:entry id="_hover__handlerin_eventobject___handlerout_eventobject____40_0" d:title=".hover()" d:value="hover()">
    <d:index d:title=".hover()" d:value="hover()"/>
    <d:index d:title=".hover( handlerIn(eventObject), handlerOut(eventObject) )" d:value="hover( handlerIn(eventObject), handlerOut(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.hover( handlerIn(eventObject), handlerOut(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.</p><ul class="signatures"><li class="signature" id="hover-handlerIneventObject-handlerOuteventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.hover( handlerIn(eventObject), handlerOut(eventObject) )</h4>
<p class="arguement"><strong>handlerIn(eventObject)</strong>A function to execute when the mouse pointer enters the element.</p>
<p class="arguement"><strong>handlerOut(eventObject)</strong>A function to execute when the mouse pointer leaves the element.</p>
</li></ul>
<p>The <code>.hover()</code> method binds handlers for both <code>mouseenter</code> and <code>mouseleave</code> events. You can use it to simply apply behavior to an element during the time the mouse is within the element.</p><p>Calling <code>$(selector).hover(handlerIn, handlerOut)</code> is shorthand for:</p><pre>$(selector).mouseenter(handlerIn).mouseleave(handlerOut);</pre><p>See the discussions for <code><a href="/mouseenter">.mouseenter()</a></code> and <code><a href="/mouseleave">.mouseleave()</a></code> for more details.</p></div>
  </d:entry>
  <d:entry id="_hover__handlerinout_eventobject____40_1" d:title=".hover()" d:value="hover()">
    <d:index d:title=".hover()" d:value="hover()"/>
    <d:index d:title=".hover( handlerInOut(eventObject) )" d:value="hover( handlerInOut(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.hover( handlerInOut(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.</p><ul class="signatures"><li class="signature" id="hover-handlerInOuteventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.hover( handlerInOut(eventObject) )</h4>
<p class="arguement"><strong>handlerInOut(eventObject)</strong>A function to execute when the mouse pointer enters or leaves the element.</p>
</li></ul>
<p>The <code>.hover()</code> method, when passed a single function, will execute that handler for both <code>mouseenter</code> and <code>mouseleave</code> events. This allows the user to use jQuery's various toggle methods within the handler or to respond differently within the handler depending on the <code>event.type</code>.</p><p>Calling <code>$(selector).hover(handlerInOut)</code> is shorthand for:</p><pre>$(selector).bind("mouseenter mouseleave", handlerInOut);</pre><p>See the discussions for <code><a href="/mouseenter">.mouseenter()</a></code> and <code><a href="/mouseleave">.mouseleave()</a></code> for more details.</p></div>
  </d:entry>
  <d:entry id="_html___41_0" d:title=".html()" d:value="html()">
    <d:index d:title=".html()" d:value="html()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.html()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the HTML contents of the first element in the set of matched elements.</p><ul class="signatures"><li class="signature" id="html"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.html()</h4></li></ul>
<p>This method is not available on XML documents.</p><p>In an HTML document, <code>.html()</code> can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code:</p><pre>$('div.demo-container').html();</pre><p>In order for the following <code>&lt;div&gt;</code>'s content to be retrieved, it would have to be the first one with <code>class="demo-container"</code> in the document:</p><pre>&lt;div class="demo-container"&gt;
  &lt;div class="demo-box"&gt;Demonstration Box&lt;/div&gt;
&lt;/div&gt;</pre><p>The result would look like this:</p><pre>&lt;div class="demo-box"&gt;Demonstration Box&lt;/div&gt;</pre><p>This method uses the browser's <code>innerHTML</code> property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters.</p></div>
  </d:entry>
  <d:entry id="_html__htmlstring___41_1" d:title=".html()" d:value="html()">
    <d:index d:title=".html()" d:value="html()"/>
    <d:index d:title=".html( htmlString )" d:value="html( htmlString )"/>
    <d:index d:title=".html( function(index, oldhtml) )" d:value="html( function(index, oldhtml) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.html( htmlString )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set the HTML contents of each element in the set of matched elements.</p><ul class="signatures">
<li class="signature" id="html-htmlString">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.html( htmlString )</h4>
<p class="arguement"><strong>htmlString</strong>A string of HTML to set as the content of each matched element.</p>
</li>
<li class="signature" id="html-functionindex- oldhtml">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.html( function(index, oldhtml) )</h4>
<p class="arguement"><strong>function(index, oldhtml)</strong>A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, <code>this</code> refers to the current element in the set.</p>
</li>
</ul>
<p>The <code>.html()</code> method is not available in XML documents. </p><p>When <code>.html()</code> is used to set an element's content, any content that was in that element is completely replaced by the new content. Consider the following HTML:</p><pre>&lt;div class="demo-container"&gt;
  &lt;div class="demo-box"&gt;Demonstration Box&lt;/div&gt;
&lt;/div&gt;</pre><p>The content of <code>&lt;div class="demo-container"&gt;</code> can be set like this:</p><pre>$('div.demo-container')
  .html('&lt;p&gt;All new content. &lt;em&gt;You bet!&lt;/em&gt;&lt;/p&gt;');</pre><p>That line of code will replace everything inside <code>&lt;div class="demo-container"&gt;</code>:</p><pre>&lt;div class="demo-container"&gt;
  &lt;p&gt;All new content. &lt;em&gt;You bet!&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;</pre><p>As of jQuery 1.4, the <code>.html()</code> method allows the HTML content to be set by passing in a function.</p><pre>$('div.demo-container').html(function() {
  var emph = '&lt;em&gt;' + $('p').length + ' paragraphs!&lt;/em&gt;';
  return '&lt;p&gt;All new content for ' + emph + '&lt;/p&gt;';
});</pre><p>Given a document with six paragraphs, this example will set the HTML of <code>&lt;div class="demo-container"&gt;</code> to <code>&lt;p&gt;All new content for &lt;em&gt;6 paragraphs!&lt;/em&gt;&lt;/p&gt;</code>.</p><p>This method uses the browser's <code>innerHTML</code> property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all <code>href</code> properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate <a href="http://code.google.com/p/html5shiv/">compatibility layer</a>.</p></div>
  </d:entry>
  <d:entry id="id_42_0" d:title="ID Selector (“#id”)" d:value="ID Selector (“#id”)">
    <d:index d:title="ID Selector (“#id”)" d:value="ID Selector (“#id”)"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">id</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects a single element with the given id attribute. </p><ul class="signatures"><li><dl class="arguments">
<dt>id</dt>
<dd>An ID to search for, specified via the id attribute of an element.</dd>
</dl></li></ul>
<p>For id selectors, jQuery uses the JavaScript function <code>document.getElementById()</code>, which is extremely efficient. When another selector is attached to the id selector, such as <code>h2#pageTitle</code>, jQuery performs an additional check before identifying the element as a match.</p><blockquote><p>As always, remember that as a developer, your time is typically the most valuable resource. Do not focus on optimization of selector speed unless it is clear that performance needs to be improved.</p></blockquote><p>Each <code>id</code> value must be used only once within a document. If more than one element has been assigned the same ID, queries that use that ID will only select the first matched element in the DOM. This behavior should not be relied on, however; a document with more than one element using the same ID is invalid.</p><p>If the id contains characters like periods or colons you have to <a href="http://docs.jquery.com/Frequently_Asked_Questions#How_do_I_select_an_element_by_an_ID_that_has_characters_used_in_CSS_notation.3F">escape those characters with backslashes</a>.</p></div>
  </d:entry>
  <d:entry id="image_43_0" d:title=":image Selector" d:value="image Selector">
    <d:index d:title=":image Selector" d:value="image Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">image</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements of type image.</p>
      <p><code>:image</code> is equivalent to <code>[type="image"]</code></p>
      <ul>
        <li>Because <code>:image</code> is a jQuery extension and not part of the CSS specification, queries using <code>:image</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type="image"]</code> instead.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="jquery_inarray__value__array___44_0" d:title="jQuery.inArray()" d:value="jQueryinArray()">
    <d:index d:title="jQuery.inArray()" d:value="jQueryinArray()"/>
    <d:index d:title="jQuery.inArray()" d:value="inArray()"/>
    <d:index d:title="jQuery.inArray( value, array )" d:value="jQueryinArray( value, array )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.inArray( value, array )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Number">Number</a></span>
</h2><p class="desc"><strong>Description: </strong>Search for a specified value within an array and return its index (or -1 if not found).</p><ul class="signatures"><li class="signature" id="jQuery-inArray-value-array">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>jQuery.inArray( value, array )</h4>
<p class="arguement"><strong>value</strong>The value to search for.</p>
<p class="arguement"><strong>array</strong>An array through which to search.</p>
</li></ul>
<p>The <code>$.inArray()</code> method is similar to JavaScript's native <code>.indexOf()</code> method in that it returns -1 when it doesn't find a match. If the first element within the array matches <code>value</code>, <code>$.inArray()</code> returns 0.</p><p>Because JavaScript treats 0 as loosely equal to false (i.e. 0 == false, but 0 !== false), if we're checking for the presence of <code>value</code> within <code>array</code>, we need to check if it's not equal to (or greater than) -1.</p></div>
  </d:entry>
  <d:entry id="_index_____45_0" d:title=".index()" d:value="index()">
    <d:index d:title=".index()" d:value="index()"/>
    <d:index d:title=".index( selector )" d:value="index( selector )"/>
    <d:index d:title=".index( element )" d:value="index( element )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.index(  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Number">Number</a></span>
</h2><p class="desc"><strong>Description: </strong>Search for a given element from among the matched elements.</p><ul class="signatures">
<li class="signature" id="index"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.index()</h4></li>
<li class="signature" id="index-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.index( selector )</h4>
<p class="arguement"><strong>selector</strong>A selector representing a jQuery collection in which to look for an element.</p>
</li>
<li class="signature" id="index-element">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.index( element )</h4>
<p class="arguement"><strong>element</strong>The DOM element or first element within the jQuery object to look for.</p>
</li>
</ul>
<h4>Return Values</h4><p>If no argument is passed to the <code>.index()</code> method, the return value is an integer indicating the position of the first element within the jQuery object relative to its sibling elements.</p><p>If <code>.index()</code> is called on a collection of elements and a DOM element or jQuery object is passed in, <code>.index()</code> returns an integer indicating the position of the passed element relative to the original collection.</p><p>If a selector string is passed as an argument, <code>.index()</code> returns an integer indicating the position of the original element relative to the elements matched by the selector. If the element is not found, <code>.index()</code> will return -1.</p><h4>Detail</h4><p>The complementary operation to <code>.get()</code>, which accepts an index and returns a DOM node, <code>.index()</code> can take a DOM node and returns an index. Suppose we have a simple unordered list on the page:</p><pre>
&lt;ul&gt;
  &lt;li id="foo"&gt;foo&lt;/li&gt;
  &lt;li id="bar"&gt;bar&lt;/li&gt;
  &lt;li id="baz"&gt;baz&lt;/li&gt;
&lt;/ul&gt;
</pre><p>If we retrieve one of the three list items (for example, through a DOM function or as the context to an event handler), <code>.index()</code> can search for this list item within the set of matched elements:</p><pre>
var listItem = document.getElementById('bar');
alert('Index: ' + $('li').index(listItem));
We get back the zero-based position of the list item:
</pre><p><span class="output">Index: 1</span></p><p>Similarly, if we retrieve a jQuery object consisting of one of the three list items, <code>.index()</code> will search for that list item:</p><pre>
var listItem = $('#bar');
alert('Index: ' + $('li').index(listItem));
</pre><p>We get back the zero-based position of the list item:</p><p><span class="output">Index: 1</span></p><p>Note that if the jQuery collection used as the <code>.index()</code> method's argument contains more than one element, the first element within the matched set of elements will be used.</p><pre>
var listItems = $('li:gt(0)');
alert('Index: ' + $('li').index(listItems));
</pre><p>We get back the zero-based position of the first list item within the matched set:</p><p><span class="output">Index: 1</span></p><p>If we use a string as the <code>.index()</code> method's argument, it is interpreted as a jQuery selector string. The first element among the object's matched elements which also matches this selector is located.</p><pre>
var listItem = $('#bar');
alert('Index: ' + listItem.index('li'));
</pre><p>We get back the zero-based position of the list item:</p><p><span class="output">Index: 1</span></p><p>If we omit the argument, <code>.index()</code> will return the position of the first element within the set of matched elements in relation to its siblings:</p><pre>alert('Index: ' + $('#bar').index();</pre><p>Again, we get back the zero-based position of the list item:</p><p><span class="output">Index: 1</span></p></div>
  </d:entry>
  <d:entry id="_animate__properties____duration______easing______complete_____46_0" d:title=".animate()" d:value="animate()">
    <d:index d:title=".animate()" d:value="animate()"/>
    <d:index d:title=".animate( properties [, duration] [, easing] [, complete] )" d:value="animate( properties [, duration] [, easing] [, complete] )"/>
    <d:index d:title=".animate( properties, options )" d:value="animate( properties, options )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.animate( properties [, duration]  [, easing]  [, complete]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Perform a custom animation of a set of CSS properties.</p><ul class="signatures">
<li class="signature" id="animate-properties-duration-easing-complete">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.animate( properties [, duration] [, easing] [, complete] )</h4>
<p class="arguement"><strong>properties</strong>A map of CSS properties that the animation will move toward.</p>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>complete</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="animate-properties-options">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.animate( properties, options )</h4>
<p class="arguement"><strong>properties</strong>A map of CSS properties that the animation will move toward.</p>
<p class="arguement"><strong>options</strong>A map of additional options to pass to the method. Supported keys:
        </p>
<ul>
<li>
<code>duration</code>: A string or number determining how long the animation will run.</li>
        <li>
<code>easing</code>: A string indicating which easing function to use for the transition.</li>
        <li>
<code>complete</code>: A function to call once the animation is complete.</li>
        <li>
<code>step</code>: A function to be called after each step of the animation.</li>
        <li>
<code>queue</code>: A Boolean indicating whether to place the animation in the effects queue. If <code>false</code>, the animation will begin immediately.</li>
        <li>
<code>specialEasing</code>: A map of one or more of the CSS properties defined by the properties argument and their corresponding easing functions (added 1.4).</li>
        </ul>
</li>
</ul>
<p>The <code>.animate()</code> method allows us to create animation effects on any numeric CSS property. The only required parameter is a map of CSS properties. This map is similar to the one that can be sent to the <code>.css()</code> method, except that the range of properties is more restrictive.</p><h4 id="animation-properties">Animation Properties and Values</h4><p>All animated properties should be animated to a <em>single numeric value</em>, except as noted below; most properties that are non-numeric cannot be animated using basic jQuery functionality. (For example, <code>width</code>, <code>height</code>, or <code>left</code> can be animated but <code>background-color</code> cannot be.) Property values are treated as a number of pixels unless otherwise specified. The units <code>em</code> and <code>%</code> can be specified where applicable.</p><p>In addition to style properties, some non-style properties such as <code>scrollTop</code> and <code>scrollLeft</code>, as well as custom properties, can be animated.</p><p>Shorthand CSS properties (e.g. margin, background, border) are not supported. For example, if you want to retrieve the rendered margin, use: <code>$(elem).css('marginTop')</code> and <code>$(elem).css('marginRight')</code>, and so on.</p><p>In addition to numeric values, each property can take the strings <code>'show'</code>, <code>'hide'</code>, and <code>'toggle'</code>. These shortcuts allow for custom hiding and showing animations that take into account the display type of the element.</p><p>Animated properties can also be relative. If a value is supplied with a leading <code>+=</code> or <code>-=</code> sequence of characters, then the target value is computed by adding or subtracting the given number from the current value of the property.</p><blockquote><p><strong>Note:</strong> Unlike shorthand animation methods such as <code>.slideDown()</code> and <code>.fadeIn()</code>, the <code>.animate()</code> method does <em>not</em> make hidden elements visible as part of the effect. For example, given <code>$('someElement').hide().animate({height:'20px'}, 500)</code>, the animation will run, but <em>the element will remain hidden</em>.</p></blockquote><h4 id="duration">Duration</h4><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p><h4 id="complete">Complete Function</h4><p>If supplied, the <code>complete</code> callback function is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, the callback is executed once per matched element, not once for the animation as a whole.</p><h4 id="basic-usage">Basic Usage</h4><p>To animate any element, such as a simple image:</p><pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123"
  style="position: relative; left: 10px;" /&gt;</pre><p>To animate the opacity, left offset, and height of the image simultaneously:</p><pre>$('#clickme').click(function() {
  $('#book').animate({
    opacity: 0.25,
    left: '+=50',
    height: 'toggle'
  }, 5000, function() {
    // Animation complete.
  });
});
</pre><p class="image">
  <img src="/images/animate-1.jpg" alt=""/></p><p>Note that the target value of the <code>height</code> property is <code>'toggle'</code>. Since the image was visible before, the animation shrinks the height to 0 to hide it. A second click then reverses this transition:
</p><p class="image">
<img src="/images/animate-2.jpg" alt=""/></p><p>The <code>opacity</code> of the image is already at its target value, so this property is not animated by the second click. Since the target value for <code>left</code> is a relative value, the image moves even farther to the right during this second animation.</p><p>Directional properties (<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>) have no discernible effect on elements if their  <code>position</code> style property is <code>static</code>, which it is by default.</p><blockquote><p><strong>Note: </strong>The <a href="http://jqueryui.com">jQuery UI</a> project extends the <code>.animate()</code> method by allowing some non-numeric styles such as colors to be animated. The project also includes mechanisms for specifying animations through CSS classes rather than individual attributes.</p></blockquote><blockquote><p><strong>Note:</strong> if attempting to animate an element with a height or width of 0px, where contents of the element are visible due to overflow, jQuery may clip this overflow during animation. By fixing the dimensions of the original element being hidden however, it is possible to ensure that the animation runs smoothly. A <a href="http://www.google.com/search?q=clearfix">clearfix</a> can be used to automatically fix the dimensions of your main element without the need to set this manually.</p></blockquote><h4 id="step">Step Function</h4><p>The second version of <code>.animate()</code> provides a <code>step</code> option — a callback function that is fired at each step of the animation. This function is useful for enabling custom animation types or altering the animation as it is occurring. It accepts two arguments (<code>now</code> and <code>fx</code>), and <code>this</code> is set to the DOM element being animated.
</p><ul><li>
<code>now</code>: the numeric value of the property being animated at each step</li>
  <li>
<code>fx</code>: a reference to the <code>jQuery.fx</code> prototype object, which contains a number of properties such as <code>elem</code> for the animated element, <code>start</code> and <code>end</code> for the first and last value of the animated property, respectively, and <code>prop</code> for the property being animated.</li>
</ul><p>Note that the <code>step</code> function is called for each animated property on each animated element. For example, given two list items, the <code>step</code> function fires four times at each step of the animation:  </p><pre>$('li').animate({
  opacity: .5,
  height: '50%'
},
{
  step: function(now, fx) {
    var data = fx.elem.id + ' ' + fx.prop + ': ' + now;
    $('body').append('&lt;div&gt;' + data + '&lt;/div&gt;');
  }
});</pre><h4 id="easing">Easing</h4><p>The remaining parameter of <code>.animate()</code> is a string naming an easing function to use. An easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com/">jQuery UI suite</a>.</p><h4 id="per-property-easing">Per-property Easing</h4><p>As of jQuery version 1.4, you can set per-property easing functions within a single <code>.animate()</code> call. In the first version of <code>.animate()</code>, each property can take an array as its value: The first member of the array is the CSS property and the second member is an easing function.  If a per-property easing function is not defined for a particular property, it uses the value of the <code>.animate()</code> method's optional easing argument. If the easing argument is not defined, the default <code>swing</code> function is used.</p><p>For example, to simultaneously animate the width and height with the <code>swing</code> easing function and the opacity with the <code>linear</code> easing function:</p><pre>$('#clickme').click(function() {
  $('#book').animate({
    width: ['toggle', 'swing'],
    height: ['toggle', 'swing'],
    opacity: 'toggle'
  }, 5000, 'linear', function() {
      $(this).after('&lt;div&gt;Animation complete.&lt;/div&gt;');
  });
});</pre><p>In the second version of <code>.animate()</code>, the options map can include the <code>specialEasing</code> property, which is itself a map of CSS properties and their corresponding easing functions.  For example, to simultaneously animate the width using the <code>linear</code> easing function and the height using the <code>easeOutBounce</code> easing function:</p><pre>$('#clickme').click(function() {
  $('#book').animate({
    width: 'toggle',
    height: 'toggle'
  }, {
    duration: 5000,
    specialEasing: {
      width: 'linear',
      height: 'easeOutBounce'
    },
    complete: function() {
      $(this).after('&lt;div&gt;Animation complete.&lt;/div&gt;');
    }
  });
});</pre><p>As previously noted, a plugin is required for the <code>easeOutBounce</code> function.</p><ul><li>All jQuery effects, including <code>.animate()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li>
<li>Because of the nature of <a href="https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame"><code>requestAnimationFrame()</code></a>, you should never queue animations using a <code>setInterval</code> or <code>setTimeout</code> loop. In order to preserve CPU resources, browsers that support <code>requestAnimationFrame</code> will not update animations when the window/tab is not displayed. If you continue to queue animations via <code>setInterval</code> or <code>setTimeout</code> while animation is paused, all of the queued animations will begin playing when the window/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements <a href="http://api.jquery.com/queue"><code>.queue()</code></a> to set the timeout to start the next animation.&#13;
</li>
</ul></div>
  </d:entry>
  <d:entry id="_innerheight___47_0" d:title=".innerHeight()" d:value="innerHeight()">
    <d:index d:title=".innerHeight()" d:value="innerHeight()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.innerHeight()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Integer">Integer</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current computed height for the first element in the set of matched elements, including padding but not border.</p><ul class="signatures"><li class="signature" id="innerHeight"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.6/">1.2.6</a></span>.innerHeight()</h4></li></ul>
<p>This method returns the height of the element, including top and bottom padding, in pixels.</p><p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code><a href="/height">.height()</a></code> instead.</p><p class="image"><img src="/images/0042_04_02.png"/></p></div>
  </d:entry>
  <d:entry id="_innerwidth___48_0" d:title=".innerWidth()" d:value="innerWidth()">
    <d:index d:title=".innerWidth()" d:value="innerWidth()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.innerWidth()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Integer">Integer</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current computed width for the first element in the set of matched elements, including padding but not border.</p><ul class="signatures"><li class="signature" id="innerWidth"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.6/">1.2.6</a></span>.innerWidth()</h4></li></ul>
<p>This method returns the width of the element, including left and right padding, in pixels.</p><p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code><a href="/width">.width()</a></code> instead.</p><p class="image"><img src="/images/0042_04_05.png"/></p></div>
  </d:entry>
  <d:entry id="input_49_0" d:title=":input Selector" d:value="input Selector">
    <d:index d:title=":input Selector" d:value="input Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">input</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all input, textarea, select and button elements.</p>
      <p>The <code>:input</code> selector basically selects all form controls.</p>
      <ul>
        <li>Because <code>:input</code> is a jQuery extension and not part of the CSS specification, queries using <code>:input</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:input</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":input")</code></a>.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_insertafter__target___50_0" d:title=".insertAfter()" d:value="insertAfter()">
    <d:index d:title=".insertAfter()" d:value="insertAfter()"/>
    <d:index d:title=".insertAfter( target )" d:value="insertAfter( target )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.insertAfter( target )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Insert every element in the set of matched elements after the target.</p><ul class="signatures"><li class="signature" id="insertAfter-target">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.insertAfter( target )</h4>
<p class="arguement"><strong>target</strong>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.</p>
</li></ul>
<p>The <code><a href="/after">.after()</a></code> and <code>.insertAfter()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .after()</code>, the selector expression preceding the method is the container after which the content is inserted. With <code>.insertAfter()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.</p><p>Consider the following HTML:</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>We can create content and insert it after several elements at once:</p><pre>$('&lt;p&gt;Test&lt;/p&gt;').insertAfter('.inner');</pre><p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
&lt;/div&gt;</pre><p>We can also select an element on the page and insert it after another:</p><pre>$('h2').insertAfter($('.container'));</pre><p>If an element selected this way is inserted elsewhere, it will be moved after the target (not cloned):</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Greetings&lt;/h2&gt;</pre><p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p></div>
  </d:entry>
  <d:entry id="_insertbefore__target___51_0" d:title=".insertBefore()" d:value="insertBefore()">
    <d:index d:title=".insertBefore()" d:value="insertBefore()"/>
    <d:index d:title=".insertBefore( target )" d:value="insertBefore( target )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.insertBefore( target )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Insert every element in the set of matched elements before the target.</p><ul class="signatures"><li class="signature" id="insertBefore-target">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.insertBefore( target )</h4>
<p class="arguement"><strong>target</strong>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.</p>
</li></ul>
<p>The <code><a href="/before">.before()</a></code> and <code>.insertBefore()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .before()</code>, the selector expression preceding the method is the container before which the content is inserted. With <code>.insertBefore()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.</p><p>Consider the following HTML:</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>We can create content and insert it before several elements at once:</p><pre>$('&lt;p&gt;Test&lt;/p&gt;').insertBefore('.inner');</pre><p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>We can also select an element on the page and insert it before another:</p><pre>$('h2').insertBefore($('.container'));</pre><p>If an element selected this way is inserted elsewhere, it will be moved before the target (not cloned):</p><pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p></div>
  </d:entry>
  <d:entry id="_is__selector___52_0" d:title=".is()" d:value="is()">
    <d:index d:title=".is()" d:value="is()"/>
    <d:index d:title=".is( selector )" d:value="is( selector )"/>
    <d:index d:title=".is( function(index) )" d:value="is( function(index) )"/>
    <d:index d:title=".is( jQuery object )" d:value="is( jQuery object )"/>
    <d:index d:title=".is( element )" d:value="is( element )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.is( selector )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.</p><ul class="signatures">
<li class="signature" id="is-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.is( selector )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li>
<li class="signature" id="is-functionindex">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.is( function(index) )</h4>
<p class="arguement"><strong>function(index)</strong>A function used as a test for the set of elements. It accepts one argument, <code>index</code>, which is the element's index in the jQuery collection.Within the function, <code>this</code> refers to the current DOM element. </p>
</li>
<li class="signature" id="is-jQuery object">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.is( jQuery object )</h4>
<p class="arguement"><strong>jQuery object</strong>An existing jQuery object to match the current set of elements against.</p>
</li>
<li class="signature" id="is-element">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.is( element )</h4>
<p class="arguement"><strong>element</strong>An element to match the current set of elements against.</p>
</li>
</ul>
<p>Unlike other filtering methods, <code>.is()</code> does not create a new jQuery object. Instead, it allows you to test the contents of a jQuery object without modification. This is often useful inside callbacks, such as event handlers.</p><p>Suppose you have a list, with two of its items containing a child element:</p><pre>
&lt;ul&gt;
  &lt;li&gt;list &lt;strong&gt;item 1&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span&gt;list item 2&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;
</pre><p>You can attach a click handler to the &lt;ul&gt; element, and then limit the code to be triggered only when a list item itself, not one of its children, is clicked:</p><pre>$("ul").click(function(event) {
  var $target = $(event.target);
  if ( $target.is("li") ) {
    $target.css("background-color", "red");
  }
});</pre><p>Now, when the user clicks on the word "list" in the first item or anywhere in the third item, the clicked list item will be given a red background. However, when the user clicks on item 1 in the first item or anywhere in the second item, nothing will occur, because in those cases the target of the event would be <code>&lt;strong&gt;</code> or <code>&lt;span&gt;</code>, respectively.
</p><p>Be aware that for selector strings with positional selectors such as <code>:first</code>, <code>:gt()</code>, or <code>:even</code>, the positional filtering is done against the jQuery object passed to <code>.is()</code>, <em>not</em> against the containing document. So for the HTML shown above, an expression such as <code>$("li:first").is("li:last")</code> returns <code>true</code>, but <code>$("li:first-child").is("li:last-child")</code> returns <code>false</code>.</p><h4>Using a Function</h4><p>The second form of this method evaluates expressions related to elements based on a function rather than a selector. For each element, if the function returns <code>true</code>, <code>.is()</code> returns <code>true</code> as well. For example, given a somewhat more involved HTML snippet:</p><pre>
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; item 1 - one strong tag&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; item &lt;strong&gt;2&lt;/strong&gt; -
    two &lt;span&gt;strong tags&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>You can attach a click handler to every <code>&lt;li&gt;</code> that evaluates the number of <code>&lt;strong&gt;</code> elements within the clicked <code>&lt;li&gt;</code> at that time like so:</p><pre>
$("li").click(function() {
  var $li = $(this),
    isWithTwo = $li.is(function() {
      return $('strong', this).length === 2;
    });
  if ( isWithTwo ) {
    $li.css("background-color", "green");
  } else {
    $li.css("background-color", "red");
  }
});
</pre></div>
  </d:entry>
  <d:entry id="jquery_isarray__obj___53_0" d:title="jQuery.isArray()" d:value="jQueryisArray()">
    <d:index d:title="jQuery.isArray()" d:value="jQueryisArray()"/>
    <d:index d:title="jQuery.isArray()" d:value="isArray()"/>
    <d:index d:title="jQuery.isArray( obj )" d:value="jQueryisArray( obj )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.isArray( obj )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#boolean">boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Determine whether the argument is an array.</p><ul class="signatures"><li class="signature" id="jQuery-isArray-obj">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>jQuery.isArray( obj )</h4>
<p class="arguement"><strong>obj</strong>Object to test whether or not it is an array.</p>
</li></ul>
<p><code>$.isArray()</code> returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).</p></div>
  </d:entry>
  <d:entry id="jquery_isemptyobject__object___54_0" d:title="jQuery.isEmptyObject()" d:value="jQueryisEmptyObject()">
    <d:index d:title="jQuery.isEmptyObject()" d:value="jQueryisEmptyObject()"/>
    <d:index d:title="jQuery.isEmptyObject()" d:value="isEmptyObject()"/>
    <d:index d:title="jQuery.isEmptyObject( object )" d:value="jQueryisEmptyObject( object )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.isEmptyObject( object )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Check to see if an object is empty (contains no properties).</p><ul class="signatures"><li class="signature" id="jQuery-isEmptyObject-object">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>jQuery.isEmptyObject( object )</h4>
<p class="arguement"><strong>object</strong>The object that will be checked to see if it's empty.</p>
</li></ul>
<p>As of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty). The argument should always be a plain JavaScript <code>Object</code> as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use <a href="http://api.jquery.com/jQuery.isPlainObject"><code>$.isPlainObject()</code></a></p></div>
  </d:entry>
  <d:entry id="jquery_isfunction__obj___55_0" d:title="jQuery.isFunction()" d:value="jQueryisFunction()">
    <d:index d:title="jQuery.isFunction()" d:value="jQueryisFunction()"/>
    <d:index d:title="jQuery.isFunction()" d:value="isFunction()"/>
    <d:index d:title="jQuery.isFunction( obj )" d:value="jQueryisFunction( obj )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.isFunction( obj )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#boolean">boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Determine if the argument passed is a Javascript function object. </p><ul class="signatures"><li class="signature" id="jQuery-isFunction-obj">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>jQuery.isFunction( obj )</h4>
<p class="arguement"><strong>obj</strong>Object to test whether or not it is a function.</p>
</li></ul>
<p><strong>Note:</strong> As of jQuery 1.3, functions provided by the browser like <code>alert()</code> and DOM element methods like <code>getAttribute()</code> are not guaranteed to be detected as functions in browsers such as Internet Explorer.</p></div>
  </d:entry>
  <d:entry id="jquery_isnumeric__value___56_0" d:title="jQuery.isNumeric()" d:value="jQueryisNumeric()">
    <d:index d:title="jQuery.isNumeric()" d:value="jQueryisNumeric()"/>
    <d:index d:title="jQuery.isNumeric()" d:value="isNumeric()"/>
    <d:index d:title="jQuery.isNumeric( value )" d:value="jQueryisNumeric( value )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.isNumeric( value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Determines whether its argument is a number.</p><ul class="signatures"><li class="signature" id="jQuery-isNumeric-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.7/">1.7</a></span>jQuery.isNumeric( value )</h4>
<p class="arguement"><strong>value</strong>The value to be tested.</p>
</li></ul>
<p>The <code>$.isNumeric()</code> method checks whether its argument represents a numeric value. If so, it returns <code>true</code>. Otherwise it returns <code>false</code>. The argument can be of any type.</p></div>
  </d:entry>
  <d:entry id="animated_57_0" d:title=":animated Selector" d:value="animated Selector">
    <d:index d:title=":animated Selector" d:value="animated Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">animated</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Select all elements that are in the progress of an animation at the time the selector is run.</p>
      <ul>
        <li>Because <code>:animated</code> is a jQuery extension and not part of the CSS specification, queries using <code>:animated</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:animated</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":animated")</code></a>.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="jquery_isplainobject__object___58_0" d:title="jQuery.isPlainObject()" d:value="jQueryisPlainObject()">
    <d:index d:title="jQuery.isPlainObject()" d:value="jQueryisPlainObject()"/>
    <d:index d:title="jQuery.isPlainObject()" d:value="isPlainObject()"/>
    <d:index d:title="jQuery.isPlainObject( object )" d:value="jQueryisPlainObject( object )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.isPlainObject( object )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Check to see if an object is a plain object (created using "{}" or "new Object").</p><ul class="signatures"><li class="signature" id="jQuery-isPlainObject-object">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>jQuery.isPlainObject( object )</h4>
<p class="arguement"><strong>object</strong>The object that will be checked to see if it's a plain object.</p>
</li></ul>
<p><strong>Note:</strong> Host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform. As a result of this,  <code>$.isPlainObject()</code> may evaluate inconsistently across browsers in certain instances.</p><p>An example of this is a test against <code>document.location</code> using <code>$.isPlainObject()</code> as follows:</p><pre>
console.log($.isPlainObject(document.location));
</pre><p>which throws an invalid pointer exception in IE8. With this in mind, it's important to be aware of any of the gotchas involved in using <code>$.isPlainObject()</code> against older browsers. Some basic example of use-cases that do function correctly cross-browser can be found below.</p></div>
  </d:entry>
  <d:entry id="jquery_iswindow__obj___59_0" d:title="jQuery.isWindow()" d:value="jQueryisWindow()">
    <d:index d:title="jQuery.isWindow()" d:value="jQueryisWindow()"/>
    <d:index d:title="jQuery.isWindow()" d:value="isWindow()"/>
    <d:index d:title="jQuery.isWindow( obj )" d:value="jQueryisWindow( obj )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.isWindow( obj )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#boolean">boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Determine whether the argument is a window.</p><ul class="signatures"><li class="signature" id="jQuery-isWindow-obj">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>jQuery.isWindow( obj )</h4>
<p class="arguement"><strong>obj</strong>Object to test whether or not it is a window.</p>
</li></ul>
<p>This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).</p></div>
  </d:entry>
  <d:entry id="jquery_isxmldoc__node___60_0" d:title="jQuery.isXMLDoc()" d:value="jQueryisXMLDoc()">
    <d:index d:title="jQuery.isXMLDoc()" d:value="jQueryisXMLDoc()"/>
    <d:index d:title="jQuery.isXMLDoc()" d:value="isXMLDoc()"/>
    <d:index d:title="jQuery.isXMLDoc( node )" d:value="jQueryisXMLDoc( node )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.isXMLDoc( node )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Check to see if a DOM node is within an XML document (or is an XML document).</p><ul class="signatures"><li class="signature" id="jQuery-isXMLDoc-node">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1.4/">1.1.4</a></span>jQuery.isXMLDoc( node )</h4>
<p class="arguement"><strong>node</strong>The DOM node that will be checked to see if it's in an XML document.</p>
</li></ul>
</div>
  </d:entry>
  <d:entry id="jquery__selector____context_____61_0" d:title="jQuery()" d:value="jQuery()">
    <d:index d:title="jQuery()" d:value="jQuery()"/>
    <d:index d:title="jQuery( selector [, context] )" d:value="jQuery( selector [, context] )"/>
    <d:index d:title="jQuery( element )" d:value="jQuery( element )"/>
    <d:index d:title="jQuery( object )" d:value="jQuery( object )"/>
    <d:index d:title="jQuery( elementArray )" d:value="jQuery( elementArray )"/>
    <d:index d:title="jQuery( jQuery object )" d:value="jQuery( jQuery object )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery( selector [, context]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Accepts a string containing a CSS selector which is then used to match a set of elements.</p><ul class="signatures">
<li class="signature" id="jQuery-selector-context">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery( selector [, context] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression</p>
<p class="arguement"><strong>context</strong>A DOM Element, Document, or jQuery to use as context</p>
</li>
<li class="signature" id="jQuery-element">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery( element )</h4>
<p class="arguement"><strong>element</strong>A DOM element to wrap in a jQuery object.</p>
</li>
<li class="signature" id="jQuery-object">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery( object )</h4>
<p class="arguement"><strong>object</strong>A plain object to wrap in a jQuery object.</p>
</li>
<li class="signature" id="jQuery-elementArray">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery( elementArray )</h4>
<p class="arguement"><strong>elementArray</strong>An array containing a set of DOM elements to wrap in a jQuery object.</p>
</li>
<li class="signature" id="jQuery-jQuery object">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery( jQuery object )</h4>
<p class="arguement"><strong>jQuery object</strong>An existing jQuery object to clone.</p>
</li>
<li class="signature" id="jQuery"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>jQuery()</h4></li>
</ul>
<p>In the first formulation listed above,  <code>jQuery()</code> — which can also be written as <code>$()</code> — searches through the DOM for any elements that match the provided selector and creates a new jQuery object that references these elements:</p><pre>$('div.foo');</pre><h4 id="selector-context">Selector Context</h4><p>By default, selectors perform their searches within the DOM starting at the document root. However, an alternate context can be given for the search by using the optional second parameter to the  <code>$()</code> function. For example, to do a search within an event handler, the search can be restricted like so:</p><pre>
$('div.foo').click(function() {
  $('span', this).addClass('bar');
});
</pre><p>When the search for the span selector is restricted to the context of <code>this</code>, only spans within the clicked element will get the additional class.</p><p>Internally, selector context is implemented with the <code>.find()</code> method, so  <code>$('span', this)</code> is equivalent to  <code>$(this).find('span')</code>.</p><h4 id="using-dom-elements">Using DOM elements</h4><p>The second and third formulations of this function create a jQuery object using one or more DOM elements that were already selected in some other way. A common use of this facility is to call jQuery methods on an element that has been passed to a callback function through the keyword <code>this</code>:</p><pre>
$('div.foo').click(function() {
  $(this).slideUp();
});
</pre><p>This example causes elements to be hidden with a sliding animation when clicked. Because the handler receives the clicked item in the <code>this</code> keyword as a bare DOM element, the element must be passed to the <code>$()</code> function before applying jQuery methods to it.</p><p>XML data returned from an Ajax call can be passed to the <code>$()</code> function so individual elements of the XML structure can be retrieved using <code>.find()</code> and other DOM traversal methods.</p><pre>
$.post('url.xml', function(data) {
  var $child = $(data).find('child');
})
</pre><h4 id="cloning-jquery-objects">Cloning jQuery Objects</h4><p>When a jQuery object is passed to the <code>$()</code> function, a clone of the object is created. This new jQuery object references the same DOM elements as the initial one.</p><h4 id="returning-empty-set">Returning an Empty Set</h4><p>As of jQuery 1.4, calling the <code>jQuery()</code> method with <em>no arguments</em> returns an empty jQuery set (with a <code><a href="http://api.jquery.com/length/">.length</a></code> property of 0). In previous versions of jQuery, this would return a set containing the document node.</p><h4 id="working-with-plain-objects">Working With Plain Objects</h4><p>At present, the only operations supported on plain JavaScript objects wrapped in jQuery are: <code>.data()</code>,<code>.prop()</code>,<code>.bind()</code>, <code>.unbind()</code>,<code>.trigger()</code> and <code>.triggerHandler()</code>. The use of <code>.data()</code> (or any method requiring <code>.data()</code>) on a plain object will result in a new property on the object called jQuery{randomNumber} (eg. jQuery123456789).</p><pre>
// define a plain object
var foo = {foo:'bar', hello:'world'};

// wrap this with jQuery
var $foo = $(foo);

// test accessing property values
var test1 = $foo.prop('foo'); // bar

// test setting property values
$foo.prop('foo', 'foobar');
var test2 = $foo.prop('foo'); // foobar

// test using .data() as summarized above
$foo.data('keyName', 'someValue');
console.log($foo); // will now contain a jQuery{randomNumber} property

// test binding an event name and triggering
$foo.bind('eventName', function (){
        console.log('eventName was called');
});

$foo.trigger('eventName'); // logs 'eventName was called'
</pre><p>Should <code>.trigger('eventName')</code> be used, it will search for an 'eventName' property on the object and attempt to execute it after any attached jQuery handlers are executed. It does not check whether the property is a function or not. To avoid this behavior, <code>.triggerHandler('eventName')</code> should be used instead.</p><pre>
$foo.triggerHandler('eventName'); // also logs 'eventName was called'
</pre></div>
  </d:entry>
  <d:entry id="jquery__html____ownerdocument_____61_1" d:title="jQuery()" d:value="jQuery()">
    <d:index d:title="jQuery()" d:value="jQuery()"/>
    <d:index d:title="jQuery( html [, ownerDocument] )" d:value="jQuery( html [, ownerDocument] )"/>
    <d:index d:title="jQuery( html, props )" d:value="jQuery( html, props )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery( html [, ownerDocument]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Creates DOM elements on the fly from the provided string of raw HTML.</p><ul class="signatures">
<li class="signature" id="jQuery-html-ownerDocument">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery( html [, ownerDocument] )</h4>
<p class="arguement"><strong>html</strong>A string of HTML to create on the fly. Note that this parses HTML, <strong>not</strong> XML.</p>
<p class="arguement"><strong>ownerDocument</strong>A document in which the new elements will be created</p>
</li>
<li class="signature" id="jQuery-html-props">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>jQuery( html, props )</h4>
<p class="arguement"><strong>html</strong>A string defining a single, standalone, HTML element (e.g. &lt;div/&gt; or &lt;div&gt;&lt;/div&gt;).</p>
<p class="arguement"><strong>props</strong>An map of attributes, events, and methods to call on the newly-created element.</p>
</li>
</ul>
<h4 id="creating-new-elements">Creating New Elements</h4><p>If a string is passed as the parameter to <code>$()</code>, jQuery examines the string to see if it looks like HTML (i.e., it has <code>&lt;tag ... &gt;</code> somewhere within the string). If not, the string is interpreted as a selector expression, as explained above. But if the string appears to be an HTML snippet, jQuery attempts to create new DOM elements as described by the HTML. Then a jQuery object is created and returned that refers to these elements. You can perform any of the usual jQuery methods on this object:</p><pre>$('&lt;p id="test"&gt;My &lt;em&gt;new&lt;/em&gt; text&lt;/p&gt;').appendTo('body');</pre><p>If the HTML is more complex than a single tag without attributes, as it is in the above example, the actual creation of the elements is handled by the browser's <code>innerHTML</code> mechanism. In most cases, jQuery creates a new &lt;div&gt; element and sets the innerHTML property of the element to the HTML snippet that was passed in. When the parameter has a single tag, such as  <code>$('&lt;img /&gt;')</code> or  <code>$('&lt;a&gt;&lt;/a&gt;')</code>, jQuery creates the element using the native JavaScript <code>createElement()</code> function.</p><p>When passing in complex HTML, some browsers may not generate a DOM that exactly replicates the HTML source provided. As mentioned, we use the browser's <code>.innerHTML</code> property to parse the passed HTML and insert it into the current document. During this process, some  browsers filter out certain elements such as  <code>&lt;html&gt;</code>,  <code>&lt;title&gt;</code>, or  <code>&lt;head&gt;</code> elements. As a result, the  elements inserted may not be representative of the original string  passed.</p><p> Filtering isn't however just limited to these tags. For example, Internet Explorer prior to version 8 will also convert all <code>href</code> properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate <a href="http://code.google.com/p/html5shiv/">compatibility layer</a>.</p><p>To ensure cross-platform compatibility, the snippet must be well-formed. Tags that can contain other elements should be paired with a closing tag:</p><pre>$('&lt;a href="http://jquery.com"&gt;&lt;/a&gt;');</pre><p>Alternatively, jQuery allows XML-like tag syntax (with or without a space before the slash):</p><pre>$('&lt;a/&gt;');</pre><p>Tags that cannot contain elements may be quick-closed or not:</p><pre>$('&lt;img /&gt;');
$('&lt;input&gt;');
</pre><p>When passing HTML to <code>jQuery()</code>, please also note that text nodes are not treated as DOM elements. With the exception of a few methods (such as <code>.content()</code>), they are generally otherwise ignored or removed. E.g:</p><pre>
var el = $('1&lt;br/&gt;2&lt;br/&gt;3'); // returns [&lt;br&gt;, "2", &lt;br&gt;] 
el  = $('1&lt;br/&gt;2&lt;br/&gt;3 &gt;'); // returns [&lt;br&gt;, "2", &lt;br&gt;, "3 &amp;gt;"]
</pre><p>This behaviour is expected. </p><p>As of jQuery 1.4, the second argument to <code>jQuery()</code> can accept a map consisting of a superset of the properties that can be passed to the <a href="/attr">.attr()</a> method. Furthermore, any <a href="/category/events/">event type</a> can be passed in, and the following jQuery methods can be called: <a href="/val">val</a>, <a href="/css">css</a>, <a href="/html">html</a>, <a href="/text">text</a>, <a href="/data">data</a>, <a href="/width">width</a>, <a href="/height">height</a>, or <a href="/offset">offset</a>. The name <code>"class"</code> must be quoted in the map since it is a JavaScript reserved word, and <code>"className"</code> cannot be used since it is not the correct attribute name. </p><p><strong>Note:</strong> Internet Explorer will not allow you to create an <code>input</code> or <code>button</code> element and change its type; you must specify the type using <code>'&lt;input type="checkbox" /&gt;'</code> for example. A demonstration of this can be seen below:</p><p>Unsupported in IE:</p><pre>
$('&lt;input /&gt;', {
    type: 'text',
    name: 'test'
}).appendTo("body");
</pre><p>Supported workaround:</p><pre>
$('&lt;input type="text" /&gt;').attr({
    name: 'test'
}).appendTo("body");
</pre></div>
  </d:entry>
  <d:entry id="jquery__callback___61_2" d:title="jQuery()" d:value="jQuery()">
    <d:index d:title="jQuery()" d:value="jQuery()"/>
    <d:index d:title="jQuery( callback )" d:value="jQuery( callback )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery( callback )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Binds a function to be executed when the DOM has finished loading.</p><ul class="signatures"><li class="signature" id="jQuery-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery( callback )</h4>
<p class="arguement"><strong>callback</strong>The function to execute when the DOM is ready.</p>
</li></ul>
<p>This function behaves just like <code>$(document).ready()</code>, in that it should be used to wrap other <code>$()</code> operations on your page that depend on the DOM being ready. While this function is, technically, chainable, there really isn't much use for chaining against it.</p></div>
  </d:entry>
  <d:entry id="jquery_62_0" d:title=".jquery" d:value="jquery">
    <d:index d:title=".jquery" d:value="jquery"/>
    <d:index d:title="jquery" d:value="jquery"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jquery</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>A string containing the jQuery version number.</p><ul class="signatures"><li class="signature" id="jquery"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jquery</h4></li></ul>
<p>The <code>.jquery</code> property is assigned to the jQuery prototype, commonly referred to by its alias <code>$.fn</code>. It is a string containing the version number of <code>jQuery</code>, such as "1.5.0" or "1.4.4".</p></div>
  </d:entry>
  <d:entry id="_keydown__handler_eventobject____63_0" d:title=".keydown()" d:value="keydown()">
    <d:index d:title=".keydown()" d:value="keydown()"/>
    <d:index d:title=".keydown( handler(eventObject) )" d:value="keydown( handler(eventObject) )"/>
    <d:index d:title=".keydown(  [eventData], handler(eventObject) )" d:value="keydown(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.keydown( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "keydown" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="keydown-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.keydown( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="keydown-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.keydown(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="keydown"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.keydown()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('keydown', handler)</code> in the first and second variations, and <code>.trigger('keydown')</code> in the third.</p><p>The <code>keydown</code> event is sent to an element when the user first presses a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</p><p>For example, consider the HTML:</p><pre>&lt;form&gt;
  &lt;input id="target" type="text" value="Hello there" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre><p>The event handler can be bound to the input field:</p><pre>$('#target').keydown(function() {
  alert('Handler for .keydown() called.');
});</pre><p>Now when the insertion point is inside the field, pressing a key displays the alert:</p><p><span class="output">Handler for .keydown() called.</span></p><p>To trigger the event manually, apply <code>.keydown()</code> without an argument:</p><pre>$('#other').click(function() {
  $('#target').keydown();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p><p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.</p><p>To determine which key was pressed, examine the <a href="http://api.jquery.com/category/events/event-object/">event object</a> that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the <code>.which</code> property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, <code>.keypress()</code> may be a better choice.</p></div>
  </d:entry>
  <d:entry id="_keypress__handler_eventobject____64_0" d:title=".keypress()" d:value="keypress()">
    <d:index d:title=".keypress()" d:value="keypress()"/>
    <d:index d:title=".keypress( handler(eventObject) )" d:value="keypress( handler(eventObject) )"/>
    <d:index d:title=".keypress(  [eventData], handler(eventObject) )" d:value="keypress(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.keypress( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "keypress" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="keypress-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.keypress( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="keypress-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.keypress(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="keypress"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.keypress()</h4></li>
</ul>
<p><strong>Note:</strong> as the <code>keypress</code> event isn't covered by any official specification, the actual behavior encountered when using it may differ across browsers, browser versions, and platforms.</p><p>This method is a shortcut for <code>.bind("keypress", handler)</code> in the first two variations, and <code>.trigger("keypress")</code> in the third.</p><p>The <code>keypress</code> event is sent to an element when the browser registers keyboard input. This is similar to the <code>keydown</code> event, except in the case of key repeats. If the user presses and holds a key, a <code>keydown </code>event is triggered once, but separate <code>keypress</code> events are triggered for each inserted character. In addition, modifier keys (such as Shift) trigger <code>keydown</code> events but not <code>keypress</code> events.</p><p>A <code>keypress</code> event handler can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</p><p>For example, consider the HTML:</p><pre>&lt;form&gt;
  &lt;fieldset&gt;
    &lt;input id="target" type="text" value="Hello there" /&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre><p>The event handler can be bound to the input field:</p><pre>$("#target").keypress(function() {
  alert("Handler for .keypress() called.");
});</pre><p>Now when the insertion point is inside the field, pressing a key displays the alert:</p><p><span class="output">Handler for .keypress() called.</span></p><p>The message repeats if the key is held down. To trigger the event manually, apply <code>.keypress()</code> without an argument::</p><pre>$('#other').click(function() {
  $("#target").keypress();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p><p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.</p><p>To determine which character was entered, examine the <code>event</code> object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the <code>.which</code> property so you can reliably use it to retrieve the character code.</p><p>Note that <code>keydown</code> and <code>keyup</code> provide a code indicating which key is pressed, while <code>keypress</code> indicates which character was entered. For example, a lowercase "a" will be reported as 65 by <code>keydown</code> and <code>keyup</code>, but as 97 by <code>keypress</code>. An uppercase "A" is reported as 65 by all events. Because of this distinction, when catching special keystrokes such as arrow keys, <code>.keydown()</code> or <code>.keyup()</code> is a better choice.</p></div>
  </d:entry>
  <d:entry id="_keyup__handler_eventobject____65_0" d:title=".keyup()" d:value="keyup()">
    <d:index d:title=".keyup()" d:value="keyup()"/>
    <d:index d:title=".keyup( handler(eventObject) )" d:value="keyup( handler(eventObject) )"/>
    <d:index d:title=".keyup(  [eventData], handler(eventObject) )" d:value="keyup(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.keyup( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "keyup" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="keyup-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.keyup( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="keyup-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.keyup(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="keyup"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.keyup()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('keyup', handler)</code> in the first two variations, and <code>.trigger('keyup')</code> in the third.</p><p>The <code>keyup</code> event is sent to an element when the user releases a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</p><p>For example, consider the HTML:</p><pre>&lt;form&gt;
  &lt;input id="target" type="text" value="Hello there" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre><p>The event handler can be bound to the input field:</p><pre>$('#target').keyup(function() {
  alert('Handler for .keyup() called.');
});
</pre><p>Now when the insertion point is inside the field and a key is pressed and released, the alert is displayed:</p><p><span class="output">Handler for .keyup() called.</span></p><p>To trigger the event manually, apply <code>.keyup()</code> without arguments:</p><pre>$('#other').click(function() {
  $('#target').keyup();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p><p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.</p><p>To determine which key was pressed, examine the event object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the <code>.which</code> property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, <code>.keypress()</code> may be a better choice.</p></div>
  </d:entry>
  <d:entry id="_last___66_0" d:title=".last()" d:value="last()">
    <d:index d:title=".last()" d:value="last()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.last()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Reduce the set of matched elements to the final one in the set.</p><ul class="signatures"><li class="signature" id="last"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.last()</h4></li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.last()</code> method constructs a new jQuery object from the last matching element.</p><p>Consider a page with a simple list on it:</p><pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>We can apply this method to the set of list items:</p><pre>$('li').last().css('background-color', 'red');</pre><p>The result of this call is a red background for the final item.</p></div>
  </d:entry>
  <d:entry id="last_child_67_0" d:title=":last-child Selector" d:value="last-child Selector">
    <d:index d:title=":last-child Selector" d:value="last-child Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">last-child</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements that are the last child of their parent.</p>
      <p>While <a href="/last-selector">:last</a> matches only a single element, <code>:last-child</code> can match more than one: one for each parent.</p>
    </div>
  </d:entry>
  <d:entry id="_append__content____content_____68_0" d:title=".append()" d:value="append()">
    <d:index d:title=".append()" d:value="append()"/>
    <d:index d:title=".append( content [, content] )" d:value="append( content [, content] )"/>
    <d:index d:title=".append( function(index, html) )" d:value="append( function(index, html) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.append( content [, content]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Insert content, specified by the parameter, to the end of each element in the set of matched elements.</p><ul class="signatures">
<li class="signature" id="append-content-content">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.append( content [, content] )</h4>
<p class="arguement"><strong>content</strong>DOM element, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.</p>
<p class="arguement"><strong>content</strong>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.</p>
</li>
<li class="signature" id="append-functionindex- html">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.append( function(index, html) )</h4>
<p class="arguement"><strong>function(index, html)</strong>A function that returns an HTML string, DOM element(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, <code>this</code> refers to the current element in the set.
</p>
</li>
</ul>
<p>The <code>.append()</code> method inserts the  specified content as the last child of each element in the jQuery collection (To insert it as the <em>first</em> child, use <a href="http://api.jquery.com/prepend/"><code>.prepend()</code></a>). </p><p>The <code>.append()</code> and <code><a href="/appendTo">.appendTo()</a></code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .append()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.appendTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p><p>Consider the following HTML:</p><pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;
</pre><p>You can create content and insert it into several elements at once:</p><pre>$('.inner').append('&lt;p&gt;Test&lt;/p&gt;');
</pre><p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p><pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    Hello
    &lt;p&gt;Test&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    Goodbye
    &lt;p&gt;Test&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</pre><p>You can also select an element on the page and insert it into another:</p><pre>$('.container').append($('h2'));
</pre><p>If an element selected this way is inserted elsewhere, it will be moved into the target (not cloned):</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
&lt;/div&gt;
</pre><p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p><h4 id="additional-arguments">Additional Arguments</h4><p>Similar to other content-adding methods such as <code><a href="http://api.jquery.com/prepend/">.prepend()</a></code> and <code><a href="http://api.jquery.com/before/">.before()</a></code>, <code>.append()</code> also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</p><p>For example, the following will insert two new <code>&lt;div&gt;</code>s and an existing <code>&lt;div&gt;</code> as the last three child nodes of the body:</p><pre>var $newdiv1 = $('&lt;div id="object1"/&gt;'),
    newdiv2 = document.createElement('div'),
    existingdiv1 = document.getElementById('foo');

$('body').append($newdiv1, [newdiv2, existingdiv1]);
</pre><p>Since <code>.append()</code> can accept any number of additional arguments, the same result can be achieved by passing in the three <code>&lt;div&gt;</code>s as three separate arguments, like so: <code>$('body').append($newdiv1, newdiv2, existingdiv1)</code>. The type and number of arguments will largely depend on how you collect the elements in your code.</p></div>
  </d:entry>
  <d:entry id="last_69_0" d:title=":last Selector" d:value="last Selector">
    <d:index d:title=":last Selector" d:value="last Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">last</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects the last matched element.</p>
      <p>Note that <code>:last</code> selects a single element by filtering  the current jQuery collection and matching the last element within it.</p>
      <ul>
        <li>Because <code>:last</code> is a jQuery extension and not part of the CSS specification, queries using <code>:last</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:last</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":last")</code></a>.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="length_70_0" d:title=".length" d:value="length">
    <d:index d:title=".length" d:value="length"/>
    <d:index d:title="length" d:value="length"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">length</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Number">Number</a></span>
</h2><p class="desc"><strong>Description: </strong>The number of elements in the jQuery object.</p><ul class="signatures"><li class="signature" id="length"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>length</h4></li></ul>
<p>The number of elements currently matched. The .<a href="/size">size()</a> method will return the same value.</p></div>
  </d:entry>
  <d:entry id="_live__eventtype__handler___71_0" d:title=".live()" d:value="live()">
    <d:index d:title=".live()" d:value="live()"/>
    <d:index d:title=".live( eventType, handler )" d:value="live( eventType, handler )"/>
    <d:index d:title=".live( eventType, eventData, handler )" d:value="live( eventType, eventData, handler )"/>
    <d:index d:title=".live( events )" d:value="live( events )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.live( eventType, handler )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Attach a handler to the event for all elements which match the current selector, now and in the future.</p><ul class="signatures">
<li class="signature" id="live-eventType-handler">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>.live( eventType, handler )</h4>
<p class="arguement"><strong>eventType</strong>A string containing a JavaScript event type, such as "click" or "keydown." As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names, as well.</p>
<p class="arguement"><strong>handler</strong>A function to execute at the time the event is triggered.</p>
</li>
<li class="signature" id="live-eventType-eventData-handler">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.live( eventType, eventData, handler )</h4>
<p class="arguement"><strong>eventType</strong>A string containing a JavaScript event type, such as "click" or "keydown." As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names, as well.</p>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler</strong>A function to execute at the time the event is triggered.</p>
</li>
<li class="signature" id="live-events">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.live( events )</h4>
<p class="arguement"><strong>events</strong>A map of one or more JavaScript event types and functions to execute for them.</p>
</li>
</ul>
<p>This method is a variation on the basic <code>.bind()</code> method for attaching event handlers to elements. When <code>.bind()</code> is called, the elements that the jQuery object refers to get the handler attached; elements that get introduced later do not, so they would require another <code>.bind()</code> call. For instance, consider the HTML:</p><pre>&lt;body&gt;
  &lt;div class="clickme"&gt;
    Click here
  &lt;/div&gt;
&lt;/body&gt;
</pre><p>To bind a simple click handler to this element:</p><pre>$('.clickme').bind('click', function() {
  // Bound handler called.
});
</pre><p>When the element is clicked, the handler is called. However, suppose that after this, another element is added:
  </p><pre>$('body').append('&lt;div class="clickme"&gt;Another target&lt;/div&gt;');</pre><p>This new element also matches the selector <code>.clickme</code>, but since it was added after the call to <code>.bind()</code>, clicks on it will do nothing.</p><p>The <code>.live()</code> method provides an alternative to this behavior. To bind a click handler to the target element using this method:</p><pre>$('.clickme').live('click', function() {
  // Live handler called.
});</pre><p>And then later add a new element:</p><pre>$('body').append('&lt;div class="clickme"&gt;Another target&lt;/div&gt;');</pre><p>Then clicks on the new element will also trigger the handler.</p><p>To <em>unbind</em> the click handlers from all <code>&lt;div class="clickme"&gt;</code> that were bound using <code>.live()</code>, use the <code><a href="http://api.jquery.com/die/">.die()</a></code> method:</p><pre>$(".clickme").die("click");</pre><h4 id="event-delegation">Event Delegation</h4><p>The <code>.live()</code> method is able to affect elements that have not yet been added to the DOM through the use of event delegation: a handler bound to an ancestor element is responsible for events that are triggered on its descendants. The handler passed to <code>.live()</code> is never bound to an element; instead, <code>.live()</code> binds a special handler to the root of the DOM tree. In the example above, when the new element is clicked, the following steps occur:</p><ol><li>A click event is generated and passed to the <code>&lt;div&gt;</code> for handling.</li>
    <li>No handler is directly bound to the <code>&lt;div&gt;</code>, so the event bubbles up the DOM tree.</li>
    <li>The event bubbles up until it reaches the root of the tree, which is where <code>.live()</code> binds its special handlers by default. <br/><em>* As of jQuery 1.4, event bubbling can optionally stop at a DOM element "context".</em>
</li>
    <li>The special <code>click</code> handler bound by <code>.live()</code> executes.</li>
    <li>This handler tests the <code>target</code> of the event object to see whether it should continue. This test is performed by checking if <code>$(event.target).closest(".clickme")</code> is able to locate a matching element.</li>
    <li>If a matching element is found, the original handler is called on it.</li>
  </ol><p>Because the test in step 5 is not performed until the event occurs, elements can be added at any time and still respond to events.</p><p>See the discussion for <code><a href="/bind">.bind()</a></code> for more information on event binding.</p><h4 id="multiple-events">Multiple Events</h4><p>As of jQuery 1.4.1 <code>.live()</code> can accept multiple, space-separated events, similar to the functionality provided in <a href="/bind">.bind()</a>. For example, you can "live bind" the <code>mouseover</code> and <code>mouseout</code> events at the same time like so: </p><pre>$(".hoverme").live("mouseover mouseout", function(event) {
  if ( event.type == "mouseover" ) {
    // do something on mouseover
  } else {
    // do something on mouseout
  }
});</pre><p>As of jQuery 1.4.3, you can bind multiple live event handlers simultaneously by passing a map of event type/handler pairs:</p><pre>$("a").live({
  click: function() {
    // do something on click
  },
  mouseover: function() {
    // do something on mouseover
  }
});</pre><h4 id="event-data">Event Data</h4><p>As of jQuery 1.4, the optional <code>eventData</code> parameter is available for passing additional information to the handler. One handy use of this parameter is to work around issues caused by closures. See the <code>.bind()</code> method's "<a href="/bind/#passing-event-data">Passing Event Data</a>" discussion for more information.</p><h4 id="event-context">Event Context</h4><p>As of jQuery 1.4, live events can be bound to a DOM element "context" rather than to the default document root. To set this context, use the <a href="http://api.jquery.com/jquery/#selector-context"><code>jQuery()</code> function's second argument</a>, passing in a single DOM element (as opposed to a jQuery collection or a selector).</p><pre>$("div.clickme", $("#container")[0]).live("click", function() {
  // Live handler called.
});</pre><p>The live handler in this example is called only when <code>&lt;div class="clickme"&gt;</code> is a descendant of an element with an ID of "container."</p><h4 id="caveats">Caveats</h4><p>The <code>.live()</code> technique is useful, but due to its special approach cannot be simply substituted for <code>.bind()</code> in all cases. Specific differences include:</p><ul><li>DOM traversal methods are not supported for finding elements to send to <code>.live()</code>. Rather, the <code>.live()</code> method should always be called directly after a selector, as in the example above.</li>
    <li>To stop further handlers from executing after one bound using <code>.live()</code>, the handler must return <code>false</code>. Calling <code>.stopPropagation()</code> will not accomplish this.</li>
    <li>The <code>paste</code> and <code>reset</code> events, in addition to <code>change</code> when used with inputs of type "file," are not fully supported by the <code>.live()</code> method, due to issues with simulating event bubbling in Internet Explorer. In these cases, the <code>.bind()</code> method can be used instead.</li>
    <li>In <b>jQuery 1.3.x</b> only the following JavaScript events (in addition to custom events) could be bound with <code>.live()</code>: <code>click</code>, <code>dblclick</code>, <code>keydown</code>, <code>keypress</code>, <code>keyup</code>, <code>mousedown</code>, <code>mousemove</code>, <code>mouseout</code>, <code>mouseover</code>, and <code>mouseup</code>.</li>
  </ul><blockquote>
    <ul><li>As of <b>jQuery 1.4</b> the <code>.live()</code> method supports custom events as well as all <em>JavaScript events that bubble</em>.</li>
      <li>As of <b>jQuery 1.4.1</b> even <code>focus</code> and <code>blur</code> work with live (mapping to the more appropriate, bubbling, events <code>focusin</code> and <code>focusout</code>).</li>
      <li>As of <b>jQuery 1.4.1</b> the <code>hover</code> event can be specified (mapping to <code>mouseenter</code> and  <code>mouseleave</code>, which, in turn, are mapped to <code>mouseover</code> and <code>mouseout</code>).</li>
    </ul></blockquote></div>
  </d:entry>
  <d:entry id="_load__url____data______complete_responsetext__textstatus__xmlhttprequest______72_0" d:title=".load()" d:value="load()">
    <d:index d:title=".load()" d:value="load()"/>
    <d:index d:title=".load( url [, data] [, complete(responseText, textStatus, XMLHttpRequest)] )" d:value="load( url [, data] [, complete(responseText, textStatus, XMLHttpRequest)] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.load( url [, data]  [, complete(responseText, textStatus, XMLHttpRequest)]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Load data from the server and place the returned HTML into the matched element.</p><ul class="signatures"><li class="signature" id="load-url-data-completeresponseText- textStatus- XMLHttpRequest">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.load( url [, data] [, complete(responseText, textStatus, XMLHttpRequest)] )</h4>
<p class="arguement"><strong>url</strong>A string containing the URL to which the request is sent.</p>
<p class="arguement"><strong>data</strong>A map or string that is sent to the server with the request.</p>
<p class="arguement"><strong>complete(responseText, textStatus, XMLHttpRequest)</strong>A callback function that is executed when the request completes.</p>
</li></ul>
<p>This method is the simplest way to fetch data from the server. It is roughly equivalent to <code>$.get(url, data, success)</code> except that it is a method rather than global function and it has an implicit callback function.  When a successful response is detected (i.e. when <code>textStatus</code> is "success" or "notmodified"), <code>.load()</code> sets the HTML contents of the matched element to the returned data. This means that most uses of the method can be quite simple:</p><pre>$('#result').load('ajax/test.html');</pre><p>The provided callback, if any, is executed after this post-processing has been performed:</p><pre>$('#result').load('ajax/test.html', function() {
  alert('Load was performed.');
});</pre><p>In the two examples above, if the current document does not contain an element with an ID of "result," the <code>.load()</code> method is not executed.</p><p>The POST method is used if data is provided as an object; otherwise, GET is assumed.</p><blockquote><p>Note: The event handling suite also has a method named <code><a href="/load-event">.load()</a></code>. Which one is fired depends on the set of arguments passed.</p></blockquote><h4>Loading Page Fragments</h4><p>The <code>.load()</code> method, unlike <code><a href="/jQuery.get">$.get()</a></code>, allows us to specify a portion of the remote document to be inserted. This is achieved with a special syntax for the <code>url</code> parameter. If one or more space characters are included in the string, the portion of the string following the first space is assumed to be a jQuery selector that determines the content to be loaded.   </p><p>We could modify the example above to use only part of the document that is fetched:</p><pre>$('#result').load('ajax/test.html #container');</pre><p>When this method executes, it retrieves the content of <code>ajax/test.html</code>, but then jQuery parses the returned document to find the element with an ID of <code>container</code>. This element, along with its contents, is inserted into the element with an ID of <code>result</code>, and the rest of the retrieved document is discarded.</p><p>jQuery uses the browser's <code>.innerHTML</code> property to parse the retrieved document and insert it into the current document. During this process, browsers often filter elements from the document such as <code>&lt;html&gt;</code>, <code>&lt;title&gt;</code>, or <code>&lt;head&gt;</code> elements. As a result, the elements retrieved by <code>.load()</code> may not be exactly the same as if the document were retrieved directly by the browser.</p><blockquote><p><strong>Note:</strong> When calling <code>.load()</code> using a URL without a suffixed selector expression, the content is passed to <code>.html()</code> prior to scripts being removed. This executes the script blocks before they are discarded. If <code>.load()</code> is however called with a selector expression appended to the URL, the scripts are stripped out prior to the DOM being updated, which is why they are never executed. An example of both cases can be seen below:
</p></blockquote><p>Here, any JavaScript loaded into <code>#a</code> as a part of the document will successfully execute.</p><pre>
$('#a').load('article.html');
</pre><p>However in this case, script blocks in the document being loaded into <code>#b</code> are stripped out prior to being executed:</p><pre>
$('#b').load('article.html #target');
</pre><ul><li>Due to browser security restrictions, most "Ajax" requests are subject to the <a title="Same Origin Policy on Wikipedia" href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a>; the request can not successfully retrieve data from a different domain, subdomain, or protocol.</li></ul></div>
  </d:entry>
  <d:entry id="_load__handler_eventobject____73_0" d:title=".load()" d:value="load()">
    <d:index d:title=".load()" d:value="load()"/>
    <d:index d:title=".load( handler(eventObject) )" d:value="load( handler(eventObject) )"/>
    <d:index d:title=".load(  [eventData], handler(eventObject) )" d:value="load(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.load( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "load" JavaScript event.</p><ul class="signatures">
<li class="signature" id="load-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.load( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute when the event is triggered.</p>
</li>
<li class="signature" id="load-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.load(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
</ul>
<p>This method is a shortcut for <code>.bind('load', handler)</code>.</p><p>The <code>load</code> event is sent to an element when it and all sub-elements have been completely loaded. This event can be sent to any element associated with a URL: images, scripts, frames, iframes, and the <code>window</code> object.</p><p>For example, consider a page with a simple image:</p><pre>&lt;img src="book.png" alt="Book" id="book" /&gt;</pre><p>The event handler can be bound to the image:</p><pre>$('#book').load(function() {
  // Handler for .load() called.
});</pre><p>As soon as the image has been loaded, the handler is called.</p><p>In general, it is not necessary to wait for all images to be fully loaded. If code can be executed earlier, it is usually best to place it in a handler sent to the <code>.ready()</code> method.
</p><blockquote><p>The Ajax module also has a method named <code><a href="/load">.load()</a></code>. Which one is fired depends on the set of arguments passed.</p></blockquote><blockquote>
<p>
<b>Caveats of the <code>load</code> event when used with images</b>
</p>
<p>A common challenge developers attempt to solve using the <code>.load()</code> shortcut is to execute a function when an image (or collection of images) have completely loaded. There are several known caveats with this that should be noted. These are:</p>
<ul>
<li>It doesn't work consistently nor reliably cross-browser</li>
<li>It doesn't fire correctly in WebKit if the image src is set to the same src as before</li>
<li>It doesn't correctly bubble up the DOM tree</li>
<li>Can cease to fire for images that already live in the browser's cache</li>
</ul>
</blockquote><blockquote><p><strong>Note:</strong> The <code>.live()</code> and <code>.delegate()</code> methods cannot be used to detect the <code>load</code> event of an iframe. The load event does not correctly bubble up the parent document and the event.target isn't set by Firefox, IE9 or Chrome, which is required to do event delegation.</p></blockquote></div>
  </d:entry>
  <d:entry id="lt_74_0" d:title=":lt() Selector" d:value="lt() Selector">
    <d:index d:title=":lt() Selector" d:value="lt() Selector"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">lt</span>  selector</h2><p class="desc"><strong>Description: </strong>Select all elements at an index less than index within the matched set.</p><ul class="signatures"><li><dl class="arguments">
<dt>index</dt>
<dd>Zero-based index.</dd>
</dl></li></ul>
<p><strong>index-related selectors</strong></p><p>The index-related selectors (including this "less than" selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (<code>.myclass</code>) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</p><p>Note that since JavaScript arrays use <em>0-based indexing</em>, these selectors reflect that fact. This is why <code>$('.myclass:lt(1)')</code> selects the first element in the document with the class <code>myclass</code>, rather than selecting no elements. In contrast, <code>:nth-child(n)</code> uses <em>1-based indexing</em> to conform to the CSS specification.</p><ul><li>Because <code>:lt()</code> is a jQuery extension and not part of the CSS specification, queries using <code>:lt()</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>$("your-pure-css-selector").slice(0, index)</code> instead.</li></ul></div>
  </d:entry>
  <d:entry id="jquery_makearray__obj___75_0" d:title="jQuery.makeArray()" d:value="jQuerymakeArray()">
    <d:index d:title="jQuery.makeArray()" d:value="jQuerymakeArray()"/>
    <d:index d:title="jQuery.makeArray()" d:value="makeArray()"/>
    <d:index d:title="jQuery.makeArray( obj )" d:value="jQuerymakeArray( obj )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.makeArray( obj )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Array">Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Convert an array-like object into a true JavaScript array.</p><ul class="signatures"><li class="signature" id="jQuery-makeArray-obj">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>jQuery.makeArray( obj )</h4>
<p class="arguement"><strong>obj</strong>Any object to turn into a native Array.</p>
</li></ul>
<p>Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function <code>$()</code> returns a jQuery object that has many of the properties of an array (a length, the <code>[]</code> array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as <code>.pop()</code> and <code>.reverse()</code>).</p><p>Note that after the conversion, any special features the object had (such as the jQuery methods in our example) will no longer be present. The object is now a plain array.</p></div>
  </d:entry>
  <d:entry id="_map__callback_index__domelement____76_0" d:title=".map()" d:value="map()">
    <d:index d:title=".map()" d:value="map()"/>
    <d:index d:title=".map( callback(index, domElement) )" d:value="map( callback(index, domElement) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.map( callback(index, domElement) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.</p><ul class="signatures"><li class="signature" id="map-callbackindex- domElement">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.map( callback(index, domElement) )</h4>
<p class="arguement"><strong>callback(index, domElement)</strong>A function object that will be invoked for each element in the current set.</p>
</li></ul>
<p>As the return value is a jQuery-wrapped array, it's very common to <code>get()</code> the returned object to work with a basic array.</p><p>The <code>.map()</code> method is particularly useful for getting or setting the value of a collection of elements. Consider a form with a set of checkboxes in it:</p><pre>
&lt;form method="post" action=""&gt;
  &lt;fieldset&gt;
    &lt;div&gt;
      &lt;label for="two"&gt;2&lt;/label&gt;
      &lt;input type="checkbox" value="2" id="two" name="number[]"&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;label for="four"&gt;4&lt;/label&gt;
      &lt;input type="checkbox" value="4" id="four" name="number[]"&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;label for="six"&gt;6&lt;/label&gt;
      &lt;input type="checkbox" value="6" id="six" name="number[]"&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;label for="eight"&gt;8&lt;/label&gt;
      &lt;input type="checkbox" value="8" id="eight" name="number[]"&gt;
    &lt;/div&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;
</pre><p>We can get a comma-separated list of checkbox <code>ID</code>s:</p><pre>$(':checkbox').map(function() {
  return this.id;
}).get().join(',');</pre><p>The result of this call is the string, <code>"two,four,six,eight"</code>.</p><p>Within the callback function, <code>this</code> refers to the current DOM element for each iteration. The function can return an individual data item or an array of data items to be inserted into the resulting set. If an array is returned, the elements inside the array are inserted into the set. If the function returns <code>null</code> or <code>undefined</code>, no element will be inserted.</p></div>
  </d:entry>
  <d:entry id="jquery_map__array__callback_elementofarray__indexinarray____77_0" d:title="jQuery.map()" d:value="jQuerymap()">
    <d:index d:title="jQuery.map()" d:value="jQuerymap()"/>
    <d:index d:title="jQuery.map()" d:value="map()"/>
    <d:index d:title="jQuery.map( array, callback(elementOfArray, indexInArray) )" d:value="jQuerymap( array, callback(elementOfArray, indexInArray) )"/>
    <d:index d:title="jQuery.map( arrayOrObject, callback( value, indexOrKey ) )" d:value="jQuerymap( arrayOrObject, callback( value, indexOrKey ) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.map( array, callback(elementOfArray, indexInArray) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Array">Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Translate all items in an array or object to new array of items.</p><ul class="signatures">
<li class="signature" id="jQuery-map-array-callbackelementOfArray- indexInArray">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.map( array, callback(elementOfArray, indexInArray) )</h4>
<p class="arguement"><strong>array</strong>The Array to translate.</p>
<p class="arguement"><strong>callback(elementOfArray, indexInArray)</strong>The function to process each item against.  The first argument to the function is the array item, the second argument is the index in array The function can return any value. Within the function, <code>this</code> refers to the global (window) object.</p>
</li>
<li class="signature" id="jQuery-map-arrayOrObject-callback value- indexOrKey ">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>jQuery.map( arrayOrObject, callback( value, indexOrKey ) )</h4>
<p class="arguement"><strong>arrayOrObject</strong>The Array or Object to translate.</p>
<p class="arguement"><strong>callback( value, indexOrKey )</strong>The function to process each item against.  The first argument to the function is the value; the second argument is the index or key of the array or object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, <code>this</code> refers to the global (window) object. </p>
</li>
</ul>
<p>The <code>$.map()</code> method applies a function to each item in an array or object and maps the results into a new array. <strong>Prior to jQuery 1.6</strong>, <code>$.map()</code> supports traversing <em>arrays only</em>. <strong>As of jQuery 1.6</strong> it also traverses objects.</p><p>Array-like objects — those with a <code>.length</code> property <em>and</em> a value on the <code>.length - 1</code> index — must be converted to actual arrays before being passed to <code>$.map()</code>. The jQuery library provides <a href="http://api.jquery.com/jQuery.makeArray/">$.makeArray()</a> for such conversions.</p><pre class="prettyprint">
// The following object masquerades as an array.
var fakeArray = {"length": 1, 0: "Addy", 1: "Subtracty"};

// Therefore, convert it to a real array
var realArray = $.makeArray( fakeArray )

// Now it can be used reliably with $.map()
$.map( realArray, function(val, i) {
  // do something 
});
</pre><p>The translation function that is provided to this method is called for each top-level element in the array or object and is passed two arguments: The element's value and its index or key within the array or object.</p><p>The function can return:</p><ul>
<li>the translated value, which will be mapped to the resulting array</li>
      <li>
<code>null</code>, to remove the item</li>
      <li>an array of values, which will be flattened into the full array</li>
    </ul></div>
  </d:entry>
  <d:entry id="jquery_merge__first__second___78_0" d:title="jQuery.merge()" d:value="jQuerymerge()">
    <d:index d:title="jQuery.merge()" d:value="jQuerymerge()"/>
    <d:index d:title="jQuery.merge()" d:value="merge()"/>
    <d:index d:title="jQuery.merge( first, second )" d:value="jQuerymerge( first, second )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.merge( first, second )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Array">Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Merge the contents of two arrays together into the first array. </p><ul class="signatures"><li class="signature" id="jQuery-merge-first-second">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.merge( first, second )</h4>
<p class="arguement"><strong>first</strong>The first array to merge, the elements of second added.</p>
<p class="arguement"><strong>second</strong>The second array to merge into the first, unaltered.</p>
</li></ul>
<p>The <code>$.merge()</code> operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The <code>$.merge()</code> function is destructive. It alters the first parameter to add the items from the second.  </p><p>If you need the original first array, make a copy of it before calling <code>$.merge()</code>. Fortunately, <code>$.merge()</code> itself can be used for this duplication:</p><pre>var newArray = $.merge([], oldArray);</pre><p>This shortcut creates a new, empty array and merges the contents of oldArray into it, effectively cloning the array.</p><p>Prior to jQuery 1.4, the arguments should be true Javascript Array objects; use <code>$.makeArray</code> if they are not.</p></div>
  </d:entry>
  <d:entry id="_appendto__target___79_0" d:title=".appendTo()" d:value="appendTo()">
    <d:index d:title=".appendTo()" d:value="appendTo()"/>
    <d:index d:title=".appendTo( target )" d:value="appendTo( target )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.appendTo( target )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Insert every element in the set of matched elements to the end of the target.</p><ul class="signatures"><li class="signature" id="appendTo-target">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.appendTo( target )</h4>
<p class="arguement"><strong>target</strong>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.</p>
</li></ul>
<p>The <code><a href="/append">.append()</a></code> and <code>.appendTo()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .append()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.appendTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p><p>Consider the following HTML:</p><pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;
</pre><p>We can create content and insert it into several elements at once:</p><pre>$('&lt;p&gt;Test&lt;/p&gt;').appendTo('.inner');
</pre><p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p><pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    Hello
    &lt;p&gt;Test&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    Goodbye
    &lt;p&gt;Test&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</pre><p>We can also select an element on the page and insert it into another:</p><pre>$('h2').appendTo($('.container'));
</pre><p>If an element selected this way is inserted elsewhere, it will be moved into the target (not cloned):</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
&lt;/div&gt;
</pre><p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p></div>
  </d:entry>
  <d:entry id="_mousedown__handler_eventobject____80_0" d:title=".mousedown()" d:value="mousedown()">
    <d:index d:title=".mousedown()" d:value="mousedown()"/>
    <d:index d:title=".mousedown( handler(eventObject) )" d:value="mousedown( handler(eventObject) )"/>
    <d:index d:title=".mousedown(  [eventData], handler(eventObject) )" d:value="mousedown(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.mousedown( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "mousedown" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="mousedown-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mousedown( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mousedown-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.mousedown(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mousedown"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mousedown()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('mousedown', handler)</code> in the first variation, and <code>.trigger('mousedown')</code> in the second.</p><p>The <code>mousedown</code> event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed. Any HTML element can receive this event.</p><p>For example, consider the HTML:</p><pre>&lt;div id="target"&gt;
  Click here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre><p class="image"><img src="/images/0042_05_01.png" alt=""/></p><p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p><pre>$('#target').mousedown(function() {
  alert('Handler for .mousedown() called.');
});</pre><p>Now if we click on this element, the alert is displayed:</p><p><span class="output">Handler for .mousedown() called.</span></p><p>We can also trigger the event when a different element is clicked:</p><pre>$('#other').click(function() {
  $('#target').mousedown();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p><p>The <code>mousedown</code> event is sent when any mouse button is clicked. To act only on specific buttons, we can use the event object's <code>which </code>property. Not all browsers support this property (Internet Explorer uses button instead), but jQuery normalizes the property so that it is safe to use in any browser. The value of <code>which</code> will be 1 for the left button, 2 for the middle button, or 3 for the right button.</p><p>This event is primarily useful for ensuring that the primary button was used to begin a drag operation; if ignored, strange results can occur when the user attempts to use a context menu. While the middle and right buttons can be detected with these properties, this is not reliable. In Opera and Safari, for example, right mouse button clicks are not detectable by default.</p><p>If the user clicks on an element, drags away from it, and releases the button, this is still counted as a <code>mousedown</code> event. This sequence of actions is treated as a "canceling" of the button press in most user interfaces, so it is usually better to use the <code>click</code> event unless we know that the <code>mousedown</code> event is preferable for a particular situation.</p></div>
  </d:entry>
  <d:entry id="_mouseenter__handler_eventobject____81_0" d:title=".mouseenter()" d:value="mouseenter()">
    <d:index d:title=".mouseenter()" d:value="mouseenter()"/>
    <d:index d:title=".mouseenter( handler(eventObject) )" d:value="mouseenter( handler(eventObject) )"/>
    <d:index d:title=".mouseenter(  [eventData], handler(eventObject) )" d:value="mouseenter(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.mouseenter( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</p><ul class="signatures">
<li class="signature" id="mouseenter-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mouseenter( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mouseenter-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.mouseenter(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mouseenter"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mouseenter()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('mouseenter', handler)</code> in the first two variations, and <code>.trigger('mouseenter')</code> in the third.</p><p>The <code>mouseenter</code> JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</p><p>For example, consider the HTML:</p><pre>&lt;div id="outer"&gt;
  Outer
  &lt;div id="inner"&gt;
    Inner
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre><p class="image"><img src="/images/0042_05_08.png" alt=""/></p><p>The event handler can be bound to any element:</p><pre>$('#outer').mouseenter(function() {
  $('#log').append('&lt;div&gt;Handler for .mouseenter() called.&lt;/div&gt;');
});</pre><p>Now when the mouse pointer moves over the <span class="output">Outer</span> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id="log"&gt;</code>. You can also trigger the event when another element is clicked:</p><pre>$('#other').click(function() {
  $('#outer').mouseenter();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also append the message.</p><p>The <code>mouseenter</code> event differs from <code>mouseover</code> in the way it handles event bubbling. If <code>mouseover</code> were used in this example, then when the mouse pointer moved over the <span class="output">Inner</span> element, the handler would be triggered. This is usually undesirable behavior. The <code>mouseenter</code> event, on the other hand, only triggers its handler when the mouse enters the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse enters the <span class="output">Outer</span> element, but not the <span class="output">Inner</span> element.</p></div>
  </d:entry>
  <d:entry id="_mouseleave__handler_eventobject____82_0" d:title=".mouseleave()" d:value="mouseleave()">
    <d:index d:title=".mouseleave()" d:value="mouseleave()"/>
    <d:index d:title=".mouseleave( handler(eventObject) )" d:value="mouseleave( handler(eventObject) )"/>
    <d:index d:title=".mouseleave(  [eventData], handler(eventObject) )" d:value="mouseleave(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.mouseleave( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</p><ul class="signatures">
<li class="signature" id="mouseleave-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mouseleave( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mouseleave-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.mouseleave(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mouseleave"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mouseleave()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('mouseleave', handler)</code> in the first two variations, and <code>.trigger('mouseleave')</code> in the third.</p><p>The <code>mouseleave</code> JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</p><p>For example, consider the HTML:</p><pre>&lt;div id="outer"&gt;
  Outer
  &lt;div id="inner"&gt;
    Inner
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre><p class="image"><img src="/images/0042_05_09.png" alt=""/></p><p>The event handler can be bound to any element:</p><pre>$('#outer').mouseleave(function() {
  $('#log').append('&lt;div&gt;Handler for .mouseleave() called.&lt;/div&gt;');
});</pre><p>Now when the mouse pointer moves out of the <span class="output">Outer</span> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id="log"&gt;</code>. You can also trigger the event when another element is clicked:</p><pre>$('#other').click(function() {
  $('#outer').mouseleave();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also append the message.</p><p>The <code>mouseleave</code> event differs from <code>mouseout</code> in the way it handles event bubbling. If <code>mouseout</code> were used in this example, then when the mouse pointer moved out of the <span class="output">Inner</span> element, the handler would be triggered. This is usually undesirable behavior. The <code>mouseleave</code> event, on the other hand, only triggers its handler when the mouse leaves the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse leaves the <span class="output">Outer</span> element, but not the <span class="output">Inner</span> element.</p></div>
  </d:entry>
  <d:entry id="_mousemove__handler_eventobject____83_0" d:title=".mousemove()" d:value="mousemove()">
    <d:index d:title=".mousemove()" d:value="mousemove()"/>
    <d:index d:title=".mousemove( handler(eventObject) )" d:value="mousemove( handler(eventObject) )"/>
    <d:index d:title=".mousemove(  [eventData], handler(eventObject) )" d:value="mousemove(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.mousemove( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "mousemove" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="mousemove-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mousemove( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mousemove-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.mousemove(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mousemove"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mousemove()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('mousemove', handler)</code> in the first two variations, and <code>.trigger('mousemove')</code> in the third.</p><p>The <code>mousemove</code> event is sent to an element when the mouse pointer moves inside the element. Any HTML element can receive this event.</p><p>For example, consider the HTML:</p><pre>&lt;div id="target"&gt;
  Move here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre><p>The event handler can be bound to the target:</p><pre>$("#target").mousemove(function(event) {
  var msg = "Handler for .mousemove() called at ";
  msg += event.pageX + ", " + event.pageY;
  $("#log").append("&lt;div&gt;" + msg + "&lt;/div&gt;");
});</pre><p>Now when the mouse pointer moves within the target button, the messages are appended to &lt;div id="log"&gt;:</p><p>
<span class="output">Handler for .mousemove() called at (399, 48)</span><br/><span class="output">Handler for .mousemove() called at (398, 46)</span><br/><span class="output">Handler for .mousemove() called at (397, 44)</span><br/><span class="output">Handler for .mousemove() called at (396, 42)</span><br/></p><p>To trigger the event manually, apply <code>.mousemove()</code> without an argument:</p><pre>$("#other").click(function() {
  $("#target").mousemove();
});</pre><p>After this code executes, clicks on the Trigger button will also append the message:</p><p><span class="output">Handler for .mousemove() called at (undefined, undefined)</span></p><p>When tracking mouse movement, you usually need to know the actual position of the mouse pointer. The event object that is passed to the handler contains some information about the mouse coordinates. Properties such as <code>.clientX</code>, <code>.offsetX</code>, and <code>.pageX</code> are available, but support for them differs between browsers. Fortunately, jQuery normalizes the <code>.pageX</code> and <code>.pageY</code> properties so that they can be used in all browsers. These properties provide the X and Y coordinates of the mouse pointer relative to the top-left corner of the document, as illustrated in the example output above.</p><p>Keep in mind that the <code>mousemove</code> event is triggered whenever the mouse pointer moves, even for a pixel. This means that hundreds of events can be generated over a very small amount of time. If the handler has to do any significant processing, or if multiple handlers for the event exist, this can be a serious performance drain on the browser. It is important, therefore, to optimize <code>mousemove </code>handlers as much as possible, and to unbind them as soon as they are no longer needed.</p><p>A common pattern is to bind the <code>mousemove</code> handler from within a <code>mousedown</code> hander, and to unbind it from a corresponding <code>mouseup</code> handler. If implementing this sequence of events, remember that the <code>mouseup</code> event might be sent to a different HTML element than the <code>mousemove</code> event was. To account for this, the <code>mouseup</code> handler should typically be bound to an element high up in the DOM tree, such as <code>&lt;body&gt;</code>.</p></div>
  </d:entry>
  <d:entry id="_mouseout__handler_eventobject____84_0" d:title=".mouseout()" d:value="mouseout()">
    <d:index d:title=".mouseout()" d:value="mouseout()"/>
    <d:index d:title=".mouseout( handler(eventObject) )" d:value="mouseout( handler(eventObject) )"/>
    <d:index d:title=".mouseout(  [eventData], handler(eventObject) )" d:value="mouseout(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.mouseout( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "mouseout" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="mouseout-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mouseout( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mouseout-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.mouseout(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mouseout"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mouseout()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('mouseout', handler)</code> in the first two variation, and <code>.trigger('mouseout')</code> in the third.</p><p>The <code>mouseout</code> event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</p><p>For example, consider the HTML:</p><pre>&lt;div id="outer"&gt;
  Outer
  &lt;div id="inner"&gt;
    Inner
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre><p class="image"><img src="/images/0042_05_07.png" alt=""/></p><p>The event handler can be bound to any element:</p><pre>$('#outer').mouseout(function() {
  $('#log').append('Handler for .mouseout() called.');
});</pre><p>Now when the mouse pointer moves out of the <span class="output">Outer</span> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id="log"&gt;</code>. To trigger the event manually, apply <code>.mouseout()</code> without an argument::</p><pre>$('#other').click(function() {
  $('#outer').mouseout();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also append the message.</p><p>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves out of the <span class="output">Inner</span> element in this example, a <code>mouseout</code> event will be sent to that, then trickle up to <span class="output">Outer</span>. This can trigger the bound <code>mouseout</code> handler at inopportune times. See the discussion for <code>.<a href="/mouseleave">mouseleave</a>()</code> for a useful alternative.</p></div>
  </d:entry>
  <d:entry id="_mouseover__handler_eventobject____85_0" d:title=".mouseover()" d:value="mouseover()">
    <d:index d:title=".mouseover()" d:value="mouseover()"/>
    <d:index d:title=".mouseover( handler(eventObject) )" d:value="mouseover( handler(eventObject) )"/>
    <d:index d:title=".mouseover(  [eventData], handler(eventObject) )" d:value="mouseover(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.mouseover( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "mouseover" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="mouseover-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mouseover( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mouseover-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.mouseover(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mouseover"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mouseover()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('mouseover', handler)</code> in the first two variations, and <code>.trigger('mouseover')</code> in the third.</p><p>The <code>mouseover</code> event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</p><p>For example, consider the HTML:</p><pre>&lt;div id="outer"&gt;
  Outer
  &lt;div id="inner"&gt;
    Inner
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre><p class="image"><img src="/images/0042_05_06.png" alt=""/></p><p>The event handler can be bound to any element:</p><pre>$('#outer').mouseover(function() {
  $('#log').append('&lt;div&gt;Handler for .mouseover() called.&lt;/div&gt;');
});</pre><p>Now when the mouse pointer moves over the <span class="output">Outer</span> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id="log"&gt;</code>. We can also trigger the event when another element is clicked:</p><pre>$('#other').click(function() {
  $('#outer').mouseover();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also append the message.</p><p>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the <span class="output">Inner</span> element in this example, a <code>mouseover</code> event will be sent to that, then trickle up to <span class="output">Outer</span>. This can trigger our bound <code>mouseover</code> handler at inopportune times. See the discussion for <code>.mouseenter()</code> for a useful alternative.</p></div>
  </d:entry>
  <d:entry id="_mouseup__handler_eventobject____86_0" d:title=".mouseup()" d:value="mouseup()">
    <d:index d:title=".mouseup()" d:value="mouseup()"/>
    <d:index d:title=".mouseup( handler(eventObject) )" d:value="mouseup( handler(eventObject) )"/>
    <d:index d:title=".mouseup(  [eventData], handler(eventObject) )" d:value="mouseup(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.mouseup( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "mouseup" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="mouseup-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mouseup( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mouseup-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.mouseup(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="mouseup"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.mouseup()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('mouseup', handler)</code> in the first variation, and <code>.trigger('mouseup')</code> in the second.</p><p>The <code>mouseup</code> event is sent to an element when the mouse pointer is over the element, and the mouse button is released. Any HTML element can receive this event.</p><p>For example, consider the HTML:</p><pre>&lt;div id="target"&gt;
  Click here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
</pre><p class="image"><img src="/images/0042_05_02.png" alt=""/></p><p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p><pre>$('#target').mouseup(function() {
  alert('Handler for .mouseup() called.');
});
</pre><p>Now if we click on this element, the alert is displayed:</p><p><span class="output">Handler for .mouseup() called.</span></p><p>We can also trigger the event when a different element is clicked:</p><pre>$('#other').click(function() {
  $('#target').mouseup();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p><p>If the user clicks outside an element, drags onto it, and releases the button, this is still counted as a <code>mouseup</code> event. This sequence of actions is not treated as a button press in most user interfaces, so it is usually better to use the <code>click</code> event unless we know that the <code>mouseup</code> event is preferable for a particular situation.</p></div>
  </d:entry>
  <d:entry id="attributemultiple_87_0" d:title="Multiple Attribute Selector [name=&quot;value&quot;][name2=&quot;value2&quot;]" d:value="Multiple Attribute Selector [name=&quot;value&quot;][name2=&quot;value2&quot;]">
    <d:index d:title="Multiple Attribute Selector [name=&quot;value&quot;][name2=&quot;value2&quot;]" d:value="Multiple Attribute Selector [name=&quot;value&quot;][name2=&quot;value2&quot;]"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">attributeMultiple</span>  selector</h2><p class="desc"><strong>Description: </strong>Matches elements that match all of the specified attribute filters.</p><ul class="signatures"><li><dl class="arguments">
<dt>attributeFilter1</dt>
<dd>An attribute filter.</dd>
<dt>attributeFilter2</dt>
<dd>Another attribute filter, reducing the selection even more</dd>
<dt>attributeFilterN</dt>
<dd>As many more attribute filters as necessary</dd>
</dl></li></ul>
</div>
  </d:entry>
  <d:entry id="multiple_88_0" d:title="Multiple Selector (“selector1, selector2, selectorN”)" d:value="Multiple Selector (“selector1, selector2, selectorN”)">
    <d:index d:title="Multiple Selector (“selector1, selector2, selectorN”)" d:value="Multiple Selector (“selector1, selector2, selectorN”)"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">multiple</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects the combined results of all the specified selectors.</p><ul class="signatures"><li><dl class="arguments">
<dt>selector1</dt>
<dd>Any valid selector.</dd>
<dt>selector2</dt>
<dd>Another valid selector.</dd>
<dt>selectorN</dt>
<dd>As many more valid selectors as you like.</dd>
</dl></li></ul>
<p>You can specify any number of selectors to combine into a single result.  This multiple expression combinator is an efficient way to select disparate elements. The order of the DOM elements in the returned jQuery object may not be identical, as they will be in document order. An alternative to this combinator is the .<a href="/add">add()</a> method.</p></div>
  </d:entry>
  <d:entry id="_next____selector_____89_0" d:title=".next()" d:value="next()">
    <d:index d:title=".next()" d:value="next()"/>
    <d:index d:title=".next(  [selector] )" d:value="next(  [selector] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.next(  [selector]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.</p><ul class="signatures"><li class="signature" id="next-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.next(  [selector] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.next()</code> method allows us to search through the immediately following sibling of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p><p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the immediately following sibling matches the selector, it remains in the newly constructed jQuery object; otherwise, it is excluded.</p><p>Consider a page with a simple list on it:</p><pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>If we begin at the third item, we can find the element which comes just after it:</p><pre>$('li.third-item').next().css('background-color', 'red');</pre><p>The result of this call is a red background behind item 4. Since we do not supply a selector expression, this following element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</p></div>
  </d:entry>
  <d:entry id="_attr__attributename___90_0" d:title=".attr()" d:value="attr()">
    <d:index d:title=".attr()" d:value="attr()"/>
    <d:index d:title=".attr( attributeName )" d:value="attr( attributeName )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.attr( attributeName )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the value of an attribute for the first element in the set of matched elements.</p><ul class="signatures"><li class="signature" id="attr-attributeName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.attr( attributeName )</h4>
<p class="arguement"><strong>attributeName</strong>The name of the attribute to get.</p>
</li></ul>
<p>The <code>.attr()</code> method gets the attribute value for only the <em>first</em> element in the matched set. To get the value for each element individually, use a looping construct such as jQuery's <code>.each()</code> or <code>.map()</code> method.</p><p><strong>As of jQuery 1.6</strong>, the <code>.attr()</code> method returns <code>undefined</code> for attributes that have not been set. In addition, <code>.attr()</code> should not be used on plain objects, arrays, the window, or the document. To retrieve and change DOM properties, use the <a href="http://api.jquery.com/prop/">.prop()</a> method.</p><p>Using jQuery's <code>.attr()</code> method to get the value of an element's attribute has two main benefits:</p><ol>
<li>
<strong>Convenience</strong>: It can be called directly on a jQuery object and chained to other jQuery methods.</li>
      <li>
<strong>Cross-browser consistency</strong>: The values of some attributes are reported inconsistently across browsers, and even across versions of a single browser. The <code>.attr()</code> method reduces such inconsistencies.</li>
    </ol>
<blockquote><p><strong>Note:</strong> Attribute values are strings with the exception of a few attributes such as value and tabindex.</p></blockquote></div>
  </d:entry>
  <d:entry id="_attr__attributename__value___90_1" d:title=".attr()" d:value="attr()">
    <d:index d:title=".attr()" d:value="attr()"/>
    <d:index d:title=".attr( attributeName, value )" d:value="attr( attributeName, value )"/>
    <d:index d:title=".attr( map )" d:value="attr( map )"/>
    <d:index d:title=".attr( attributeName, function(index, attr) )" d:value="attr( attributeName, function(index, attr) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.attr( attributeName, value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set one or more attributes for the set of matched elements.</p><ul class="signatures">
<li class="signature" id="attr-attributeName-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.attr( attributeName, value )</h4>
<p class="arguement"><strong>attributeName</strong>The name of the attribute to set.</p>
<p class="arguement"><strong>value</strong>A value to set for the attribute.</p>
</li>
<li class="signature" id="attr-map">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.attr( map )</h4>
<p class="arguement"><strong>map</strong>A map of attribute-value pairs to set.</p>
</li>
<li class="signature" id="attr-attributeName-functionindex- attr">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1/">1.1</a></span>.attr( attributeName, function(index, attr) )</h4>
<p class="arguement"><strong>attributeName</strong>The name of the attribute to set.</p>
<p class="arguement"><strong>function(index, attr)</strong>A function returning the value to set. <code>this</code> is the current element. Receives the index position of the element in the set and the old attribute value as arguments.</p>
</li>
</ul>
<p>The <code>.attr()</code> method is a convenient way to set the value of attributes—especially when setting multiple attributes or using values returned by a function. Consider the following image:</p><pre>&lt;img id="greatphoto" src="brush-seller.jpg" alt="brush seller" /&gt;</pre><h4 id="setting-simple-attr">Setting a simple attribute</h4><p>To change the <code>alt</code> attribute, simply pass the name of the attribute and its new value to the <code>.attr()</code> method:</p><pre>$('#greatphoto').attr('alt', 'Beijing Brush Seller');</pre><p><em>Add</em> an attribute the same way:</p><pre>$('#greatphoto')
.attr('title', 'Photo by Kelly Clark');</pre><h4 id="setting-several-attrs">Setting several attributes at once</h4><p>To change the <code>alt</code> attribute and add the <code>title</code> attribute at the same time, pass both sets of names and values into the method at once using a map (JavaScript object literal). Each key-value pair in the map adds or modifies an attribute:</p><pre>$('#greatphoto').attr({
  alt: 'Beijing Brush Seller',
  title: 'photo by Kelly Clark'
});</pre><p>When setting multiple attributes, the quotes around attribute names are optional.</p><p><strong>WARNING</strong>: When setting the 'class' attribute, you must always use quotes!</p><p><strong>Note</strong>: jQuery prohibits changing the <code>type</code> attribute on an <code>&lt;input&gt;</code> or <code>&lt;button&gt;</code> element and will throw an error in all browsers. This is because the <code>type</code> attribute cannot be changed in Internet Explorer.</p><h4 id="computed-attr-values">Computed attribute values</h4><p>By using a function to set attributes, you can compute the value based on other properties of the element. For example, to concatenate a new value with an existing value:</p><pre>$('#greatphoto').attr('title', function(i, val) {
  return val + ' - photo by Kelly Clark'
});</pre><p>This use of a function to compute attribute values can be particularly useful when modifying the attributes of multiple elements at once.</p><p><strong>Note: </strong>If nothing is returned in the setter function (ie. <code>function(index, attr){})</code>, or if <code>undefined</code> is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.</p></div>
  </d:entry>
  <d:entry id="next_adjacent_91_0" d:title="Next Adjacent Selector (“prev + next”)" d:value="Next Adjacent Selector (“prev + next”)">
    <d:index d:title="Next Adjacent Selector (“prev + next”)" d:value="Next Adjacent Selector (“prev + next”)"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">next adjacent</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects all next elements matching "next" that are immediately preceded by a sibling "prev".</p><ul class="signatures"><li><dl class="arguments">
<dt>prev</dt>
<dd>Any valid selector.</dd>
<dt>next</dt>
<dd>A selector to match the element that is next to the first selector.</dd>
</dl></li></ul>
<p>One important point to consider with both the next adjacent sibling selector (<code>prev + next</code>) and the general sibling selector (<code>prev ~ siblings</code>) is that the elements on either side of the combinator must share the same parent.</p></div>
  </d:entry>
  <d:entry id="next_siblings_92_0" d:title="Next Siblings Selector (“prev ~ siblings”)" d:value="Next Siblings Selector (“prev ~ siblings”)">
    <d:index d:title="Next Siblings Selector (“prev ~ siblings”)" d:value="Next Siblings Selector (“prev ~ siblings”)"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">next siblings</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects all sibling elements that follow after the "prev" element, have the same parent, and match the filtering "siblings" selector.</p><ul class="signatures"><li><dl class="arguments">
<dt>prev</dt>
<dd>Any valid selector.</dd>
<dt>siblings</dt>
<dd>A selector to filter elements that are the following siblings of the first selector.</dd>
</dl></li></ul>
<p>The notable difference between (<code>prev + next</code>) and (<code>prev ~ siblings</code>) is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.</p></div>
  </d:entry>
  <d:entry id="_nextall____selector_____93_0" d:title=".nextAll()" d:value="nextAll()">
    <d:index d:title=".nextAll()" d:value="nextAll()"/>
    <d:index d:title=".nextAll(  [selector] )" d:value="nextAll(  [selector] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.nextAll(  [selector]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.</p><ul class="signatures"><li class="signature" id="nextAll-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.nextAll(  [selector] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.nextAll()</code> method allows us to search through the successors of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p><p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p><p>Consider a page with a simple list on it:</p><pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>If we begin at the third item, we can find the elements which come after it:</p><pre>$('li.third-item').nextAll().css('background-color', 'red');</pre><p>The result of this call is a red background behind items 4 and 5. Since we do not supply a selector expression, these following elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</p></div>
  </d:entry>
  <d:entry id="_nextuntil____selector______filter_____94_0" d:title=".nextUntil()" d:value="nextUntil()">
    <d:index d:title=".nextUntil()" d:value="nextUntil()"/>
    <d:index d:title=".nextUntil(  [selector] [, filter] )" d:value="nextUntil(  [selector] [, filter] )"/>
    <d:index d:title=".nextUntil(  [element] [, filter] )" d:value="nextUntil(  [element] [, filter] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.nextUntil(  [selector]  [, filter]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.</p><ul class="signatures">
<li class="signature" id="nextUntil-selector-filter">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.nextUntil(  [selector] [, filter] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to indicate where to stop matching following sibling elements.</p>
<p class="arguement"><strong>filter</strong>A string containing a selector expression to match elements against.</p>
</li>
<li class="signature" id="nextUntil-element-filter">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.nextUntil(  [element] [, filter] )</h4>
<p class="arguement"><strong>element</strong>A DOM node or jQuery object indicating where to stop matching following sibling elements.</p>
<p class="arguement"><strong>filter</strong>A string containing a selector expression to match elements against.</p>
</li>
</ul>
<p>Given a selector expression that represents a set of DOM elements, the <code>.nextUntil()</code> method searches through the successors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all following siblings up to but not including the one matched by the <code>.nextUntil()</code> argument.</p><p>If the selector is not matched or is not supplied, all following siblings will be selected; in these cases it selects the same elements as the <code>.nextAll()</code> method does when no filter selector is provided.</p><p><strong>As of jQuery 1.6</strong>, A DOM node or jQuery object, instead of a selector, may be passed to the <code>.nextUntil()</code> method.</p><p>The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.</p></div>
  </d:entry>
  <d:entry id="jquery_noconflict____removeall_____95_0" d:title="jQuery.noConflict()" d:value="jQuerynoConflict()">
    <d:index d:title="jQuery.noConflict()" d:value="jQuerynoConflict()"/>
    <d:index d:title="jQuery.noConflict()" d:value="noConflict()"/>
    <d:index d:title="jQuery.noConflict(  [removeAll] )" d:value="jQuerynoConflict(  [removeAll] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.noConflict(  [removeAll]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>Relinquish jQuery's control of the $ variable.</p><ul class="signatures"><li class="signature" id="jQuery-noConflict-removeAll">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.noConflict(  [removeAll] )</h4>
<p class="arguement"><strong>removeAll</strong>A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).</p>
</li></ul>
<p>Many JavaScript libraries use <code> $</code> as a function or variable name, just as jQuery does. In jQuery's case, <code> $</code> is just an alias for <code>jQuery</code>, so all functionality is available without using <code> $</code>. If we need to use another JavaScript library alongside jQuery, we can return control of <code> $</code> back to the other library with a call to <code>$.noConflict()</code>:</p><pre>
&lt;script type="text/javascript" src="other_lib.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
  $.noConflict();
  // Code that uses other library's $ can follow here.
&lt;/script&gt;
</pre><p>This technique is especially effective in conjunction with the .ready() method's ability to alias the jQuery object, as within callback passed to .ready() we can use $ if we wish without fear of conflicts later:</p><pre>
&lt;script type="text/javascript" src="other_lib.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
  $.noConflict();
  jQuery(document).ready(function($) {
    // Code that uses jQuery's $ can follow here.
  });
  // Code that uses other library's $ can follow here.
&lt;/script&gt;
</pre><p>If necessary, we can free up the <code> jQuery</code> name as well by passing <code>true</code> as an argument to the method. This is rarely necessary, and if we must do this (for example, if we need to use multiple versions of the <code>jQuery</code> library on the same page), we need to consider that most plug-ins rely on the presence of the jQuery variable and may not operate correctly in this situation.</p></div>
  </d:entry>
  <d:entry id="jquery_noop___96_0" d:title="jQuery.noop()" d:value="jQuerynoop()">
    <d:index d:title="jQuery.noop()" d:value="jQuerynoop()"/>
    <d:index d:title="jQuery.noop()" d:value="noop()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.noop()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Function">Function</a></span>
</h2><p class="desc"><strong>Description: </strong>An empty function.</p><ul class="signatures"><li class="signature" id="jQuery-noop"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>jQuery.noop()</h4></li></ul>
<p>You can use this empty function when you wish to pass around a function that will do nothing.</p><p>This is useful for plugin authors who offer optional callbacks; in the case that no callback is given, something like <code>jQuery.noop</code> could execute.</p></div>
  </d:entry>
  <d:entry id="_not__selector___97_0" d:title=".not()" d:value="not()">
    <d:index d:title=".not()" d:value="not()"/>
    <d:index d:title=".not( selector )" d:value="not( selector )"/>
    <d:index d:title=".not( elements )" d:value="not( elements )"/>
    <d:index d:title=".not( function(index) )" d:value="not( function(index) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.not( selector )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove elements from the set of matched elements.</p><ul class="signatures">
<li class="signature" id="not-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.not( selector )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li>
<li class="signature" id="not-elements">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.not( elements )</h4>
<p class="arguement"><strong>elements</strong>One or more DOM elements to remove from the matched set.</p>
</li>
<li class="signature" id="not-functionindex">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.not( function(index) )</h4>
<p class="arguement"><strong>function(index)</strong>A function used as a test for each element in the set. <code>this</code> is the current DOM element.</p>
</li>
</ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.not()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don't match the selector will be included in the result.</p><p>Consider a page with a simple list on it:</p><pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>We can apply this method to the set of list items:</p><pre>$('li').not(':even').css('background-color', 'red');</pre><p>The result of this call is a red background for items 2 and 4, as they do not match the selector (recall that :even and :odd use 0-based indexing).</p><h4>Removing Specific Elements</h4><p>The second version of the <code>.not()</code> method allows us to remove elements from the matched set, assuming we have found those elements previously by some other means. For example, suppose our list had an id applied to one of its items:</p><pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li id="notli"&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>We can fetch the third list item using the native JavaScript <code>getElementById()</code> function, then remove it from a jQuery object:</p><pre>
$('li').not(document.getElementById('notli'))
  .css('background-color', 'red');
</pre><p>This statement changes the color of items 1, 2, 4, and 5. We could have accomplished the same thing with a simpler jQuery expression, but this technique can be useful when, for example, other libraries provide references to plain DOM nodes.</p><p>As of jQuery 1.4, the <code>.not()</code> method can take a function as its argument in the same way that <code>.filter()</code> does. Elements for which the function returns <code>true</code> are excluded from the filtered set; all other elements are included.</p></div>
  </d:entry>
  <d:entry id="not_98_0" d:title=":not() Selector" d:value="not() Selector">
    <d:index d:title=":not() Selector" d:value="not() Selector"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">not</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects all elements that do not match the given selector.</p><ul class="signatures"><li><dl class="arguments">
<dt>selector</dt>
<dd>A selector with which to filter by.</dd>
</dl></li></ul>
<p>All selectors are accepted inside <code>:not()</code>,  for example: <code>:not(div a)</code> and <code>:not(div,a)</code>.</p><h3>Additional Notes</h3><p>The <code><a href="/not/">.not()</a></code> method will end up providing you with more readable selections than pushing complex selectors or variables into a <code>:not()</code> selector filter. In most cases, it is a better choice.</p></div>
  </d:entry>
  <d:entry id="jquery_now___99_0" d:title="jQuery.now()" d:value="jQuerynow()">
    <d:index d:title="jQuery.now()" d:value="jQuerynow()"/>
    <d:index d:title="jQuery.now()" d:value="now()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.now()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Number">Number</a></span>
</h2><p class="desc"><strong>Description: </strong>Return a number representing the current time.</p><ul class="signatures"><li class="signature" id="jQuery-now"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>jQuery.now()</h4></li></ul>
<p>The <code>$.now()</code> method is a shorthand for the number returned by the expression <code>(new Date).getTime()</code>.</p></div>
  </d:entry>
  <d:entry id="nth_child_100_0" d:title=":nth-child() Selector" d:value="nth-child() Selector">
    <d:index d:title=":nth-child() Selector" d:value="nth-child() Selector"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">nth-child</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects all elements that are the nth-child of their parent.</p><ul class="signatures"><li><dl class="arguments">
<dt>index</dt>
<dd>The index of each child to match, starting with <code>1</code>, the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-child(even)</code>, <code>:nth-child(4n)</code> )</dd>
</dl></li></ul>
<p>Because jQuery's implementation of <code>:nth-child(n)</code> is strictly derived from the CSS specification, the value of <code>n</code> is "1-indexed", meaning that the counting starts at 1. For all other selector expressions, however, jQuery follows JavaScript's "0-indexed" counting. Therefore, given a single <code>&lt;ul&gt;</code> containing two <code>&lt;li&gt;</code>s, <code>$('li:nth-child(1)')</code> selects the first <code>&lt;li&gt;</code> while  <code>$('li:eq(1)')</code> selects the second.</p><p>The <code>:nth-child(n)</code> pseudo-class is easily confused with <code>:eq(n)</code>, even though the two can result in dramatically different matched elements. With <code>:nth-child(n)</code>, all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With <code>:eq(n)</code> only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.</p><p>Further discussion of this unusual usage can be found in the <a href="http://www.w3.org/TR/css3-selectors/#nth-child-pseudo">W3C CSS specification</a>.</p></div>
  </d:entry>
  <d:entry id="attributecontainsprefix_101_0" d:title="Attribute Contains Prefix Selector [name|=&quot;value&quot;]" d:value="Attribute Contains Prefix Selector [name|=&quot;value&quot;]">
    <d:index d:title="Attribute Contains Prefix Selector [name|=&quot;value&quot;]" d:value="Attribute Contains Prefix Selector [name|=&quot;value&quot;]"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">attributeContainsPrefix</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).</p><ul class="signatures"><li><dl class="arguments">
<dt>attribute</dt>
<dd>An attribute name.</dd>
<dt>value</dt>
<dd>An attribute value. Quotes are mandatory.</dd>
</dl></li></ul>
<p>This selector was introduced into the CSS specification to handle language attributes.</p></div>
  </d:entry>
  <d:entry id="odd_102_0" d:title=":odd Selector" d:value="odd Selector">
    <d:index d:title=":odd Selector" d:value="odd Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">odd</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects odd elements, zero-indexed.  See also even.</p>
      <p>In particular, note that the <em>0-based indexing</em> means that, counter-intuitively, <code>:odd</code> selects the second element, fourth element, and so on within the matched set.</p>
      <ul>
        <li>Because <code>:odd</code> is a jQuery extension and not part of the CSS specification, queries using <code>:odd</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:odd</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":odd")</code></a>.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_offset___103_0" d:title=".offset()" d:value="offset()">
    <d:index d:title=".offset()" d:value="offset()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.offset()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current coordinates of the first element in the set of matched elements, relative to the document.</p><ul class="signatures"><li class="signature" id="offset"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.offset()</h4></li></ul>
<p>The <code>.offset()</code> method allows us to retrieve the current position of an element <em>relative to the document</em>. Contrast this with <code>.position()</code>, which retrieves the current position <em>relative to the offset parent</em>. When positioning a new element on top of an existing one for global manipulation (in particular, for implementing drag-and-drop), <code>.offset()</code> is the more useful.</p><p><code>.offset()</code> returns an object containing the properties <code>top</code> and <code>left</code>.</p><blockquote><p><strong>Note:</strong> jQuery does not support getting the offset coordinates of hidden elements or accounting for borders, margins, or padding set on the body element.</p></blockquote></div>
  </d:entry>
  <d:entry id="_offset__coordinates___103_1" d:title=".offset()" d:value="offset()">
    <d:index d:title=".offset()" d:value="offset()"/>
    <d:index d:title=".offset( coordinates )" d:value="offset( coordinates )"/>
    <d:index d:title=".offset( function(index, coords) )" d:value="offset( function(index, coords) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.offset( coordinates )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set the current coordinates of every element in the set of matched elements, relative to the document.</p><ul class="signatures">
<li class="signature" id="offset-coordinates">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.offset( coordinates )</h4>
<p class="arguement"><strong>coordinates</strong>An object containing the properties <code>top</code> and <code>left</code>, which are integers indicating the new top and left coordinates for the elements.</p>
</li>
<li class="signature" id="offset-functionindex- coords">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.offset( function(index, coords) )</h4>
<p class="arguement"><strong>function(index, coords)</strong>A function to return the coordinates to set. Receives the index of the element in the collection as the first argument and the current coordinates as the second argument. The function should return an object with the new <code>top</code> and <code>left</code> properties.</p>
</li>
</ul>
<p>The <code>.offset()</code> setter method allows us to reposition an element. The element's position is specified <em>relative to the document</em>. If the element's <code>position</code> style property is currently <code>static</code>, it will be set to <code>relative</code> to allow for this repositioning.</p></div>
  </d:entry>
  <d:entry id="_offsetparent___104_0" d:title=".offsetParent()" d:value="offsetParent()">
    <d:index d:title=".offsetParent()" d:value="offsetParent()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.offsetParent()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the closest ancestor element that is positioned.</p><ul class="signatures"><li class="signature" id="offsetParent"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.6/">1.2.6</a></span>.offsetParent()</h4></li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.offsetParent()</code> method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object wrapped around the closest positioned ancestor. An element is said to be positioned if it has a CSS position attribute of <code>relative</code>, <code>absolute</code>, or <code>fixed</code>. This information is useful for calculating offsets for performing animations and placing objects on the page.</p><p>Consider a page with a basic nested list on it, with a positioned element:</p><pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii" style="position: relative;"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre><p>If we begin at item A, we can find its positioned ancestor:</p><pre>$('li.item-a').offsetParent().css('background-color', 'red');</pre><p>This will change the color of list item II, which is positioned.</p></div>
  </d:entry>
  <d:entry id="_one__eventtype____eventdata____handler_eventobject____105_0" d:title=".one()" d:value="one()">
    <d:index d:title=".one()" d:value="one()"/>
    <d:index d:title=".one( eventType [, eventData], handler(eventObject) )" d:value="one( eventType [, eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.one( eventType [, eventData] , handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Attach a handler to an event for the elements. The handler is executed at most once per element.</p><ul class="signatures"><li class="signature" id="one-eventType-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1/">1.1</a></span>.one( eventType [, eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventType</strong>A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.</p>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute at the time the event is triggered.</p>
</li></ul>
<p>This method is identical to <code>.bind()</code>, except that the handler is unbound after its first invocation. For example:</p><pre>$("#foo").one("click", function() {
  alert("This will be displayed only once.");
});
</pre><p>After the code is executed, a click on the element with ID <code>foo</code> will display the alert. Subsequent clicks will do nothing. This code is equivalent to:</p><pre>$("#foo").bind("click", function( event ) {
  alert("This will be displayed only once.");
  $(this).unbind( event );
});
</pre><p>In other words, explicitly calling <code>.unbind()</code> from within a regularly-bound handler has exactly the same effect.</p><p>If the first argument contains more than one space-separated event types, the event handler is called <em>once for each event type</em>.</p></div>
  </d:entry>
  <d:entry id="only_child_106_0" d:title=":only-child Selector" d:value="only-child Selector">
    <d:index d:title=":only-child Selector" d:value="only-child Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">only-child</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements that are the only child of their parent.</p>
      <p>If the parent has other child elements, nothing is matched.</p>
    </div>
  </d:entry>
  <d:entry id="_outerheight____includemargin_____107_0" d:title=".outerHeight()" d:value="outerHeight()">
    <d:index d:title=".outerHeight()" d:value="outerHeight()"/>
    <d:index d:title=".outerHeight(  [includeMargin] )" d:value="outerHeight(  [includeMargin] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.outerHeight(  [includeMargin]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Integer">Integer</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin.</p><ul class="signatures"><li class="signature" id="outerHeight-includeMargin">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.6/">1.2.6</a></span>.outerHeight(  [includeMargin] )</h4>
<p class="arguement"><strong>includeMargin</strong>A Boolean indicating whether to include the element's margin in the calculation.</p>
</li></ul>
<p>The top and bottom padding and border are always included in the <code>.outerHeight()</code> calculation; if the <code>includeMargin</code> argument is set to <code>true</code>, the margin (top and bottom) is also included.</p><p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code><a href="/height">.height()</a></code> instead.</p><p class="image"><img src="/images/0042_04_03.png"/></p></div>
  </d:entry>
  <d:entry id="_outerwidth____includemargin_____108_0" d:title=".outerWidth()" d:value="outerWidth()">
    <d:index d:title=".outerWidth()" d:value="outerWidth()"/>
    <d:index d:title=".outerWidth(  [includeMargin] )" d:value="outerWidth(  [includeMargin] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.outerWidth(  [includeMargin]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Integer">Integer</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current computed width for the first element in the set of matched elements, including padding and border.</p><ul class="signatures"><li class="signature" id="outerWidth-includeMargin">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.6/">1.2.6</a></span>.outerWidth(  [includeMargin] )</h4>
<p class="arguement"><strong>includeMargin</strong>A Boolean indicating whether to include the element's margin in the calculation.</p>
</li></ul>
<p>Returns the width of the element, along with left and right padding, border, and optionally margin, in pixels.</p><p>If <code>includeMargin</code> is omitted or <code>false</code>, the padding and border are included in the calculation; if <code>true</code>, the margin is also included.</p><p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code><a href="/width">.width()</a></code> instead.</p><p class="image"><img src="/images/0042_04_06.png"/></p></div>
  </d:entry>
  <d:entry id="jquery_param__obj___109_0" d:title="jQuery.param()" d:value="jQueryparam()">
    <d:index d:title="jQuery.param()" d:value="jQueryparam()"/>
    <d:index d:title="jQuery.param()" d:value="param()"/>
    <d:index d:title="jQuery.param( obj )" d:value="jQueryparam( obj )"/>
    <d:index d:title="jQuery.param( obj, traditional )" d:value="jQueryparam( obj, traditional )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.param( obj )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>Create a serialized representation of an array or object, suitable for use in a URL query string or Ajax request. </p><ul class="signatures">
<li class="signature" id="jQuery-param-obj">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>jQuery.param( obj )</h4>
<p class="arguement"><strong>obj</strong>An array or object to serialize.</p>
</li>
<li class="signature" id="jQuery-param-obj-traditional">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>jQuery.param( obj, traditional )</h4>
<p class="arguement"><strong>obj</strong>An array or object to serialize.</p>
<p class="arguement"><strong>traditional</strong>A Boolean indicating whether to perform a traditional "shallow" serialization.</p>
</li>
</ul>
<p>This function is used internally to convert form element values into a serialized string representation (See <a href="/serialize/">.serialize()</a> for more information).</p><p>As of jQuery 1.3, the return value of a function is used instead of the function as a String.</p><p>As of jQuery 1.4, the <code>$.param()</code> method serializes deep objects recursively to accommodate modern scripting languages and frameworks such as PHP and Ruby on Rails. You can disable this functionality globally by setting <code>jQuery.ajaxSettings.traditional = true;</code>.</p><p>If the object passed is in an Array, it must be an array of objects in the format returned by <a href="/serializeArray/">.serializeArray()</a></p><pre>[{name:"first",value:"Rick"},
{name:"last",value:"Astley"},
{name:"job",value:"Rock Star"}]</pre><blockquote>
    <p><strong>Note:</strong> Because some frameworks have limited ability to parse serialized arrays, developers should exercise caution when passing an <code>obj</code> argument that contains objects or arrays nested within another array.</p>
</blockquote><blockquote>
<p><strong>Note:</strong> Because there is no universally agreed-upon specification for param strings, it is not possible to encode complex data structures using this method in a manner that works ideally across all languages supporting such input. Until such time that there is, the <code>$.param</code> method will remain in its current form.</p>
</blockquote><p>In jQuery 1.4, HTML5 input elements are also serialized.</p><p>We can display a query string representation of an object and a URI-decoded version of the same as follows:</p><pre>var myObject = {
  a: {
    one: 1, 
    two: 2, 
    three: 3
  }, 
  b: [1,2,3]
};
var recursiveEncoded = $.param(myObject);
var recursiveDecoded = decodeURIComponent($.param(myObject));

alert(recursiveEncoded);
alert(recursiveDecoded);
</pre><p>The values of <code>recursiveEncoded</code> and <code>recursiveDecoded</code> are alerted as follows:</p><p><span class="output">a%5Bone%5D=1&amp;a%5Btwo%5D=2&amp;a%5Bthree%5D=3&amp;b%5B%5D=1&amp;b%5B%5D=2&amp;b%5B%5D=3</span><br/><span class="output">a[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3</span></p><p>To emulate the behavior of <code>$.param()</code> prior to jQuery 1.4, we can set the <code>traditional</code> argument to <code>true</code>:</p><pre>var myObject = {
  a: {
    one: 1, 
    two: 2, 
    three: 3
  }, 
  b: [1,2,3]
};
var shallowEncoded = $.param(myObject, true);
var shallowDecoded = decodeURIComponent(shallowEncoded);

alert(shallowEncoded);
alert(shallowDecoded);
</pre><p>The values of <code>shallowEncoded</code> and <code>shallowDecoded</code> are alerted as follows:</p><p><span class="output">a=%5Bobject+Object%5D&amp;b=1&amp;b=2&amp;b=3</span><br/><span class="output">a=[object+Object]&amp;b=1&amp;b=2&amp;b=3</span></p></div>
  </d:entry>
  <d:entry id="_parent____selector_____110_0" d:title=".parent()" d:value="parent()">
    <d:index d:title=".parent()" d:value="parent()"/>
    <d:index d:title=".parent(  [selector] )" d:value="parent(  [selector] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.parent(  [selector]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the parent of each element in the current set of matched elements, optionally filtered by a selector.</p><ul class="signatures"><li class="signature" id="parent-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.parent(  [selector] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.parent()</code> method allows us to search through the parents of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.parents()</code> and <code>.parent()</code> methods are similar, except that the latter only travels a single level up the DOM tree.</p><p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p><p>Consider a page with a basic nested list on it:</p><pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre><p>If we begin at item A, we can find its parents:</p><pre>$('li.item-a').parent().css('background-color', 'red');</pre><p>The result of this call is a red background for the level-2 list. Since we do not supply a selector expression, the parent element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</p></div>
  </d:entry>
  <d:entry id="parent_111_0" d:title=":parent Selector" d:value="parent Selector">
    <d:index d:title=":parent Selector" d:value="parent Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">parent</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Select all elements that are the parent of another element, including text nodes.</p>
      <p>This is the inverse of <code>:empty</code>. </p>
      <p>One important thing to note regarding the use of <code>:parent</code> (and <code>:empty</code>) is that child elements include text nodes.</p>
      <p>The W3C recommends that the <code>&lt;p&gt;</code> element have at least one child node, even if that child is merely text (see <a href="http://www.w3.org/TR/html401/struct/text.html#edef-P">http://www.w3.org/TR/html401/struct/text.html#edef-P</a>). Some other elements, on the other hand, are empty (i.e. have no children) by definition:<code> &lt;input&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;br&gt;</code>, and <code>&lt;hr&gt;</code>, for example.</p>
      <ul>
        <li>Because <code>:parent</code> is a jQuery extension and not part of the CSS specification, queries using <code>:parent</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:parent</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":parent")</code></a>.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_after__content____content_____112_0" d:title=".after()" d:value="after()">
    <d:index d:title=".after()" d:value="after()"/>
    <d:index d:title=".after( content [, content] )" d:value="after( content [, content] )"/>
    <d:index d:title=".after( function(index) )" d:value="after( function(index) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.after( content [, content]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Insert content, specified by the parameter, after each element in the set of matched elements.</p><ul class="signatures">
<li class="signature" id="after-content-content">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.after( content [, content] )</h4>
<p class="arguement"><strong>content</strong>HTML string, DOM element, or jQuery object to insert after each element in the set of matched elements.</p>
<p class="arguement"><strong>content</strong>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert after each element in the set of matched elements.</p>
</li>
<li class="signature" id="after-functionindex">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.after( function(index) )</h4>
<p class="arguement"><strong>function(index)</strong>A function that returns an HTML string, DOM element(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, <code>this</code> refers to the current element in the set.</p>
</li>
</ul>
<p>The <code>.after()</code> and <code><a href="/insertAfter">.insertAfter()</a></code> methods perform the same task. The major difference is in the syntax—specifically, in the placement of the content and target. With<code> .after()</code>, the selector expression preceding the method is the container after which the content is inserted. With <code>.insertAfter()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.</p><p>Using the following HTML:</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>Content can be created and then inserted after several elements at once:</p><pre>$('.inner').after('&lt;p&gt;Test&lt;/p&gt;');</pre><p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
&lt;/div&gt;</pre><p>An element in the DOM can also be selected and inserted after another element:</p><pre>$('.container').after($('h2'));</pre><p>If an element selected this way is inserted elsewhere, it will be moved rather than cloned:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Greetings&lt;/h2&gt;</pre><p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p><h4 id="disconnected-dom-nodes">Inserting Disconnected DOM nodes</h4><p>As of jQuery 1.4, <code>.before()</code> and <code>.after()</code> will also work on disconnected DOM nodes. For example, given the following code:</p><pre>$('&lt;div/&gt;').after('&lt;p&gt;&lt;/p&gt;');</pre><p>The result is a jQuery set containing a div and a paragraph, in that order. That set can be further manipulated, even before it is inserted in the document.</p><pre>$('&lt;div/&gt;').after('&lt;p&gt;&lt;/p&gt;').addClass('foo')
  .filter('p').attr('id', 'bar').html('hello')
.end()
.appendTo('body');</pre><p>This results in the following elements inserted just before the closing <code>&lt;/body&gt;</code> tag:</p><pre>
&lt;div class="foo"&gt;&lt;/div&gt;
&lt;p class="foo" id="bar"&gt;hello&lt;/p&gt;
</pre><h4 id="passing-a-function">Passing a Function</h4><p>As of jQuery 1.4, <code>.after()</code> supports passing a function that returns the elements to insert.</p><pre>$('p').after(function() {
  return '&lt;div&gt;' + this.className + '&lt;/div&gt;';
});</pre><p>This example inserts a <code>&lt;div&gt;</code> after each paragraph, with each new <code>&lt;div&gt;</code> containing the class name(s) of its preceding paragraph.</p><h4 id="additional-arguments">Additional Arguments</h4><p>Similar to other content-adding methods such as <code><a href="http://api.jquery.com/prepend/">.prepend()</a></code> and <code><a href="http://api.jquery.com/before/">.before()</a></code>, <code>.after()</code> also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</p><p>For example, the following will insert two new <code>&lt;div&gt;</code>s and an existing <code>&lt;div&gt;</code> after the first paragraph:</p><pre>var $newdiv1 = $('&lt;div id="object1"/&gt;'),
    newdiv2 = document.createElement('div'),
    existingdiv1 = document.getElementById('foo');

$('p').first().after($newdiv1, [newdiv2, existingdiv1]);
</pre><p>Since <code>.after()</code> can accept any number of additional arguments, the same result can be achieved by passing in the three <code>&lt;div&gt;</code>s as three separate arguments, like so: <code>$('p').first().after($newdiv1, newdiv2, existingdiv1)</code>. The type and number of arguments will largely depend on the elements are collected in the code.</p></div>
  </d:entry>
  <d:entry id="attributecontains_113_0" d:title="Attribute Contains Selector [name*=&quot;value&quot;]" d:value="Attribute Contains Selector [name*=&quot;value&quot;]">
    <d:index d:title="Attribute Contains Selector [name*=&quot;value&quot;]" d:value="Attribute Contains Selector [name*=&quot;value&quot;]"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">attributeContains</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects elements that have the specified attribute with a value containing the a given substring.</p><ul class="signatures"><li><dl class="arguments">
<dt>attribute</dt>
<dd>An attribute name.</dd>
<dt>value</dt>
<dd>An attribute value. Quotes are mandatory.</dd>
</dl></li></ul>
<p>This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~="word"]), which is more appropriate in many cases.</p></div>
  </d:entry>
  <d:entry id="_parents____selector_____114_0" d:title=".parents()" d:value="parents()">
    <d:index d:title=".parents()" d:value="parents()"/>
    <d:index d:title=".parents(  [selector] )" d:value="parents(  [selector] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.parents(  [selector]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.</p><ul class="signatures"><li class="signature" id="parents-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.parents(  [selector] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.parents()</code> method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object from the matching elements ordered from immediate parent on up; the elements are returned in order from the closest parent to the outer ones. The <code>.parents()</code> and <code><a href="http://api.jquery.com/parent/">.parent()</a></code> methods are similar, except that the latter only travels a single level up the DOM tree.</p><p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p><p>Consider a page with a basic nested list on it:</p><pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre><p>If we begin at item A, we can find its ancestors:</p><pre>$('li.item-a').parents().css('background-color', 'red');</pre><p>The result of this call is a red background for the level-2 list, item II, and the level-1 list (and on up the DOM tree all the way to the <code>&lt;html&gt;</code> element). Since we do not supply a selector expression, all of the ancestors are part of the returned jQuery object. If we had supplied one, only the matching items among these would be included.</p></div>
  </d:entry>
  <d:entry id="_parentsuntil____selector______filter_____115_0" d:title=".parentsUntil()" d:value="parentsUntil()">
    <d:index d:title=".parentsUntil()" d:value="parentsUntil()"/>
    <d:index d:title=".parentsUntil(  [selector] [, filter] )" d:value="parentsUntil(  [selector] [, filter] )"/>
    <d:index d:title=".parentsUntil(  [element] [, filter] )" d:value="parentsUntil(  [element] [, filter] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.parentsUntil(  [selector]  [, filter]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.</p><ul class="signatures">
<li class="signature" id="parentsUntil-selector-filter">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.parentsUntil(  [selector] [, filter] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to indicate where to stop matching ancestor elements.</p>
<p class="arguement"><strong>filter</strong>A string containing a selector expression to match elements against.</p>
</li>
<li class="signature" id="parentsUntil-element-filter">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.parentsUntil(  [element] [, filter] )</h4>
<p class="arguement"><strong>element</strong>A DOM node or jQuery object indicating where to stop matching ancestor elements.</p>
<p class="arguement"><strong>filter</strong>A string containing a selector expression to match elements against.</p>
</li>
</ul>
<p>Given a selector expression that represents a set of DOM elements, the <code>.parentsUntil()</code> method traverses through the ancestors of these elements until it reaches an element matched by the selector passed in the method's argument. The resulting jQuery object contains all of the ancestors up to but not including the one matched by the <code>.parentsUntil()</code> selector.</p><p>If the selector is not matched or is not supplied, all ancestors will be selected; in these cases it selects the same elements as the <code>.parents()</code> method does when no selector is provided.</p><p><strong>As of jQuery 1.6</strong>, A DOM node or jQuery object, instead of a selector, may be used for the first <strong>.parentsUntil()</strong> argument.</p><p>The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.</p></div>
  </d:entry>
  <d:entry id="jquery_parsejson__json___116_0" d:title="jQuery.parseJSON" d:value="jQueryparseJSON">
    <d:index d:title="jQuery.parseJSON" d:value="jQueryparseJSON"/>
    <d:index d:title="jQuery.parseJSON" d:value="parseJSON"/>
    <d:index d:title="jQuery.parseJSON( json )" d:value="jQueryparseJSON( json )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.parseJSON( json )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>Takes a well-formed JSON string and returns the resulting JavaScript object.</p><ul class="signatures"><li class="signature" id="jQuery-parseJSON-json">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.1/">1.4.1</a></span>jQuery.parseJSON( json )</h4>
<p class="arguement"><strong>json</strong>The JSON string to parse.</p>
</li></ul>
<p>Passing in a malformed JSON string may result in an exception being thrown. For example, the following are all malformed JSON strings:</p><ul>
<li>
<code>{test: 1}</code> (test does not have double quotes around it).</li>
<li>
<code>{'test': 1}</code> ('test' is using single quotes instead of double quotes).</li>
</ul>
<p>Additionally if you pass in nothing, an empty string, null, or undefined, 'null' will be returned from parseJSON. Where the browser provides a native implementation of <code>JSON.parse</code>, jQuery uses it to parse the string. For details on the JSON format, see <a href="http://json.org/">http://json.org/</a>.
</p></div>
  </d:entry>
  <d:entry id="jquery_parsexml__data___117_0" d:title="jQuery.parseXML()" d:value="jQueryparseXML()">
    <d:index d:title="jQuery.parseXML()" d:value="jQueryparseXML()"/>
    <d:index d:title="jQuery.parseXML()" d:value="parseXML()"/>
    <d:index d:title="jQuery.parseXML( data )" d:value="jQueryparseXML( data )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.parseXML( data )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#XMLDocument">XMLDocument</a></span>
</h2><p class="desc"><strong>Description: </strong>Parses a string into an XML document.</p><ul class="signatures"><li class="signature" id="jQuery-parseXML-data">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>jQuery.parseXML( data )</h4>
<p class="arguement"><strong>data</strong>a well-formed XML string to be parsed</p>
</li></ul>
<p><code>jQuery.parseXML</code> uses the native parsing function of the browser to create a valid XML Document. This document can then be passed to <code>jQuery</code> to create a typical jQuery object that can be traversed and manipulated.</p></div>
  </d:entry>
  <d:entry id="password_118_0" d:title=":password Selector" d:value="password Selector">
    <d:index d:title=":password Selector" d:value="password Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">password</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements of type password.</p>
      <p><code>$(':password')</code> is equivalent to <code>$('[type=password]')</code>. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':password')</code> is equivalent to <code>$('*:password')</code>, so <code>$('input:password')</code> should be used instead. </p>
      <ul>
        <li>Because <code>:password</code> is a jQuery extension and not part of the CSS specification, queries using <code>:password</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type="password"]</code> instead.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_position___119_0" d:title=".position()" d:value="position()">
    <d:index d:title=".position()" d:value="position()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.position()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.</p><ul class="signatures"><li class="signature" id="position"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.position()</h4></li></ul>
<p>The <code>.position()</code> method allows us to retrieve the current position of an element <em>relative to the offset parent</em>. Contrast this with <code><a href="/offset">.offset()</a></code>, which retrieves the current position <em>relative to the document</em>. When positioning a new element near another one and within the same containing DOM element, <code>.position()</code> is the more useful.</p><p>Returns an object containing the properties <code>top</code> and <code>left</code>.</p></div>
  </d:entry>
  <d:entry id="jquery_post__url____data______success_data__textstatus__jqxhr_______datatype_____120_0" d:title="jQuery.post()" d:value="jQuerypost()">
    <d:index d:title="jQuery.post()" d:value="jQuerypost()"/>
    <d:index d:title="jQuery.post()" d:value="post()"/>
    <d:index d:title="jQuery.post( url [, data] [, success(data, textStatus, jqXHR)] [, dataType] )" d:value="jQuerypost( url [, data] [, success(data, textStatus, jqXHR)] [, dataType] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.post( url [, data]  [, success(data, textStatus, jqXHR)]  [, dataType]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jqXHR">jqXHR</a></span>
</h2><p class="desc"><strong>Description: </strong>Load data from the server using a HTTP POST request.</p><ul class="signatures"><li class="signature" id="jQuery-post-url-data-successdata- textStatus- jqXHR-dataType">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.post( url [, data] [, success(data, textStatus, jqXHR)] [, dataType] )</h4>
<p class="arguement"><strong>url</strong>A string containing the URL to which the request is sent.</p>
<p class="arguement"><strong>data</strong>A map or string that is sent to the server with the request.</p>
<p class="arguement"><strong>success(data, textStatus, jqXHR)</strong>A callback function that is executed if the request succeeds.</p>
<p class="arguement"><strong>dataType</strong>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).</p>
</li></ul>
<p>This is a shorthand Ajax function, which is equivalent to:</p><pre>$.ajax({
  type: 'POST',
  url: <em>url</em>,
  data: <em>data</em>,
  success: <em>success</em>,
  dataType: <em>dataType</em>
});
</pre><p>The <code>success</code> callback function is passed the returned data, which will be an XML root element or a text string depending on the MIME type of the response. It is also passed the text status of the response.</p><p><strong>As of jQuery 1.5</strong>, the <code>success</code> callback function is also passed a <a href="http://api.jquery.com/jQuery.get/#jqxhr-object">"jqXHR" object</a> (in <strong>jQuery 1.4</strong>, it was passed the <code>XMLHttpRequest</code> object).</p><p>Most implementations will specify a success handler:</p><pre>$.post('ajax/test.html', function(data) {
  $('.result').html(data);
});
</pre><p>This example fetches the requested HTML snippet and inserts it on the page.</p><p>Pages fetched with <code>POST</code> are never cached, so the <code>cache</code> and <code>ifModified</code> options in <code><a href="/jQuery.ajaxSetup">jQuery.ajaxSetup()</a></code> have no effect on these requests.</p><h4 id="jqxhr-object">The jqXHR Object</h4><p><strong>As of jQuery 1.5</strong>, all of jQuery's Ajax methods return  a superset of the <code>XMLHTTPRequest</code> object. This jQuery XHR object, or "jqXHR," returned by <code>$.post()</code> implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see <a href="http://api.jquery.com/category/deferred-object/">Deferred object</a> for more information). For convenience and consistency with the callback names used by <code><a href="http://api.jquery.com/jQuery.ajax/">$.ajax()</a></code>, it provides <code>.error()</code>, <code>.success()</code>, and <code>.complete()</code> methods. These methods take a function argument that is called when the request terminates, and the function receives the same arguments as the correspondingly-named <code>$.ajax()</code> callback.</p><p>The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including <code>$.post()</code>, to chain multiple <code>.success()</code>, <code>.complete()</code>, and <code>.error()</code> callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</p><pre>// Assign handlers immediately after making the request,
    // and remember the jqxhr object for this request
    var jqxhr = $.post("example.php", function() {
      alert("success");
    })
    .success(function() { alert("second success"); })
    .error(function() { alert("error"); })
    .complete(function() { alert("complete"); });

    // perform other work here ...

    // Set another completion function for the request above
    jqxhr.complete(function(){ alert("second complete"); });</pre><ul>
<li>Due to browser security restrictions, most "Ajax" requests are subject to the <a title="Same Origin Policy on Wikipedia" href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a>; the request can not successfully retrieve data from a different domain, subdomain, or protocol.</li>
<li>If a request with jQuery.post() returns an error code, it will fail silently unless the script has also called the global <a href="http://api.jquery.com/ajaxError/">.ajaxError() </a> method or. As of jQuery 1.5, the <code>.error()</code> method of the <code>jqXHR</code> object returned by jQuery.post() is also available for error handling.</li>
</ul></div>
  </d:entry>
  <d:entry id="_prepend__content____content_____121_0" d:title=".prepend()" d:value="prepend()">
    <d:index d:title=".prepend()" d:value="prepend()"/>
    <d:index d:title=".prepend( content [, content] )" d:value="prepend( content [, content] )"/>
    <d:index d:title=".prepend( function(index, html) )" d:value="prepend( function(index, html) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.prepend( content [, content]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</p><ul class="signatures">
<li class="signature" id="prepend-content-content">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.prepend( content [, content] )</h4>
<p class="arguement"><strong>content</strong>DOM element, array of elements, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.</p>
<p class="arguement"><strong>content</strong>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.</p>
</li>
<li class="signature" id="prepend-functionindex- html">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.prepend( function(index, html) )</h4>
<p class="arguement"><strong>function(index, html)</strong>A function that returns an HTML string, DOM element(s), or jQuery object to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, <code>this</code> refers to the current element in the set.</p>
</li>
</ul>
<p>The <code>.prepend()</code> method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the <em>last</em> child, use <a href="http://api.jquery.com/append/"><code>.append()</code></a>). </p><p>The <code>.prepend()</code> and <code><a href="/prependTo">.prependTo()</a></code> methods perform the same task. The major difference is in the syntax—specifically, in the placement of the content and target. With<code> .prepend()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.prependTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p><p>Consider the following HTML:</p><pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>You can create content and insert it into several elements at once:</p><pre>$('.inner').prepend('&lt;p&gt;Test&lt;/p&gt;');</pre><p>Each <code>&lt;div class="inner"&gt;</code> element gets this new content:</p><pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    &lt;p&gt;Test&lt;/p&gt;
    Hello
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    &lt;p&gt;Test&lt;/p&gt;
    Goodbye
  &lt;/div&gt;
&lt;/div&gt;</pre><p>You can also select an element on the page and insert it into another:</p><pre>$('.container').prepend($('h2'));</pre><p>If <em>a single element</em> selected this way is inserted elsewhere, it will be moved into the target (<em>not cloned</em>):</p><pre>&lt;div class="container"&gt;
    &lt;h2&gt;Greetings&lt;/h2&gt;
    &lt;div class="inner"&gt;Hello&lt;/div&gt;
    &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p><strong>Important</strong>: If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p><h4 id="additional-arguments">Additional Arguments</h4><p>Similar to other content-adding methods such as <code><a href="http://api.jquery.com/append/">.append()</a></code> and <code><a href="http://api.jquery.com/before/">.before()</a></code>, <code>.prepend()</code> also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</p><p>For example, the following will insert two new <code>&lt;div&gt;</code>s and an existing <code>&lt;div&gt;</code> as the first three child nodes of the body:</p><pre>var $newdiv1 = $('&lt;div id="object1"/&gt;'),
    newdiv2 = document.createElement('div'),
    existingdiv1 = document.getElementById('foo');

$('body').prepend($newdiv1, [newdiv2, existingdiv1]);
</pre><p>Since <code>.prepend()</code> can accept any number of additional arguments, the same result can be achieved by passing in the three <code>&lt;div&gt;</code>s as three separate arguments, like so: <code>$('body').prepend($newdiv1, newdiv2, existingdiv1)</code>. The type and number of arguments will largely depend on how you collect the elements in your code.</p></div>
  </d:entry>
  <d:entry id="_prependto__target___122_0" d:title=".prependTo()" d:value="prependTo()">
    <d:index d:title=".prependTo()" d:value="prependTo()"/>
    <d:index d:title=".prependTo( target )" d:value="prependTo( target )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.prependTo( target )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Insert every element in the set of matched elements to the beginning of the target.</p><ul class="signatures"><li class="signature" id="prependTo-target">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.prependTo( target )</h4>
<p class="arguement"><strong>target</strong>A selector, element, HTML string, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.</p>
</li></ul>
<p>The <code><a href="/prepend">.prepend()</a></code> and <code>.prependTo()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .prepend()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.prependTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p><p>Consider the following HTML:</p><pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>We can create content and insert it into several elements at once:</p><pre>$('&lt;p&gt;Test&lt;/p&gt;').prependTo('.inner');</pre><p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p><pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    &lt;p&gt;Test&lt;/p&gt;
    Hello
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    &lt;p&gt;Test&lt;/p&gt;
    Goodbye
  &lt;/div&gt;
&lt;/div&gt;</pre><p>We can also select an element on the page and insert it into another:</p><pre>$('h2').prependTo($('.container'));</pre><p>If an element selected this way is inserted elsewhere, it will be moved into the target (not cloned):</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p></div>
  </d:entry>
  <d:entry id="_prev____selector_____123_0" d:title=".prev()" d:value="prev()">
    <d:index d:title=".prev()" d:value="prev()"/>
    <d:index d:title=".prev(  [selector] )" d:value="prev(  [selector] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.prev(  [selector]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the immediately preceding sibling of each element in the set of matched elements, optionally filtered by a selector.</p><ul class="signatures"><li class="signature" id="prev-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.prev(  [selector] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.prev()</code> method searches for the predecessor of each of these elements in the DOM tree and constructs a new jQuery object from the matching elements.</p><p>The method optionally accepts a selector expression of the same type that can be passed to the <code>$()</code> function. If the selector is supplied, the preceding element will be filtered by testing whether it match the selector.</p><p>Consider a page with a simple list on it:</p><pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>To select the element that comes immediately before item three:</p><pre>$('li.third-item').prev().css('background-color', 'red');</pre><p>The result of this call is a red background behind item 2. Since no selector expression is supplied, this preceding element is unequivocally included as part of the object. If one had been supplied, the element would be tested for a match before it was included.</p><p>If no previous sibling exists, or if the previous sibling element does not match a supplied selector, an empty jQuery object is returned.</p><p>To select <em>all</em> preceding sibling elements, rather than just the preceding <em>adjacent</em> sibling, use the <a href="http://api.jquery.com/prevAll/">.prevAll()</a> method.</p></div>
  </d:entry>
  <d:entry id="attributecontainsword_124_0" d:title="Attribute Contains Word Selector [name~=&quot;value&quot;]" d:value="Attribute Contains Word Selector [name~=&quot;value&quot;]">
    <d:index d:title="Attribute Contains Word Selector [name~=&quot;value&quot;]" d:value="Attribute Contains Word Selector [name~=&quot;value&quot;]"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">attributeContainsWord</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.</p><ul class="signatures"><li><dl class="arguments">
<dt>attribute</dt>
<dd>An attribute name.</dd>
<dt>value</dt>
<dd>An attribute value. Quotes are mandatory.</dd>
</dl></li></ul>
<p>This selector matches the test string against each word in the attribute value, where a "word" is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.</p></div>
  </d:entry>
  <d:entry id="_prevall____selector_____125_0" d:title=".prevAll()" d:value="prevAll()">
    <d:index d:title=".prevAll()" d:value="prevAll()"/>
    <d:index d:title=".prevAll(  [selector] )" d:value="prevAll(  [selector] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.prevAll(  [selector]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.</p><ul class="signatures"><li class="signature" id="prevAll-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.prevAll(  [selector] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.prevAll()</code> method searches through the predecessors of these elements in the DOM tree and construct a new jQuery object from the matching elements; the elements are returned in order beginning with the closest sibling.</p><p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p><p>Consider a page with a simple list on it:</p><pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>If we begin at the third item, we can find the elements which come before it:</p><pre>$('li.third-item').prevAll().css('background-color', 'red');</pre><p>The result of this call is a red background behind items 1 and 2. Since we do not supply a selector expression, these preceding elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</p></div>
  </d:entry>
  <d:entry id="_prevuntil____selector______filter_____126_0" d:title=".prevUntil()" d:value="prevUntil()">
    <d:index d:title=".prevUntil()" d:value="prevUntil()"/>
    <d:index d:title=".prevUntil(  [selector] [, filter] )" d:value="prevUntil(  [selector] [, filter] )"/>
    <d:index d:title=".prevUntil(  [element] [, filter] )" d:value="prevUntil(  [element] [, filter] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.prevUntil(  [selector]  [, filter]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.</p><ul class="signatures">
<li class="signature" id="prevUntil-selector-filter">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.prevUntil(  [selector] [, filter] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to indicate where to stop matching preceding sibling elements.</p>
<p class="arguement"><strong>filter</strong>A string containing a selector expression to match elements against.</p>
</li>
<li class="signature" id="prevUntil-element-filter">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.prevUntil(  [element] [, filter] )</h4>
<p class="arguement"><strong>element</strong>A DOM node or jQuery object indicating where to stop matching preceding sibling elements.</p>
<p class="arguement"><strong>filter</strong>A string containing a selector expression to match elements against.</p>
</li>
</ul>
<p>Given a selector expression that represents a set of DOM elements, the <code>.prevUntil()</code> method searches through the predecessors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all previous siblings up to but not including the one matched by the <code>.prevUntil()</code> selector; the elements are returned in order from the closest sibling to the farthest.</p><p>If the selector is not matched or is not supplied, all previous siblings will be selected; in these cases it selects the same elements as the <code>.prevAll()</code> method does when no filter selector is provided.</p><p><strong>As of jQuery 1.6</strong>, A DOM node or jQuery object, instead of a selector, may be used for the first <strong>.prevUntil()</strong> argument.</p><p>The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.</p></div>
  </d:entry>
  <d:entry id="_promise____type______target_____127_0" d:title=".promise()" d:value="promise()">
    <d:index d:title=".promise()" d:value="promise()"/>
    <d:index d:title=".promise(  [type] [, target] )" d:value="promise(  [type] [, target] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.promise(  [type]  [, target]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Promise">Promise</a></span>
</h2><p class="desc"><strong>Description: </strong> Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. </p><ul class="signatures"><li class="signature" id="promise-type-target">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.promise(  [type] [, target] )</h4>
<p class="arguement"><strong>type</strong> The type of queue that needs to be observed. </p>
<p class="arguement"><strong>target</strong>Object onto which the promise methods have to be attached</p>
</li></ul>
<p>The <code>.promise()</code> method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.</p><p> By default, <code>type</code> is <code>"fx"</code>, which means the returned Promise is resolved when all animations of the selected elements have completed.</p><p> Resolve context and sole argument is the collection onto which <code>.promise()</code> has been called. </p><p> If <code>target</code> is provided, <code>.promise()</code> will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.</p><blockquote><p><strong>Note: </strong>The returned Promise is linked to a Deferred object stored on the <code>.data()</code> for an element. Since the <code>.remove()</code> method removes the element's data as well as the element itself, it will prevent any of the element's unresolved Promises from resolving. If it is necessary to remove an element from the DOM before its Promise is resolved, use <code>.detach()</code> instead and follow with <code>.removeData()</code> after resolution.</p></blockquote></div>
  </d:entry>
  <d:entry id="_prop__propertyname___128_0" d:title=".prop()" d:value="prop()">
    <d:index d:title=".prop()" d:value="prop()"/>
    <d:index d:title=".prop( propertyName )" d:value="prop( propertyName )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.prop( propertyName )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the value of a property for the first element in the set of matched elements.</p><ul class="signatures"><li class="signature" id="prop-propertyName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.prop( propertyName )</h4>
<p class="arguement"><strong>propertyName</strong>The name of the property to get.</p>
</li></ul>
<p>The <code>.prop()</code> method gets the property value for only the <em>first</em> element in the matched set. It returns <code>undefined</code> for the value of a property that has not been set, or if the matched set has no elements. To get the value for each element individually, use a looping construct such as jQuery's <code>.each()</code> or <code>.map()</code> method.</p><p>The difference between <em>attributes</em> and <em>properties</em> can be important in specific situations. <strong>Before jQuery 1.6</strong>, the <code><a href="http://api.jquery.com/attr/">.attr()</a></code> method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. <strong>As of jQuery 1.6</strong>, the <code>.prop()</code> method provides a way to explicitly retrieve property values, while <code>.attr()</code> retrieves attributes.</p><p>For example, <code>selectedIndex</code>, <code>tagName</code>, <code>nodeName</code>, <code>nodeType</code>, <code>ownerDocument</code>, <code>defaultChecked</code>, and <code>defaultSelected</code> should be retrieved and set with the <code>.prop()</code> method. Prior to jQuery 1.6, these properties were retrievable with the <code>.attr()</code> method, but this was not within the scope of <code>attr</code>. These do not have corresponding attributes and are only properties.</p><p>Concerning boolean attributes, consider a DOM element defined by the HTML markup <code>&lt;input type="checkbox" checked="checked" /&gt;</code>, and assume it is in a JavaScript variable named <code>elem</code>:</p><table class="listing">
<tr>
<th><code>elem.checked</code></th>
  <td>
<code>true</code> (Boolean) Will change with checkbox state</td>
 </tr>
<tr>
<th><code>$(elem).prop("checked")</code></th>
  <td>
<code>true</code> (Boolean) Will change with checkbox state</td>
 </tr>
<tr>
<th><code>elem.getAttribute("checked")</code></th>
  <td>
<code>"checked"</code> (String) Initial state of the checkbox; does not change</td>
 </tr>
<tr>
<th>
<code>$(elem).attr("checked")</code><em>(1.6)</em>
</th>
  <td>
<code>"checked"</code> (String) Initial state of the checkbox; does not change</td>
 </tr>
<tr>
<th>
<code>$(elem).attr("checked")</code><em>(1.6.1+)</em>
</th>
  <td>
<code>"checked"</code> (String) Will change with checkbox state</td>
 </tr>
<tr>
<th>
<code>$(elem).attr("checked")</code><em>(pre-1.6)</em>
</th>
  <td>
<code>true</code> (Boolean) Changed with checkbox state</td>
 </tr>
</table>
<p>
According to the <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.4">W3C forms specification</a>, the <code>checked</code> attribute is a <em><a href="http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2">boolean attribute</a></em>, which means the corresponding property is true if the attribute is present at all—even if, for example, the attribute has no value or an empty string value. The preferred cross-browser-compatible way to determine if a checkbox is checked is to check for a "truthy" value on the element's property using one of the following:</p><ul>
<li><code>if ( elem.checked )</code></li>
    <li><code>if ( $(elem).prop("checked") )</code></li>
    <li><code>if ( $(elem).is(":checked") )</code></li>
  </ul>
<p>If using jQuery 1.6, the code <code>if ( $(elem).attr("checked") )</code> will retrieve the actual content <em>attribute</em>, which does not change as the checkbox is checked and unchecked. It is meant only to store the default or initial value of the checked property. To maintain backwards compatability, the <code>.attr()</code> method in jQuery 1.6.1+ will retrieve and update the property for you so no code for boolean attributes is required to be changed to <code>.prop()</code>.  Nevertheless, the preferred way to retrieve a checked value is with one of the options listed above. To see how this works in the latest jQuery, check/uncheck the checkbox in the example below.</p><ul><li>In Internet Explorer prior to version 9, using <code><a href="http://api.jquery.com/prop/">.prop()</a></code> to set a DOM element property to anything other than a simple primitive value (number, string, or boolean) can cause memory leaks if the property is not removed (using <a href="http://api.jquery.com/removeProp/"><code>.removeProp()</code></a>) before the DOM element is removed from the document. To safely set values on DOM objects without memory leaks, use <a href="http://api.jquery.com/data/"><code>.data()</code></a>.</li></ul></div>
  </d:entry>
  <d:entry id="_prop__propertyname__value___128_1" d:title=".prop()" d:value="prop()">
    <d:index d:title=".prop()" d:value="prop()"/>
    <d:index d:title=".prop( propertyName, value )" d:value="prop( propertyName, value )"/>
    <d:index d:title=".prop( map )" d:value="prop( map )"/>
    <d:index d:title=".prop( propertyName, function(index, oldPropertyValue) )" d:value="prop( propertyName, function(index, oldPropertyValue) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.prop( propertyName, value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set one or more properties for the set of matched elements.</p><ul class="signatures">
<li class="signature" id="prop-propertyName-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.prop( propertyName, value )</h4>
<p class="arguement"><strong>propertyName</strong>The name of the property to set.</p>
<p class="arguement"><strong>value</strong>A value to set for the property.</p>
</li>
<li class="signature" id="prop-map">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.prop( map )</h4>
<p class="arguement"><strong>map</strong>A map of property-value pairs to set.</p>
</li>
<li class="signature" id="prop-propertyName-functionindex- oldPropertyValue">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.prop( propertyName, function(index, oldPropertyValue) )</h4>
<p class="arguement"><strong>propertyName</strong>The name of the property to set.</p>
<p class="arguement"><strong>function(index, oldPropertyValue)</strong>A function returning the value to set. Receives the index position of the element in the set and the old property value as arguments. Within the function, the keyword <code>this</code> refers to the current element.</p>
</li>
</ul>
<p>The <code>.prop()</code> method is a convenient way to set the value of properties—especially when setting multiple properties, using values returned by a function, or setting values on multiple elements at once. It should be used when setting <code>selectedIndex</code>, <code>tagName</code>, <code>nodeName</code>, <code>nodeType</code>, <code>ownerDocument</code>, <code>defaultChecked</code>, or <code>defaultSelected</code>. Since jQuery 1.6, these properties can no longer be set with the <code>.attr()</code> method. They do not have corresponding attributes and are only properties.</p><p>Properties generally affect the dynamic state of a DOM element without changing the serialized HTML attribute. Examples include the <code>value</code> property of input elements, the <code>disabled</code> property of inputs and buttons, or the <code>checked</code> property of a checkbox. The <code>.prop()</code> method should be used to set disabled and checked instead of the <code><a href="http://api.jquery.com/attr">.attr()</a></code> method. The <code><a href="http://api.jquery.com/val">.val()</a></code> method should be used for getting and setting value.</p><pre>
$("input").prop("disabled", false);
$("input").prop("checked", true);
$("input").val("someValue");
</pre><p><strong>Important:</strong> the <code><a href="http://api.jquery.com/removeProp">.removeProp()</a></code> method should not be used to set these properties to false. Once a native property is removed, it cannot be added again. See <code><a href="http://api.jquery.com/removeProp">.removeProp()</a></code> for more information.</p><h4 id="computed-prop-values">Computed property values</h4><p>By using a function to set properties, you can compute the value based on other properties of the element. For example, to toggle all checkboxes based off their individual values:</p><pre>$("input[type='checkbox']").prop("checked", function( i, val ) {
  return !val;
});</pre><p><strong>Note: </strong>If nothing is returned in the setter function (ie. <code>function(index, prop){})</code>, or if <code>undefined</code> is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.</p><ul><li>In Internet Explorer prior to version 9, using <code><a href="http://api.jquery.com/prop/">.prop()</a></code> to set a DOM element property to anything other than a simple primitive value (number, string, or boolean) can cause memory leaks if the property is not removed (using <a href="http://api.jquery.com/removeProp/"><code>.removeProp()</code></a>) before the DOM element is removed from the document. To safely set values on DOM objects without memory leaks, use <a href="http://api.jquery.com/data/"><code>.data()</code></a>.</li></ul></div>
  </d:entry>
  <d:entry id="jquery_proxy__function__context___129_0" d:title="jQuery.proxy()" d:value="jQueryproxy()">
    <d:index d:title="jQuery.proxy()" d:value="jQueryproxy()"/>
    <d:index d:title="jQuery.proxy()" d:value="proxy()"/>
    <d:index d:title="jQuery.proxy( function, context )" d:value="jQueryproxy( function, context )"/>
    <d:index d:title="jQuery.proxy( context, name )" d:value="jQueryproxy( context, name )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.proxy( function, context )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Function">Function</a></span>
</h2><p class="desc"><strong>Description: </strong>Takes a function and returns a new one that will always have a particular context.</p><ul class="signatures">
<li class="signature" id="jQuery-proxy-function-context">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>jQuery.proxy( function, context )</h4>
<p class="arguement"><strong>function</strong>The function whose context will be changed.</p>
<p class="arguement"><strong>context</strong>The object to which the context (<code>this</code>) of the function should be set.</p>
</li>
<li class="signature" id="jQuery-proxy-context-name">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>jQuery.proxy( context, name )</h4>
<p class="arguement"><strong>context</strong>The object to which the context of the function should be set.</p>
<p class="arguement"><strong>name</strong>The name of the function whose context will be changed (should be a property of the <code>context</code> object).</p>
</li>
</ul>
<p>This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from <code>jQuery.proxy()</code> it will still unbind the correct function if passed the original.</p><p>Be aware, however, that jQuery's event binding subsystem assigns a unique id to each event handling function in order to track it when it is used to specify the function to be unbound. The function represented by <code>jQuery.proxy()</code> is seen as a single function by the event subsystem, even when it is used to bind different contexts. To avoid unbinding the wrong handler, use a unique event namespace for binding and unbinding (e.g., <code>"click.myproxy1"</code>) rather than specifying the proxied function during unbinding.
</p></div>
  </d:entry>
  <d:entry id="_pushstack__elements___130_0" d:title=".pushStack()" d:value="pushStack()">
    <d:index d:title=".pushStack()" d:value="pushStack()"/>
    <d:index d:title=".pushStack( elements )" d:value="pushStack( elements )"/>
    <d:index d:title=".pushStack( elements, name, arguments )" d:value="pushStack( elements, name, arguments )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.pushStack( elements )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Add a collection of DOM elements onto the jQuery stack.</p><ul class="signatures">
<li class="signature" id="pushStack-elements">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.pushStack( elements )</h4>
<p class="arguement"><strong>elements</strong>An array of elements to push onto the stack and make into a new jQuery object.</p>
</li>
<li class="signature" id="pushStack-elements-name-arguments">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>.pushStack( elements, name, arguments )</h4>
<p class="arguement"><strong>elements</strong>An array of elements to push onto the stack and make into a new jQuery object.</p>
<p class="arguement"><strong>name</strong>The name of a jQuery method that generated the array of elements.</p>
<p class="arguement"><strong>arguments</strong>The arguments that were passed in to the jQuery method (for serialization).</p>
</li>
</ul>
</div>
  </d:entry>
  <d:entry id="_queue____queuename_____131_0" d:title=".queue()" d:value="queue()">
    <d:index d:title=".queue()" d:value="queue()"/>
    <d:index d:title=".queue(  [queueName] )" d:value="queue(  [queueName] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.queue(  [queueName]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Array">Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Show the queue of functions to be executed on the matched elements.</p><ul class="signatures"><li class="signature" id="queue-queueName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.queue(  [queueName] )</h4>
<p class="arguement"><strong>queueName</strong>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</p>
</li></ul>
</div>
  </d:entry>
  <d:entry id="_queue____queuename____newqueue___131_1" d:title=".queue()" d:value="queue()">
    <d:index d:title=".queue()" d:value="queue()"/>
    <d:index d:title=".queue(  [queueName], newQueue )" d:value="queue(  [queueName], newQueue )"/>
    <d:index d:title=".queue(  [queueName], callback( next ) )" d:value="queue(  [queueName], callback( next ) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.queue(  [queueName] , newQueue )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Manipulate the queue of functions to be executed on the matched elements.</p><ul class="signatures">
<li class="signature" id="queue-queueName-newQueue">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.queue(  [queueName], newQueue )</h4>
<p class="arguement"><strong>queueName</strong>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</p>
<p class="arguement"><strong>newQueue</strong>An array of functions to replace the current queue contents.</p>
</li>
<li class="signature" id="queue-queueName-callback next ">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.queue(  [queueName], callback( next ) )</h4>
<p class="arguement"><strong>queueName</strong>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</p>
<p class="arguement"><strong>callback( next )</strong>The new function to add to the queue, with a function to call that will dequeue the next item.</p>
</li>
</ul>
<p>Every element can have one to many queues of functions attached to it by jQuery. In most applications, only one queue (called <code>fx</code>) is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution. The typical example of this is calling multiple animation methods on an element. For example:</p><pre>$('#foo').slideUp().fadeIn();</pre><p>When this statement is executed, the element begins its sliding animation immediately, but the fading transition is placed on the <code>fx</code> queue to be called only once the sliding transition is complete.</p><p>The <code>.queue()</code> method allows us to directly manipulate this queue of functions. Calling <code>.queue()</code> with a callback is particularly useful; it allows us to place a new function at the end of the queue.</p><p>This feature is similar to providing a callback function with an animation method, but does not require the callback to be given at the time the animation is performed.</p><pre>$('#foo').slideUp();
$('#foo').queue(function() {
  alert('Animation complete.');
  $(this).dequeue();
});</pre><p>This is equivalent to:</p><pre>$('#foo').slideUp(function() {
  alert('Animation complete.');
});</pre><p>Note that when adding a function with <code>.queue()</code>, we should ensure that <code>.dequeue()</code> is eventually called so that the next function in line executes.</p><p>In jQuery 1.4 the function that's called is passed in another function, as the first argument, that when called automatically dequeues the next item and keeps the queue moving. You would use it like so:</p><pre>$("#test").queue(function(next) {
    // Do some stuff...
    next();
});</pre></div>
  </d:entry>
  <d:entry id="jquery_queue__element____queuename_____132_0" d:title="jQuery.queue()" d:value="jQueryqueue()">
    <d:index d:title="jQuery.queue()" d:value="jQueryqueue()"/>
    <d:index d:title="jQuery.queue()" d:value="queue()"/>
    <d:index d:title="jQuery.queue( element [, queueName] )" d:value="jQueryqueue( element [, queueName] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.queue( element [, queueName]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Array">Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Show the queue of functions to be executed on the matched element.</p><ul class="signatures"><li class="signature" id="jQuery-queue-element-queueName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>jQuery.queue( element [, queueName] )</h4>
<p class="arguement"><strong>element</strong>A DOM element to inspect for an attached queue.</p>
<p class="arguement"><strong>queueName</strong>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</p>
</li></ul>
<p><strong>Note:</strong> This is a low-level method, you should probably use <code><a href="/queue">.queue()</a></code> instead.</p></div>
  </d:entry>
  <d:entry id="jquery_queue__element__queuename__newqueue___132_1" d:title="jQuery.queue()" d:value="jQueryqueue()">
    <d:index d:title="jQuery.queue()" d:value="jQueryqueue()"/>
    <d:index d:title="jQuery.queue()" d:value="queue()"/>
    <d:index d:title="jQuery.queue( element, queueName, newQueue )" d:value="jQueryqueue( element, queueName, newQueue )"/>
    <d:index d:title="jQuery.queue( element, queueName, callback() )" d:value="jQueryqueue( element, queueName, callback() )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.queue( element, queueName, newQueue )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Manipulate the queue of functions to be executed on the matched element.</p><ul class="signatures">
<li class="signature" id="jQuery-queue-element-queueName-newQueue">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>jQuery.queue( element, queueName, newQueue )</h4>
<p class="arguement"><strong>element</strong>A DOM element where the array of queued functions is attached.</p>
<p class="arguement"><strong>queueName</strong>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</p>
<p class="arguement"><strong>newQueue</strong>An array of functions to replace the current queue contents.</p>
</li>
<li class="signature" id="jQuery-queue-element-queueName-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>jQuery.queue( element, queueName, callback() )</h4>
<p class="arguement"><strong>element</strong>A DOM element on which to add a queued function.</p>
<p class="arguement"><strong>queueName</strong>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</p>
<p class="arguement"><strong>callback()</strong>The new function to add to the queue.</p>
</li>
</ul>
<p><strong>Note:</strong> This is a low-level method, you should probably use <code><a href="/queue">.queue()</a></code> instead.</p><p>Every element can have one or more queues of functions attached to it by jQuery. In most applications, only one queue (called <code>fx</code>) is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution.</p><p>The <code>jQuery.queue()</code> method allows us to directly manipulate this queue of functions. Calling <code>jQuery.queue()</code> with a callback is particularly useful; it allows us to place a new function at the end of the queue.</p><p>Note that when adding a function with <code>jQuery.queue()</code>, we should ensure that <code>jQuery.dequeue()</code> is eventually called so that the next function in line executes.</p></div>
  </d:entry>
  <d:entry id="radio_133_0" d:title=":radio Selector" d:value="radio Selector">
    <d:index d:title=":radio Selector" d:value="radio Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">radio</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all  elements of type radio.</p>
      <p><code>$(':radio')</code> is equivalent to <code>$('[type=radio]')</code>. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':radio')</code> is equivalent to <code>$('*:radio')</code>, so <code>$('input:radio')</code> should be used instead. </p>
      <p>To select a set of associated radio buttons, you might use: <code>$('input[name=gender]:radio')</code></p>
      <ul>
        <li>Because <code>:radio</code> is a jQuery extension and not part of the CSS specification, queries using <code>:radio</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type="radio"]</code> instead.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_ready__handler___134_0" d:title=".ready()" d:value="ready()">
    <d:index d:title=".ready()" d:value="ready()"/>
    <d:index d:title=".ready( handler )" d:value="ready( handler )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.ready( handler )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Specify a function to execute when the DOM is fully loaded.</p><ul class="signatures"><li class="signature" id="ready-handler">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.ready( handler )</h4>
<p class="arguement"><strong>handler</strong>A function to execute after the DOM is ready.</p>
</li></ul>
<p>While JavaScript provides the <code>load</code> event for executing code when a page is rendered, this event does not get triggered until all assets such as images have been completely received. In most cases, the script can be run as soon as the DOM hierarchy has been fully constructed. The handler passed to <code>.ready()</code> is guaranteed to be executed after the DOM is ready, so this is usually the best place to attach all other event handlers and run other jQuery code.  When using scripts that rely on the value of CSS style properties, it's important to reference external stylesheets or embed style elements before referencing the scripts.</p><p>In cases where code relies on loaded assets (for example, if the dimensions of an image are required), the code should be placed in a handler for the <code>load</code> event instead.</p><blockquote><p>The <code>.ready()</code> method is generally incompatible with the <code>&lt;body onload=""&gt;</code> attribute. If <code>load</code> must be used, either do not use <code>.ready()</code> or use jQuery's <code>.load()</code> method to attach <code>load</code> event handlers to the window or to more specific items, like images.
</p></blockquote><p>All three of the following syntaxes are equivalent:</p><ul>
<li><code>$(document).ready(handler)</code></li>
   <li>
<code>$().ready(handler)</code> (this is not recommended)</li>
   <li><code>$(handler)</code></li>
 </ul>
<p>There is also <code>$(document).bind("ready", handler)</code>. This behaves similarly to the ready method but with one exception: If the ready event has already fired and you try to <code>.bind("ready")</code> the bound handler will not be executed. Ready handlers bound this way are executed <em>after</em> any bound by the other three methods above.</p><p>The <code>.ready()</code> method can only be called on a jQuery object matching the current document, so the selector can be omitted.</p><p>The <code>.ready()</code> method is typically used with an anonymous function:</p><pre>$(document).ready(function() {
  // Handler for .ready() called.
});</pre><p>Which is equivalent to calling:</p><pre>$(function() {
 // Handler for .ready() called.
});</pre><p>If <code>.ready()</code> is called after the DOM has been initialized, the new handler passed in will be executed immediately.</p><h4>Aliasing the jQuery Namespace</h4><p>When using another JavaScript library, we may wish to call <code><a href="/jQuery.noConflict">$.noConflict()</a></code> to avoid namespace difficulties. When this function is called, the <code>$</code> shortcut is no longer available, forcing us to write <code>jQuery</code> each time we would normally write <code>$</code>. However, the handler passed to the <code>.ready()</code> method can take an argument, which is passed the global <code>jQuery</code> object. This means we can rename the object within the context of our <code>.ready()</code> handler without affecting other code:</p><pre>jQuery(document).ready(function($) {
  // Code using $ as usual goes here.
});</pre></div>
  </d:entry>
  <d:entry id="attributeendswith_135_0" d:title="Attribute Ends With Selector [name$=&quot;value&quot;]" d:value="Attribute Ends With Selector [name$=&quot;value&quot;]">
    <d:index d:title="Attribute Ends With Selector [name$=&quot;value&quot;]" d:value="Attribute Ends With Selector [name$=&quot;value&quot;]"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">attributeEndsWith</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.</p><ul class="signatures"><li><dl class="arguments">
<dt>attribute</dt>
<dd>An attribute name.</dd>
<dt>value</dt>
<dd>An attribute value. Quotes are mandatory.</dd>
</dl></li></ul>
</div>
  </d:entry>
  <d:entry id="_remove____selector_____136_0" d:title=".remove()" d:value="remove()">
    <d:index d:title=".remove()" d:value="remove()"/>
    <d:index d:title=".remove(  [selector] )" d:value="remove(  [selector] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.remove(  [selector]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove the set of matched elements from the DOM.</p><ul class="signatures"><li class="signature" id="remove-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.remove(  [selector] )</h4>
<p class="arguement"><strong>selector</strong>A selector expression that filters the set of matched elements to be removed.</p>
</li></ul>
<p>Similar to <code><a href="/empty">.empty()</a></code>, the <code>.remove()</code> method takes elements out of the DOM. Use <code>.remove()</code> when you want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data  associated with the elements are removed. To remove the elements without removing data and events, use <code><a href="http://api.jquery.com/detach/">.detach()</a></code> instead.</p><p>Consider the following HTML:</p><pre>&lt;div class="container"&gt;
  &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>We can target any element for removal:</p><pre>$('.hello').remove();</pre><p>This will result in a DOM structure with the <code>&lt;div&gt;</code> element deleted:</p><pre>&lt;div class="container"&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>If we had any number of nested elements inside <code>&lt;div class="hello"&gt;</code>, they would be removed, too. Other jQuery constructs such as data or event handlers are erased as well.</p><p>We can also include a selector as an optional parameter. For example, we could rewrite the previous DOM removal code as follows:</p><pre>$('div').remove('.hello');</pre><p>This would result in the same DOM structure:</p><pre>&lt;div class="container"&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre></div>
  </d:entry>
  <d:entry id="_removeattr__attributename___137_0" d:title=".removeAttr()" d:value="removeAttr()">
    <d:index d:title=".removeAttr()" d:value="removeAttr()"/>
    <d:index d:title=".removeAttr( attributeName )" d:value="removeAttr( attributeName )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.removeAttr( attributeName )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove an attribute from each element in the set of matched elements.</p><ul class="signatures"><li class="signature" id="removeAttr-attributeName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.removeAttr( attributeName )</h4>
<p class="arguement"><strong>attributeName</strong>An attribute to remove.</p>
</li></ul>
<p>The <code>.removeAttr()</code> method uses the JavaScript <code>removeAttribute()</code> function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.</p><p><strong>Note:</strong> Removing an inline <code>onclick</code> event handler using <code>.removeAttr()</code> doesn't achieve the desired effect in Internet Explorer 6, 7, or 8. To avoid potential problems, use <code>.prop()</code> instead:</p><pre>
$element.prop("onclick", null);
console.log("onclick property: ", $element[0].onclick);
</pre><p>The behavior of <code>.removeAttr()</code> may be updated to better handle this in the future. For the time being, however, setting <code>.prop("onclick", null)</code> should be considered the standard cross-browser solution.</p><p/></div>
  </d:entry>
  <d:entry id="_removeclass____classname_____138_0" d:title=".removeClass()" d:value="removeClass()">
    <d:index d:title=".removeClass()" d:value="removeClass()"/>
    <d:index d:title=".removeClass(  [className] )" d:value="removeClass(  [className] )"/>
    <d:index d:title=".removeClass( function(index, class) )" d:value="removeClass( function(index, class) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.removeClass(  [className]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</p><ul class="signatures">
<li class="signature" id="removeClass-className">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.removeClass(  [className] )</h4>
<p class="arguement"><strong>className</strong>One or more space-separated classes to be removed from the class attribute of each matched element.</p>
</li>
<li class="signature" id="removeClass-functionindex- class">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.removeClass( function(index, class) )</h4>
<p class="arguement"><strong>function(index, class)</strong>A function returning one or more space-separated class names to be removed. Receives the index position of the element in the set and the old class value as arguments.</p>
</li>
</ul>
<p>If a class name is included as a parameter, then only that class will be removed from the set of matched elements. If no class names are specified in the parameter, all classes will be removed.</p><p>More than one class may be removed at a time, separated by a space, from the set of matched elements, like so:</p><pre>$('p').removeClass('myClass yourClass')
</pre><p>This method is often used with <code>.addClass()</code> to switch elements' classes from one to another, like so:</p><pre>$('p').removeClass('myClass noClass').addClass('yourClass');
</pre><p>Here, the <code>myClass</code> and <code>noClass</code> classes are removed from all paragraphs, while <code>yourClass</code> is added.</p><p>To replace all existing classes with another class, we can use <code>.attr('class', 'newClass')</code> instead.</p><p>As of jQuery 1.4, the <code>.removeClass()</code> method allows us to indicate the class to be removed by passing in a function.</p><pre>$('li:last').removeClass(function() {
          return $(this).prev().attr('class');
        });</pre><p>This example removes the class name of the penultimate <code>&lt;li&gt;</code> from the last <code>&lt;li&gt;</code>.</p></div>
  </d:entry>
  <d:entry id="_removedata____name_____139_0" d:title=".removeData()" d:value="removeData()">
    <d:index d:title=".removeData()" d:value="removeData()"/>
    <d:index d:title=".removeData(  [name] )" d:value="removeData(  [name] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.removeData(  [name]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove a previously-stored piece of data.</p><ul class="signatures"><li class="signature" id="removeData-name">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.3/">1.2.3</a></span>.removeData(  [name] )</h4>
<p class="arguement"><strong>name</strong>A string naming the piece of data to delete.</p>
</li></ul>
<p>The <code>.removeData()</code> method allows us to remove values that were previously set using <code>.data()</code>. When called with the name of a key, <code>.removeData()</code> deletes that particular value; when called with no arguments, all values are removed.</p><p>NOTE: Starting with jQuery 1.4.3, calling <code>.removeData()</code> will cause the value of the property being removed to revert to the value of the data attribute of the same name in the DOM, rather than being set to <code>undefined</code>.</p></div>
  </d:entry>
  <d:entry id="jquery_removedata__element____name_____140_0" d:title="jQuery.removeData()" d:value="jQueryremoveData()">
    <d:index d:title="jQuery.removeData()" d:value="jQueryremoveData()"/>
    <d:index d:title="jQuery.removeData()" d:value="removeData()"/>
    <d:index d:title="jQuery.removeData( element [, name] )" d:value="jQueryremoveData( element [, name] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.removeData( element [, name]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove a previously-stored piece of data.</p><ul class="signatures"><li class="signature" id="jQuery-removeData-element-name">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.3/">1.2.3</a></span>jQuery.removeData( element [, name] )</h4>
<p class="arguement"><strong>element</strong>A DOM element from which to remove data.</p>
<p class="arguement"><strong>name</strong>A string naming the piece of data to remove.</p>
</li></ul>
<p><strong>Note:</strong> This is a low-level method, you should probably use <code><a href="/removeData">.removeData()</a></code> instead.</p><p>The <code>jQuery.removeData()</code> method allows us to remove values that were previously set using <code><a href="/jQuery.data">jQuery.data()</a></code>. When called with the name of a key, <code>jQuery.removeData()</code> deletes that particular value; when called with no arguments, all values are removed.</p></div>
  </d:entry>
  <d:entry id="_removeprop__propertyname___141_0" d:title=".removeProp()" d:value="removeProp()">
    <d:index d:title=".removeProp()" d:value="removeProp()"/>
    <d:index d:title=".removeProp( propertyName )" d:value="removeProp( propertyName )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.removeProp( propertyName )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove a property for the set of matched elements.</p><ul class="signatures"><li class="signature" id="removeProp-propertyName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.removeProp( propertyName )</h4>
<p class="arguement"><strong>propertyName</strong>The name of the property to set.</p>
</li></ul>
<p>The <code>.removeProp()</code> method removes properties set by the <code><a href="http://api.jquery.com/prop">.prop()</a></code> method.</p><p>With some built-in properties of a DOM element or <code>window</code> object, browsers may generate an error if an attempt is made to remove the property. jQuery first assigns the value <code>undefined</code> to the property and ignores any error the browser generates. In general, it is only necessary to remove custom properties that have been set on an object, and not built-in (native) properties.</p><p><strong>Note:</strong> Do not use this method to remove native properties such as checked, disabled, or selected. This will remove the property completely and, once removed, cannot be added again to element. Use <code><a href="http://api.jquery.com/prop">.prop()</a></code> to set these properties to <code>false</code> instead.</p><ul><li>In Internet Explorer prior to version 9, using <code><a href="http://api.jquery.com/prop/">.prop()</a></code> to set a DOM element property to anything other than a simple primitive value (number, string, or boolean) can cause memory leaks if the property is not removed (using <a href="http://api.jquery.com/removeProp/"><code>.removeProp()</code></a>) before the DOM element is removed from the document. To safely set values on DOM objects without memory leaks, use <a href="http://api.jquery.com/data/"><code>.data()</code></a>.</li></ul></div>
  </d:entry>
  <d:entry id="_replaceall__target___142_0" d:title=".replaceAll()" d:value="replaceAll()">
    <d:index d:title=".replaceAll()" d:value="replaceAll()"/>
    <d:index d:title=".replaceAll( target )" d:value="replaceAll( target )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.replaceAll( target )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Replace each target element with the set of matched elements.</p><ul class="signatures"><li class="signature" id="replaceAll-target">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.replaceAll( target )</h4>
<p class="arguement"><strong>target</strong>A selector expression indicating which element(s) to replace.</p>
</li></ul>
<p>The <code>.replaceAll()</code> method is corollary to <code><a href="/replaceWith">.replaceWith()</a></code>, but with the source and target reversed. Consider this DOM structure:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner first"&gt;Hello&lt;/div&gt;
  &lt;div class="inner second"&gt;And&lt;/div&gt;
  &lt;div class="inner third"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>We can create an element, then replace other elements with it:</p><pre>$('&lt;h2&gt;New heading&lt;/h2&gt;').replaceAll('.inner');</pre><p>This causes all of them to be replaced:</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
&lt;/div&gt;</pre><p>Or, we could select an element to use as the replacement:</p><pre>$('.first').replaceAll('.third');</pre><p>This results in the DOM structure:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner second"&gt;And&lt;/div&gt;
  &lt;div class="inner first"&gt;Hello&lt;/div&gt;
&lt;/div&gt;</pre><p>From this example, we can see that the selected element replaces the target by being moved from its old location, not by being cloned.</p></div>
  </d:entry>
  <d:entry id="_replacewith__newcontent___143_0" d:title=".replaceWith()" d:value="replaceWith()">
    <d:index d:title=".replaceWith()" d:value="replaceWith()"/>
    <d:index d:title=".replaceWith( newContent )" d:value="replaceWith( newContent )"/>
    <d:index d:title=".replaceWith( function )" d:value="replaceWith( function )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.replaceWith( newContent )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Replace each element in the set of matched elements with the provided new content.</p><ul class="signatures">
<li class="signature" id="replaceWith-newContent">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.replaceWith( newContent )</h4>
<p class="arguement"><strong>newContent</strong>The content to insert. May be an HTML string, DOM element, or jQuery object.</p>
</li>
<li class="signature" id="replaceWith-function">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.replaceWith( function )</h4>
<p class="arguement"><strong>function</strong>A function that returns content with which to replace the set of matched elements.</p>
</li>
</ul>
<p>The <code>.replaceWith()</code> method removes content from the DOM and inserts new content in its place with a single call. Consider this DOM structure:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner first"&gt;Hello&lt;/div&gt;
  &lt;div class="inner second"&gt;And&lt;/div&gt;
  &lt;div class="inner third"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>The second inner <code>&lt;div&gt;</code> could be replaced with the specified HTML:</p><pre>$('div.second').replaceWith('&lt;h2&gt;New heading&lt;/h2&gt;');</pre><p>This results in the structure:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner first"&gt;Hello&lt;/div&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
  &lt;div class="inner third"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p><em>All</em> inner <code>&lt;div&gt;</code> elements could be targeted at once:</p><pre>$('div.inner').replaceWith('&lt;h2&gt;New heading&lt;/h2&gt;');</pre><p>This causes all of them to be replaced:</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
  &lt;h2&gt;New heading&lt;/h2&gt;
&lt;/div&gt;</pre><p>An element could also be selected as the replacement:</p><pre>$('div.third').replaceWith($('.first'));</pre><p>This results in the DOM structure:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner second"&gt;And&lt;/div&gt;
  &lt;div class="inner first"&gt;Hello&lt;/div&gt;
&lt;/div&gt;</pre><p>This example demonstrates that the selected element replaces the target by being moved from its old location, not by being cloned.</p><p>The <code>.replaceWith()</code> method, like most jQuery methods, returns the jQuery object so that other methods can be chained onto it. However, it must be noted that the <em>original</em> jQuery object is returned. This object refers to the element that has been removed from the DOM, not the new element that has replaced it.</p><p>As of jQuery 1.4, <code>.replaceWith()</code> can also work on disconnected DOM nodes. For example, with the following code, <code>.replaceWith()</code> returns a jQuery set containing only a paragraph.:</p><pre>$("&lt;div/&gt;").replaceWith("&lt;p&gt;&lt;/p&gt;");</pre><p>The <code>.replaceWith()</code> method can also take a function as its argument:</p><pre>$('div.container').replaceWith(function() {
  return $(this).contents();
});</pre><p>This results in <code>&lt;div class="container"&gt;</code> being replaced by its three child <code>&lt;div&gt;</code>s. The return value of the function may be an HTML string, DOM element, or jQuery object.</p></div>
  </d:entry>
  <d:entry id="reset_144_0" d:title=":reset Selector" d:value="reset Selector">
    <d:index d:title=":reset Selector" d:value="reset Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">reset</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements of type reset.</p>
      <p><code>:reset</code> is equivalent to <code>[type="reset"]</code></p>
      <ul>
        <li>Because <code>:reset</code> is a jQuery extension and not part of the CSS specification, queries using <code>:reset</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type="reset"]</code> instead.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_resize__handler_eventobject____145_0" d:title=".resize()" d:value="resize()">
    <d:index d:title=".resize()" d:value="resize()"/>
    <d:index d:title=".resize( handler(eventObject) )" d:value="resize( handler(eventObject) )"/>
    <d:index d:title=".resize(  [eventData], handler(eventObject) )" d:value="resize(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.resize( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "resize" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="resize-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.resize( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="resize-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.resize(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="resize"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.resize()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('resize', handler)</code> in the first and second variations, and <code>.trigger('resize')</code> in the third.</p><p>The <code>resize</code> event is sent to the <code>window</code> element when the size of the browser window changes:</p><pre>$(window).resize(function() {
  $('#log').append('&lt;div&gt;Handler for .resize() called.&lt;/div&gt;');
});
</pre><p>Now whenever the browser window's size is changed, the message is appended to &lt;div id="log"&gt; one or more times, depending on the browser.</p><p>Code in a <code>resize</code> handler should never rely on the number of times the handler is called. Depending on implementation, <code>resize</code> events can be sent continuously as the resizing is in progress (the typical behavior in Internet Explorer and WebKit-based browsers such as Safari and Chrome), or only once at the end of the resize operation (the typical behavior in some other browsers such as Opera).</p></div>
  </d:entry>
  <d:entry id="attributeequals_146_0" d:title="Attribute Equals Selector [name=&quot;value&quot;]" d:value="Attribute Equals Selector [name=&quot;value&quot;]">
    <d:index d:title="Attribute Equals Selector [name=&quot;value&quot;]" d:value="Attribute Equals Selector [name=&quot;value&quot;]"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">attributeEquals</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects elements that have the specified attribute with a value exactly equal to a certain value.</p><ul class="signatures"><li><dl class="arguments">
<dt>attribute</dt>
<dd>An attribute name.</dd>
<dt>value</dt>
<dd>An attribute value. <strong>Quotes are mandatory.</strong>
</dd>
</dl></li></ul>
</div>
  </d:entry>
  <d:entry id="_scroll__handler_eventobject____147_0" d:title=".scroll()" d:value="scroll()">
    <d:index d:title=".scroll()" d:value="scroll()"/>
    <d:index d:title=".scroll( handler(eventObject) )" d:value="scroll( handler(eventObject) )"/>
    <d:index d:title=".scroll(  [eventData], handler(eventObject) )" d:value="scroll(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.scroll( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "scroll" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="scroll-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.scroll( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="scroll-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.scroll(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="scroll"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.scroll()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('scroll', handler)</code> in the first and second variations, and <code>.trigger('scroll')</code> in the third.</p><p>The <code>scroll</code> event is sent to an element when the user scrolls to a different place in the element. It applies to <code>window</code> objects, but also to scrollable frames and elements with the <code>overflow </code>CSS property set to <code>scroll</code> (or <code>auto</code> when the element's explicit height or width is less than the height or width of its contents).</p><p>For example, consider the HTML:</p><pre>&lt;div id="target" style="overflow: scroll; width: 200px; height: 100px;"&gt;
  Lorem ipsum dolor sit amet, consectetur adipisicing elit,
  sed do eiusmod tempor incididunt ut labore et dolore magna
  aliqua. Ut enim ad minim veniam, quis nostrud exercitation
  ullamco laboris nisi ut aliquip ex ea commodo consequat.
  Duis aute irure dolor in reprehenderit in voluptate velit
  esse cillum dolore eu fugiat nulla pariatur. Excepteur
  sint occaecat cupidatat non proident, sunt in culpa qui
  officia deserunt mollit anim id est laborum.
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
&lt;div id="log"&gt;&lt;/div&gt;</pre><p>The style definition is present to make the target element small enough to be scrollable:</p><p class="image"><img src="/images/0042_05_11.png" alt=""/></p><p>The <code>scroll</code> event handler can be bound to this element:</p><pre>$('#target').scroll(function() {
  $('#log').append('&lt;div&gt;Handler for .scroll() called.&lt;/div&gt;');
});</pre><p>Now when the user scrolls the text up or down, one or more messages are appended to <code>&lt;div id="log"&gt;&lt;/div&gt;</code>:</p><p><span class="output">Handler for .scroll() called.</span></p><p>To trigger the event manually, apply <code>.scroll()</code> without an argument:</p><pre>$('#other').click(function() {
  $('#target').scroll();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also append the message.</p><p>A <code>scroll</code> event is sent whenever the element's scroll position changes, regardless of the cause. A mouse click or drag on the scroll bar, dragging inside the element, pressing the arrow keys, or using the mouse's scroll wheel could cause this event.</p></div>
  </d:entry>
  <d:entry id="_scrollleft___148_0" d:title=".scrollLeft()" d:value="scrollLeft()">
    <d:index d:title=".scrollLeft()" d:value="scrollLeft()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.scrollLeft()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Integer">Integer</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current horizontal position of the scroll bar for the first element in the set of matched elements.</p><ul class="signatures"><li class="signature" id="scrollLeft"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.6/">1.2.6</a></span>.scrollLeft()</h4></li></ul>
<p>The horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very left, or if the element is not scrollable, this number will be <code>0</code>.</p><blockquote><p><strong>Note:</strong> <code>.scrollLeft()</code>, when called directly or animated as a property using <code>.animate()</code> will not work if the element(s) it is being applied to are hidden.</p></blockquote></div>
  </d:entry>
  <d:entry id="_scrollleft__value___148_1" d:title=".scrollLeft()" d:value="scrollLeft()">
    <d:index d:title=".scrollLeft()" d:value="scrollLeft()"/>
    <d:index d:title=".scrollLeft( value )" d:value="scrollLeft( value )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.scrollLeft( value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set the current horizontal position of the scroll bar for each of the set of matched elements.</p><ul class="signatures"><li class="signature" id="scrollLeft-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.6/">1.2.6</a></span>.scrollLeft( value )</h4>
<p class="arguement"><strong>value</strong>An integer indicating the new position to set the scroll bar to.</p>
</li></ul>
<p>The horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the <code>scrollLeft</code> positions the horizontal scroll of each matched element.</p></div>
  </d:entry>
  <d:entry id="_scrolltop___149_0" d:title=".scrollTop()" d:value="scrollTop()">
    <d:index d:title=".scrollTop()" d:value="scrollTop()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.scrollTop()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Integer">Integer</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current vertical position of the scroll bar for the first element in the set of matched elements.</p><ul class="signatures"><li class="signature" id="scrollTop"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.6/">1.2.6</a></span>.scrollTop()</h4></li></ul>
<p>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very top, or if the element is not scrollable, this number will be <code>0</code>.</p></div>
  </d:entry>
  <d:entry id="_scrolltop__value___149_1" d:title=".scrollTop()" d:value="scrollTop()">
    <d:index d:title=".scrollTop()" d:value="scrollTop()"/>
    <d:index d:title=".scrollTop( value )" d:value="scrollTop( value )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.scrollTop( value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set the current vertical position of the scroll bar for each of the set of matched elements.</p><ul class="signatures"><li class="signature" id="scrollTop-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.6/">1.2.6</a></span>.scrollTop( value )</h4>
<p class="arguement"><strong>value</strong>An integer indicating the new position to set the scroll bar to.</p>
</li></ul>
<p>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the <code>scrollTop</code> positions the vertical scroll of each matched element.</p></div>
  </d:entry>
  <d:entry id="_select__handler_eventobject____150_0" d:title=".select()" d:value="select()">
    <d:index d:title=".select()" d:value="select()"/>
    <d:index d:title=".select( handler(eventObject) )" d:value="select( handler(eventObject) )"/>
    <d:index d:title=".select(  [eventData], handler(eventObject) )" d:value="select(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.select( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "select" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="select-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.select( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="select-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.select(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="select"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.select()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('select', handler)</code> in the first two variations, and <code>.trigger('select')</code> in the third.</p><p>The <code>select</code> event is sent to an element when the user makes a text selection inside it. This event is limited to <code>&lt;input type="text"&gt;</code> fields and <code>&lt;textarea&gt;</code> boxes.</p><p>For example, consider the HTML:</p><pre>&lt;form&gt;
  &lt;input id="target" type="text" value="Hello there" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre><p>The event handler can be bound to the text input:</p><pre>$('#target').select(function() {
  alert('Handler for .select() called.');
});</pre><p>Now when any portion of the text is selected, the alert is displayed. Merely setting the location of the insertion point will not trigger the event. To trigger the event manually, apply <code>.select()</code> without an argument:</p><pre>$('#other').click(function() {
  $('#target').select();
});</pre><p>After this code executes, clicks on the Trigger button will also alert the message:</p><p><span class="output">Handler for .select() called.</span></p><p>In addition, the default <code>select</code> action on the field will be fired, so the entire text field will be selected.</p><blockquote><p>The method for retrieving the current selected text differs from one browser to another. A number of jQuery plug-ins offer cross-platform solutions.</p></blockquote></div>
  </d:entry>
  <d:entry id="selected_151_0" d:title=":selected Selector" d:value="selected Selector">
    <d:index d:title=":selected Selector" d:value="selected Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">selected</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements that are selected.</p>
      <p>The <code>:selected</code> selector works for <code>&lt;option&gt;</code> elements. It does not work for checkboxes or radio inputs; use <code>:checked</code> for them.</p>
      <ul>
        <li>Because <code>:selected</code> is a jQuery extension and not part of the CSS specification, queries using <code>:selected</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:selected</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":selected")</code></a>.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_serialize___152_0" d:title=".serialize()" d:value="serialize()">
    <d:index d:title=".serialize()" d:value="serialize()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.serialize()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>Encode a set of form elements as a string for submission.</p><ul class="signatures"><li class="signature" id="serialize"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.serialize()</h4></li></ul>
<p>The <code>.serialize()</code> method creates a text string in standard URL-encoded notation. It operates on a jQuery object representing a set of form elements. The form elements can be of several types:</p><pre>&lt;form&gt;
  &lt;div&gt;&lt;input type="text" name="a" value="1" id="a" /&gt;&lt;/div&gt;
  &lt;div&gt;&lt;input type="text" name="b" value="2" id="b" /&gt;&lt;/div&gt;
  &lt;div&gt;&lt;input type="hidden" name="c" value="3" id="c" /&gt;&lt;/div&gt;
  &lt;div&gt;
    &lt;textarea name="d" rows="8" cols="40"&gt;4&lt;/textarea&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;select name="e"&gt;
    &lt;option value="5" selected="selected"&gt;5&lt;/option&gt;
    &lt;option value="6"&gt;6&lt;/option&gt;
    &lt;option value="7"&gt;7&lt;/option&gt;
  &lt;/select&gt;&lt;/div&gt;
  &lt;div&gt;
    &lt;input type="checkbox" name="f" value="8" id="f" /&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;input type="submit" name="g" value="Submit" id="g" /&gt;
  &lt;/div&gt;
&lt;/form&gt;</pre><p>The <code>.serialize()</code> method can act on a jQuery object that has selected individual form elements, such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code>. However, it is typically easier to select the <code>&lt;form&gt;</code> tag itself for serialization:</p><pre>$('form').submit(function() {
  alert($(this).serialize());
  return false;
});</pre><p>This produces a standard-looking query string:</p><pre>a=1&amp;b=2&amp;c=3&amp;d=4&amp;e=5</pre><p><strong>Warning:</strong> selecting both the form and its children will cause duplicates in the serialized string.</p><p>Note: Only <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2">"successful controls"</a> are serialized to the string. No submit button value is serialized since the form was not submitted using a button. For a form element's value to be included in the serialized string, the element must have a <code>name</code> attribute. Values from checkboxes and radio buttons (<code>input</code>s of type "radio" or "checkbox") are included only if they are checked. Data from file select elements is not serialized.</p></div>
  </d:entry>
  <d:entry id="_serializearray___153_0" d:title=".serializeArray()" d:value="serializeArray()">
    <d:index d:title=".serializeArray()" d:value="serializeArray()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.serializeArray()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Array">Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Encode a set of form elements as an array of names and values.</p><ul class="signatures"><li class="signature" id="serializeArray"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.serializeArray()</h4></li></ul>
<p>The <code>.serializeArray()</code> method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery object representing a set of form elements. The form elements can be of several types:</p><pre>&lt;form&gt;
  &lt;div&gt;&lt;input type="text" name="a" value="1" id="a" /&gt;&lt;/div&gt;
  &lt;div&gt;&lt;input type="text" name="b" value="2" id="b" /&gt;&lt;/div&gt;
  &lt;div&gt;&lt;input type="hidden" name="c" value="3" id="c" /&gt;&lt;/div&gt;
  &lt;div&gt;
    &lt;textarea name="d" rows="8" cols="40"&gt;4&lt;/textarea&gt;
  &lt;/div&gt;
  &lt;div&gt;&lt;select name="e"&gt;
    &lt;option value="5" selected="selected"&gt;5&lt;/option&gt;
    &lt;option value="6"&gt;6&lt;/option&gt;
    &lt;option value="7"&gt;7&lt;/option&gt;
  &lt;/select&gt;&lt;/div&gt;
  &lt;div&gt;
    &lt;input type="checkbox" name="f" value="8" id="f" /&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;input type="submit" name="g" value="Submit" id="g" /&gt;
  &lt;/div&gt;
&lt;/form&gt;</pre><p>The <code>.serializeArray()</code> method uses the standard W3C rules for <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2">successful controls</a> to determine which elements it should include; in particular the element cannot be disabled and must contain a <code>name</code> attribute. No submit button value is serialized since the form was not submitted using a button. Data from file select elements is not serialized.</p><p>This method can act on a jQuery object that has selected individual form elements, such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code>. However, it is typically easier to select the <code>&lt;form&gt;</code> tag itself for serialization:</p><pre>$('form').submit(function() {
  console.log($(this).serializeArray());
  return false;
});</pre><p>This produces the following data structure (provided that the browser supports <code>console.log</code>):</p><pre>[
  {
    name: "a",
    value: "1"
  },
  {
    name: "b",
    value: "2"
  },
  {
    name: "c",
    value: "3"
  },
  {
    name: "d",
    value: "4"
  },
  {
    name: "e",
    value: "5"
  }
]</pre></div>
  </d:entry>
  <d:entry id="_show_____154_0" d:title=".show()" d:value="show()">
    <d:index d:title=".show()" d:value="show()"/>
    <d:index d:title=".show( duration [, callback] )" d:value="show( duration [, callback] )"/>
    <d:index d:title=".show(  [duration] [, easing] [, callback] )" d:value="show(  [duration] [, easing] [, callback] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.show(  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Display the matched elements.</p><ul class="signatures">
<li class="signature" id="show"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.show()</h4></li>
<li class="signature" id="show-duration-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.show( duration [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="show-duration-easing-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.show(  [duration] [, easing] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
</ul>
<p>With no parameters, the <code>.show()</code> method is the simplest way to display an element:
</p><pre>$('.target').show();
</pre><p>The matched elements will be revealed immediately, with no animation. This is roughly equivalent to calling <code>.css('display', 'block')</code>, except that the <code>display</code> property is restored to whatever it was initially. If an element has a <code>display</code> value of <code>inline</code>, then is hidden and shown, it will once again be displayed <code>inline</code>.</p><p><strong>Note: </strong> If using !important in your styles, such as
<code>display: none !important</code>,
it is necessary to override the style using <code>.css('display', 'block !important')</code> should you wish for <code>.show()</code> to function correctly.</p><p>When a duration is provided, <code>.show()</code> becomes an animation method. The <code>.show()</code> method animates the width, height, and opacity of the matched elements simultaneously.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p><p>As of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com">jQuery UI suite</a>.</p><p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p><p>We can animate any element, such as a simple image:</p><pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;
With the element initially hidden, we can show it slowly:
$('#clickme').click(function() {
  $('#book').show('slow', function() {
    // Animation complete.
  });
});</pre><p class="image four-across">
  <img src="/images/0042_06_01.png" alt=""/><img src="/images/0042_06_02.png" alt=""/><img src="/images/0042_06_03.png" alt=""/><img src="/images/0042_06_04.png" alt=""/></p><ul><li>All jQuery effects, including <code>.show()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li></ul></div>
  </d:entry>
  <d:entry id="_siblings____selector_____155_0" d:title=".siblings()" d:value="siblings()">
    <d:index d:title=".siblings()" d:value="siblings()"/>
    <d:index d:title=".siblings(  [selector] )" d:value="siblings(  [selector] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.siblings(  [selector]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the siblings of each element in the set of matched elements, optionally filtered by a selector.</p><ul class="signatures"><li class="signature" id="siblings-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.siblings(  [selector] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.siblings()</code> method allows us to search through the siblings of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p><p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p><p>Consider a page with a simple list on it:</p><pre>
&lt;ul&gt;
   &lt;li&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="third-item"&gt;list item 3&lt;/li&gt;
   &lt;li&gt;list item 4&lt;/li&gt;
   &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>If we begin at the third item, we can find its siblings:</p><pre>$('li.third-item').siblings().css('background-color', 'red');</pre><p>The result of this call is a red background behind items 1, 2, 4, and 5. Since we do not supply a selector expression, all of the siblings are part of the object. If we had supplied one, only the matching items among these four would be included.</p><p>The original element is not included among the siblings, which is important to remember when we wish to find all elements at a particular level of the DOM tree.</p></div>
  </d:entry>
  <d:entry id="_size___156_0" d:title=".size()" d:value="size()">
    <d:index d:title=".size()" d:value="size()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.size()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Number">Number</a></span>
</h2><p class="desc"><strong>Description: </strong>Return the number of elements in the jQuery object.</p><ul class="signatures"><li class="signature" id="size"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.size()</h4></li></ul>
<p>The <code>.size()</code> method is functionally equivalent to the <code><a href="http://api.jquery.com/length/">.length</a></code> property; however, <strong>the <code>.length</code> property is preferred</strong> because it does not have the overhead of a function call.</p><p>Given a simple unordered list on the page:</p><pre>
&lt;ul&gt;
  &lt;li&gt;foo&lt;/li&gt;
  &lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
</pre><p>Both <code>.size()</code> and <code>.length</code> identify the number of items:</p><pre>alert( "Size: " + $("li").size() );
alert( "Size: " + $("li").length );</pre><p>This results in two alerts:</p><p><span class="output">Size: 2</span></p><p><span class="output">Size: 2</span></p></div>
  </d:entry>
  <d:entry id="attributenotequal_157_0" d:title="Attribute Not Equal Selector [name!=&quot;value&quot;]" d:value="Attribute Not Equal Selector [name!=&quot;value&quot;]">
    <d:index d:title="Attribute Not Equal Selector [name!=&quot;value&quot;]" d:value="Attribute Not Equal Selector [name!=&quot;value&quot;]"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">attributeNotEqual</span>  selector</h2><p class="desc"><strong>Description: </strong>Select elements that either don't have the specified attribute, or do have the specified attribute but not with a certain value.</p><ul class="signatures"><li><dl class="arguments">
<dt>attribute</dt>
<dd>An attribute name.</dd>
<dt>value</dt>
<dd>An attribute value. Quotes are mandatory.</dd>
</dl></li></ul>
<p>This selector is equivalent to <code>:not([attr="value"])</code>.</p><ul><li>Because <code>[name!="value"]</code> is a jQuery extension and not part of the CSS specification, queries using <code>[name!="value"]</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>$("your-pure-css-selector").not('[name="value"]')</code> instead.</li></ul></div>
  </d:entry>
  <d:entry id="_slice__start____end_____158_0" d:title=".slice()" d:value="slice()">
    <d:index d:title=".slice()" d:value="slice()"/>
    <d:index d:title=".slice( start [, end] )" d:value="slice( start [, end] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.slice( start [, end]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Reduce the set of matched elements to a subset specified by a range of indices.</p><ul class="signatures"><li class="signature" id="slice-start-end">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1.4/">1.1.4</a></span>.slice( start [, end] )</h4>
<p class="arguement"><strong>start</strong>An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.</p>
<p class="arguement"><strong>end</strong>An integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.</p>
</li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.slice()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied <code>start</code> index identifies the position of one of the elements in the set; if <code>end</code> is omitted, all elements after this one will be included in the result.</p><p>Consider a page with a simple list on it:</p><pre>
&lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list item 2&lt;/li&gt;
  &lt;li&gt;list item 3&lt;/li&gt;
  &lt;li&gt;list item 4&lt;/li&gt;
  &lt;li&gt;list item 5&lt;/li&gt;
&lt;/ul&gt;
</pre><p>We can apply this method to the set of list items:</p><pre>$('li').slice(2).css('background-color', 'red');</pre><p>The result of this call is a red background for items 3, 4, and 5. Note that the supplied index is zero-based, and refers to the position of elements within the jQuery object, not within the DOM tree.</p><p>The end parameter allows us to limit the selected range even further. For example:</p><pre>$('li').slice(2, 4).css('background-color', 'red');</pre><p>Now only items 3 and 4 are selected. The index is once again zero-based; the range extends up to but not including the specified index.</p><h4>Negative Indices</h4><p>The jQuery <code>.slice()</code> method is patterned after the JavaScript .slice() method for arrays. One of the features that it mimics is the ability for negative numbers to be passed as either the <code>start</code> or <code>end</code> parameter. If a negative number is provided, this indicates a position starting from the end of the set, rather than the beginning. For example:</p><pre>$('li').slice(-2, -1).css('background-color', 'red');</pre><p>This time only list item 4 is turned red, since it is the only item in the range between two from the end (<code>-2</code>) and one from the end (<code>-1</code>).</p></div>
  </d:entry>
  <d:entry id="_slidedown____duration______callback_____159_0" d:title=".slideDown()" d:value="slideDown()">
    <d:index d:title=".slideDown()" d:value="slideDown()"/>
    <d:index d:title=".slideDown(  [duration] [, callback] )" d:value="slideDown(  [duration] [, callback] )"/>
    <d:index d:title=".slideDown(  [duration] [, easing] [, callback] )" d:value="slideDown(  [duration] [, easing] [, callback] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.slideDown(  [duration]  [, callback]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Display the matched elements with a sliding motion.</p><ul class="signatures">
<li class="signature" id="slideDown-duration-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.slideDown(  [duration] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="slideDown-duration-easing-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.slideDown(  [duration] [, easing] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
</ul>
<p>The <code>.slideDown()</code> method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of  <code>400</code> milliseconds is used.</p><p>We can animate any element, such as a simple image:</p><pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;</pre><p>With the element initially hidden, we can show it slowly:</p><pre>$('#clickme').click(function() {
  $('#book').slideDown('slow', function() {
    // Animation complete.
  });
});</pre><p class="image four-across"> 
<img src="/images/0042_06_17.png" alt=""/><img src="/images/0042_06_18.png" alt=""/><img src="/images/0042_06_19.png" alt=""/><img src="/images/0042_06_20.png" alt=""/></p><h4 id="easing">Easing</h4><p><strong>As of jQuery 1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com">jQuery UI suite</a>.</p><h4 id="callback-function">Callback Function</h4><p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p><p><strong>As of jQuery 1.6</strong>, the <code><a href="http://api.jquery.com/promise/">.promise()</a></code> method can be used in conjunction with the <code><a href="http://api.jquery.com/deferred.done/">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href="http://api.jquery.com/promise/#example-1">example for .promise()</a> ).  </p><ul><li>All jQuery effects, including <code>.slideDown()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li>
<li>Because of the nature of <a href="https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame"><code>requestAnimationFrame()</code></a>, you should never queue animations using a <code>setInterval</code> or <code>setTimeout</code> loop. In order to preserve CPU resources, browsers that support <code>requestAnimationFrame</code> will not update animations when the window/tab is not displayed. If you continue to queue animations via <code>setInterval</code> or <code>setTimeout</code> while animation is paused, all of the queued animations will begin playing when the window/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements <a href="http://api.jquery.com/queue"><code>.queue()</code></a> to set the timeout to start the next animation.&#13;
</li>
</ul></div>
  </d:entry>
  <d:entry id="_slidetoggle____duration______callback_____160_0" d:title=".slideToggle()" d:value="slideToggle()">
    <d:index d:title=".slideToggle()" d:value="slideToggle()"/>
    <d:index d:title=".slideToggle(  [duration] [, callback] )" d:value="slideToggle(  [duration] [, callback] )"/>
    <d:index d:title=".slideToggle(  [duration] [, easing] [, callback] )" d:value="slideToggle(  [duration] [, easing] [, callback] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.slideToggle(  [duration]  [, callback]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Display or hide the matched elements with a sliding motion.</p><ul class="signatures">
<li class="signature" id="slideToggle-duration-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.slideToggle(  [duration] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="slideToggle-duration-easing-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.slideToggle(  [duration] [, easing] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
</ul>
<p>The <code>.slideToggle()</code> method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The <code>display</code> property is saved and restored as needed. If an element has a <code>display</code> value of <code>inline</code>, then is hidden and shown, it will once again be displayed <code>inline</code>. When the height reaches 0 after a hiding animation, the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p><p>We can animate any element, such as a simple image:</p><pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;</pre><p>We will cause <code>.slideToggle()</code> to be called when another element is clicked:</p><pre>$('#clickme').click(function() {
  $('#book').slideToggle('slow', function() {
    // Animation complete.
  });
});
</pre><p>With the element initially shown, we can hide it slowly with the first click:</p><p class="image four-across"> 
    <img src="/images/0042_06_25.png" alt=""/><img src="/images/0042_06_26.png" alt=""/><img src="/images/0042_06_27.png" alt=""/><img src="/images/0042_06_28.png" alt=""/></p><p>A second click will show the element once again:</p><p class="image four-across"> 
    <img src="/images/0042_06_29.png" alt=""/><img src="/images/0042_06_30.png" alt=""/><img src="/images/0042_06_31.png" alt=""/><img src="/images/0042_06_32.png" alt=""/></p><h4 id="easing">Easing</h4><p><strong>As of jQuery 1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com">jQuery UI suite</a>.</p><h4 id="callback-function">Callback Function</h4><p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p><p><strong>As of jQuery 1.6</strong>, the <code><a href="http://api.jquery.com/promise/">.promise()</a></code> method can be used in conjunction with the <code><a href="http://api.jquery.com/deferred.done/">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href="http://api.jquery.com/promise/#example-1">example for .promise()</a> ).  </p><ul><li>All jQuery effects, including <code>.slideToggle()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li>
<li>Because of the nature of <a href="https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame"><code>requestAnimationFrame()</code></a>, you should never queue animations using a <code>setInterval</code> or <code>setTimeout</code> loop. In order to preserve CPU resources, browsers that support <code>requestAnimationFrame</code> will not update animations when the window/tab is not displayed. If you continue to queue animations via <code>setInterval</code> or <code>setTimeout</code> while animation is paused, all of the queued animations will begin playing when the window/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements <a href="http://api.jquery.com/queue"><code>.queue()</code></a> to set the timeout to start the next animation.&#13;
</li>
</ul></div>
  </d:entry>
  <d:entry id="_slideup____duration______callback_____161_0" d:title=".slideUp()" d:value="slideUp()">
    <d:index d:title=".slideUp()" d:value="slideUp()"/>
    <d:index d:title=".slideUp(  [duration] [, callback] )" d:value="slideUp(  [duration] [, callback] )"/>
    <d:index d:title=".slideUp(  [duration] [, easing] [, callback] )" d:value="slideUp(  [duration] [, easing] [, callback] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.slideUp(  [duration]  [, callback]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Hide the matched elements with a sliding motion.</p><ul class="signatures">
<li class="signature" id="slideUp-duration-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.slideUp(  [duration] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="slideUp-duration-easing-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.slideUp(  [duration] [, easing] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
</ul>
<p>The <code>.slideUp()</code> method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0, the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of  <code>400</code> milliseconds is used.</p><p>We can animate any element, such as a simple image:</p><pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;</pre><p>With the element initially shown, we can hide it slowly:</p><pre>$('#clickme').click(function() {
  $('#book').slideUp('slow', function() {
    // Animation complete.
  });
});
  </pre><p class="image four-across"> 
  <img src="/images/0042_06_21.png" alt=""/><img src="/images/0042_06_22.png" alt=""/><img src="/images/0042_06_23.png" alt=""/><img src="/images/0042_06_24.png" alt=""/></p><h4 id="easing">Easing</h4><p><strong>As of jQuery 1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com">jQuery UI suite</a>.</p><h4 id="callback-function">Callback Function</h4><p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p><p><strong>As of jQuery 1.6</strong>, the <code><a href="http://api.jquery.com/promise/">.promise()</a></code> method can be used in conjunction with the <code><a href="http://api.jquery.com/deferred.done/">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href="http://api.jquery.com/promise/#example-1">example for .promise()</a> ).  </p><ul><li>All jQuery effects, including <code>.slideUp()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li>
<li>Because of the nature of <a href="https://developer.mozilla.org/en/DOM/window.mozRequestAnimationFrame"><code>requestAnimationFrame()</code></a>, you should never queue animations using a <code>setInterval</code> or <code>setTimeout</code> loop. In order to preserve CPU resources, browsers that support <code>requestAnimationFrame</code> will not update animations when the window/tab is not displayed. If you continue to queue animations via <code>setInterval</code> or <code>setTimeout</code> while animation is paused, all of the queued animations will begin playing when the window/tab regains focus. To avoid this potential problem, use the callback of your last animation in the loop, or append a function to the elements <a href="http://api.jquery.com/queue"><code>.queue()</code></a> to set the timeout to start the next animation.&#13;
</li>
</ul></div>
  </d:entry>
  <d:entry id="_stop____clearqueue______jumptoend_____162_0" d:title=".stop()" d:value="stop()">
    <d:index d:title=".stop()" d:value="stop()"/>
    <d:index d:title=".stop(  [clearQueue] [, jumpToEnd] )" d:value="stop(  [clearQueue] [, jumpToEnd] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.stop(  [clearQueue]  [, jumpToEnd]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Stop the currently-running animation on the matched elements.</p><ul class="signatures"><li class="signature" id="stop-clearQueue-jumpToEnd">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.stop(  [clearQueue] [, jumpToEnd] )</h4>
<p class="arguement"><strong>clearQueue</strong>A Boolean indicating whether to remove queued animation as well. Defaults to <code>false</code>.</p>
<p class="arguement"><strong>jumpToEnd</strong>A Boolean indicating whether to complete the current animation immediately. Defaults to <code>false</code>.</p>
</li></ul>
<p>When <code>.stop()</code> is called on an element, the currently-running animation (if any) is immediately stopped. If, for instance, an element is being hidden with <code>.slideUp()</code> when <code>.stop()</code> is called, the element will now still be displayed, but will be a fraction of its previous height. Callback functions are not called.</p><p>If more than one animation method is called on the same element, the later animations are placed in the effects queue for the element. These animations will not begin until the first one completes. When <code>.stop()</code> is called, the next animation in the queue begins immediately. If the <code>clearQueue</code> parameter is provided with a value of <code>true</code>, then the rest of the animations in the queue are removed and never run.</p><p>If the <code>jumpToEnd</code> property is provided with a value of <code>true</code>, the current animation stops, but the element is immediately given its target values for each CSS property. In our above <code>.slideUp()</code> example, the element would be immediately hidden. The callback function is then immediately called, if provided.</p><p>The usefulness of the <code>.stop()</code> method is evident when we need to animate an element on <code>mouseenter</code> and <code>mouseleave</code>:</p><pre>&lt;div id="hoverme"&gt;
  Hover me
  &lt;img id="hoverme" src="book.png" alt="" width="100" height="123" /&gt;
&lt;/div&gt;</pre><p>We can create a nice fade effect without the common problem of multiple queued animations by adding <code>.stop(true, true)</code> to the chain:</p><pre>$('#hoverme-stop-2').hover(function() {
  $(this).find('img').stop(true, true).fadeOut();
}, function() {
  $(this).find('img').stop(true, true).fadeIn();
});</pre><blockquote><p>Animations may be stopped globally by setting the property <code>$.fx.off</code> to <code>true</code>. When this is done, all animation methods will immediately set elements to their final state when called, rather than displaying an effect.</p></blockquote></div>
  </d:entry>
  <d:entry id="jquery_sub___163_0" d:title="jQuery.sub()" d:value="jQuerysub()">
    <d:index d:title="jQuery.sub()" d:value="jQuerysub()"/>
    <d:index d:title="jQuery.sub()" d:value="sub()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.sub()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.</p><ul class="signatures"><li class="signature" id="jQuery-sub"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>jQuery.sub()</h4></li></ul>
<p>There are two specific use cases for which jQuery.sub() was created. The first was for providing a painless way of overriding jQuery methods without completely destroying the original methods and another was for helping to do encapsulation and basic namespacing for jQuery plugins.</p><p>Note that jQuery.sub() doesn't attempt to do any sort of isolation - that's not its intention. All the methods on the sub'd version of jQuery will still point to the original jQuery (events bound and triggered will still be through the main jQuery, data will be bound to elements through the main jQuery, Ajax queries and events will run through the main jQuery, etc.).</p><p>Note that if you're looking to use this for plugin development you should first <i>strongly</i> consider using something like the jQuery UI widget factory which manages both state and plugin sub-methods. <a href="http://blog.nemikor.com/2010/05/15/building-stateful-jquery-plugins/">Some examples of using the jQuery UI widget factory</a> to build a plugin.</p><p>The particular use cases of this method can be best described through some examples.</p></div>
  </d:entry>
  <d:entry id="_submit__handler_eventobject____164_0" d:title=".submit()" d:value="submit()">
    <d:index d:title=".submit()" d:value="submit()"/>
    <d:index d:title=".submit( handler(eventObject) )" d:value="submit( handler(eventObject) )"/>
    <d:index d:title=".submit(  [eventData], handler(eventObject) )" d:value="submit(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.submit( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "submit" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="submit-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.submit( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="submit-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.submit(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="submit"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.submit()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('submit', handler)</code> in the first variation, and <code>.trigger('submit')</code> in the third.</p><p>The <code>submit</code> event is sent to an element when the user is attempting to submit a form. It can only be attached to <code>&lt;form&gt;</code> elements. Forms can be submitted either by clicking an explicit <code>&lt;input type="submit"&gt;</code>, <code>&lt;input type="image"&gt;</code>, or <code>&lt;button type="submit"&gt;</code>, or by pressing <kbd>Enter</kbd> when certain form elements have focus.</p><blockquote><p>Depending on the browser, the Enter key may only cause a form submission if the form has exactly one text field, or only when there is a submit button present. The interface should not rely on a particular behavior for this key unless the issue is forced by observing the keypress event for presses of the Enter key.</p></blockquote><p>For example, consider the HTML:</p><pre>&lt;form id="target" action="destination.html"&gt;
  &lt;input type="text" value="Hello there" /&gt;
  &lt;input type="submit" value="Go" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre><p>The event handler can be bound to the form:</p><pre>$('#target').submit(function() {
  alert('Handler for .submit() called.');
  return false;
});</pre><p>Now when the form is submitted, the message is alerted. This happens prior to the actual submission, so we can cancel the submit action by calling <code>.preventDefault()</code> on the event object or by returning <code>false</code> from our handler. We can trigger the event manually when another element is clicked:</p><pre>$('#other').click(function() {
  $('#target').submit();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also display the message. In addition, the default <code>submit</code> action on the form will be fired, so the form will be submitted.</p><p>The JavaScript <code>submit</code> event does not bubble in Internet Explorer. However, scripts that rely on event delegation with the <code>submit</code> event will work consistently across browsers as of jQuery 1.4, which has normalized the event's behavior. </p><ul><li>Forms and their child elements should not use input names or ids that conflict with properties of a form, such as <code>submit</code>, <code>length</code>, or <code>method</code>. Name conflicts can cause confusing failures. For a complete list of rules and to check your markup for these problems, see <a href="http://kangax.github.com/domlint/">DOMLint</a>. 
</li></ul></div>
  </d:entry>
  <d:entry id="submit_165_0" d:title=":submit Selector" d:value="submit Selector">
    <d:index d:title=":submit Selector" d:value="submit Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">submit</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements of type submit.</p>
      <p>The <code>:submit</code> selector typically applies to button or input elements. Note that some browsers treat <code>&lt;button&gt;</code> element as <code>type="default"</code> implicitly while others (such as Internet Explorer) do not.  </p>
      <ul>
        <li>Because <code>:submit</code> is a jQuery extension and not part of the CSS specification, queries using <code>:submit</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type="submit"]</code> instead.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="jquery_support_166_0" d:title="jQuery.support" d:value="jQuerysupport">
    <d:index d:title="jQuery.support" d:value="jQuerysupport"/>
    <d:index d:title="jQuery.support" d:value="support"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.support</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>A collection of properties that represent the presence of different browser features or bugs.</p><ul class="signatures"><li class="signature" id="jQuery-support"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>jQuery.support</h4></li></ul>
<p>Rather than using <code>$.browser</code> to detect the current user agent and alter the page presentation based on which browser is running, it is a good practice to perform <strong>feature detection</strong>. This means that prior to executing code which relies on a browser feature, we test to ensure that the feature works properly. To make this process simpler, jQuery performs many such tests and makes the results available to us as properties of the <code>jQuery.support</code> object.</p><p>The values of all the support properties are determined using feature detection (and do not use any form of browser sniffing). </p><blockquote>
    <p>Following are a few resources that explain how feature detection works:</p>
    <ul>
<li><a href="http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting">http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting</a></li>
      <li><a href="http://www.jibbering.com/faq/faq_notes/not_browser_detect.html">http://www.jibbering.com/faq/faq_notes/not_browser_detect.html</a></li>
      <li><a href="http://yura.thinkweb2.com/cft/">http://yura.thinkweb2.com/cft/</a></li>
    </ul>
</blockquote><p>While jQuery includes a number of properties, developers should feel free to add their own as their needs dictate. Many of the <code>jQuery.support</code> properties are rather low-level, so they are most useful for plugin and jQuery core development, rather than general day-to-day development. Since jQuery requires these tests internally, they must be performed on <em>every</em> page load; for that reason this list is kept short and limited to features needed by jQuery itself.</p><p>The tests included in <code>jQuery.support</code> are as follows:</p><ul>
<li>
<code>ajax</code> is equal to true if a browser is able to create an <code>XMLHttpRequest</code> object.</li>
<li>
<code>boxModel</code> is equal to true if the page is rendering according to the <a href="http://www.w3.org/TR/REC-CSS2/box.html">W3C CSS Box Model</a> (is currently false in IE 6 and 7 when they are in Quirks Mode). This property is null until document ready occurs.</li>
<li>
<code>changeBubbles</code> is equal to true if the change event bubbles up the DOM tree, as required by the <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-htmlevents">W3C DOM event model</a>. (It is currently false in IE, and jQuery simulates bubbling).</li>
<li>
<code>checkClone</code> is equal to true if a browser correctly clones the checked state of radio buttons or checkboxes in document fragments.</li>
<li>
<code>checkOn</code> is equal to true if the value of a checkbox defaults to "on" when no value is specified.</li>
<li>
<code>cors</code> is equal to true if a browser can create an <code>XMLHttpRequest</code> object and if that <code>XMLHttpRequest</code> object has a <code>withCredentials</code> property. To enable cross-domain requests in environments that do not support cors yet but do allow cross-domain <abbr title="XMLHttpRequest">XHR</abbr> requests (windows gadget, etc), set <code>$.support.cors = true;</code>.
<a href="http://www.w3.org/TR/cors/">CORS WD</a>
</li>
<li>
<code>cssFloat</code> is equal to true if the name of the property containing the CSS float value is .cssFloat, as defined in the <a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties-cssFloat">CSS Spec</a>. (It is currently false in IE, it uses styleFloat instead).</li>
<li>
<code>hrefNormalized</code> is equal to true if the <code>.getAttribute()</code> method retrieves the <code>href</code> attribute of elements unchanged, rather than normalizing it to a fully-qualified URL. (It is currently false in IE, the URLs are normalized).
  <div><a href="http://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-666EE0F9">DOM l3 spec</a></div>
</li>
<li>
<code>htmlSerialize</code> is equal to true  if the browser is able to serialize/insert <code>&lt;link&gt;</code> elements using the <code>.innerHTML</code> property of elements. (is currently false in IE). <div><a href="http://www.w3.org/TR/2008/WD-html5-20080610/serializing.html#html-fragment">HTML5 WD</a></div>
</li>
<li>
<code>leadingWhitespace</code> is equal to true if the browser inserts content with .innerHTML exactly as provided—specifically, if leading whitespace characters are preserved. (It is currently false in IE 6-8). <div><a href="http://www.w3.org/TR/2008/WD-html5-20080610/dom.html#innerhtml0">HTML5 WD</a></div>
</li>
<li>
<code>noCloneChecked</code> is equal to true if cloned DOM elements copy over the state of the <code>.checked</code> expando. (It is currently false in IE). (Added in jQuery 1.5.1)</li>
<li>
<code>noCloneEvent</code> is equal to true  if cloned DOM elements are created without event handlers (that is, if the event handlers on the source element are not cloned). (It is currently false in IE). <div><a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-Registration-interfaces-h3">DOM l2 spec</a></div>
</li>
<li>
<code>opacity</code> is equal to true if a browser can properly interpret the opacity style property. (It is currently false in IE, it uses alpha filters instead). <div><a href="http://www.w3.org/TR/css3-color/#transparency">CSS3 spec</a></div>
</li>
<li>
<code>optDisabled</code> is equal to true if option elements within disabled select elements are not automatically marked as disabled. <div><a href="http://dev.w3.org/html5/spec/the-button-element.html#attr-option-disabled">HTML5 WD</a></div>
</li>
<li>
<code>optSelected</code> is equal to true if an <code>&lt;option&gt;</code> element that is selected by default has a working <code>selected</code> property. <div><a href="http://dev.w3.org/html5/spec/the-button-element.html#attr-option-selected">HTML5 WD</a></div>
</li>
<li>
<code>scriptEval()</code> is equal to true if inline scripts are automatically evaluated and executed when inserted into the document using standard DOM manipulation methods such as <code>.appendChild()</code> and <code>.createTextNode()</code>. (It is currently false in IE, it uses <code>.text</code> to insert executable scripts). 
<div>
<strong>Note: No longer supported; removed in jQuery 1.6. Prior to jQuery 1.5.1</strong>, the <code>scriptEval()</code> method was the static <code>scriptEval</code> property. The change to a method allowed the test to be deferred until first use to prevent content security policy inline-script violations. </div>
<div><a href="http://www.w3.org/TR/2008/WD-html5-20080610/tabular.html#script">HTML5 WD</a></div>
</li>
<li>
<code>style</code> is equal to true if inline styles for an element can be accessed through the DOM attribute called style, as required by the DOM Level 2 specification. In this case, <code>.getAttribute('style')</code> can retrieve this value; in Internet Explorer, <code>.cssText</code> is used for this purpose. <div><a href="http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-ElementCSSInlineStyle">DOM l2 Style spec</a></div>
</li>
<li>
<code>submitBubbles</code> is equal to true if the submit event bubbles up the DOM tree, as required by the <a href="http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-htmlevents">W3C DOM event model</a>. (It is currently false in IE, and jQuery simulates bubbling).</li>
<li>
<code>tbody</code> is equal to true if an empty <code>&lt;table&gt;</code> element can exist without a <code>&lt;tbody&gt;</code> element. According to the HTML specification, this sub-element is optional, so the property should be true in a fully-compliant browser. If false, we must account for the possibility of the browser injecting <code>&lt;tbody&gt;</code> tags implicitly. (It is currently false in IE, which automatically inserts <code>tbody</code> if it is not present in a string assigned to <code>innerHTML</code>). <div><a href="http://dev.w3.org/html5/spec/Overview.html#the-table-element">HTML5 spec</a></div>
</li>
</ul></div>
  </d:entry>
  <d:entry id="_text___167_0" d:title=".text()" d:value="text()">
    <d:index d:title=".text()" d:value="text()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.text()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the combined text contents of each element in the set of matched elements, including their descendants.</p><ul class="signatures"><li class="signature" id="text"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.text()</h4></li></ul>
<p>Unlike the <code>.html()</code> method, <code>.text()</code> can be used in both XML and HTML documents. The result of the <code>.text()</code> method is a string containing the combined text of all matched elements. (Due to variations in the HTML parsers in different browsers, the text returned may vary in newlines and other white space.) Consider the following HTML:</p><pre>&lt;div class="demo-container"&gt;
  &lt;div class="demo-box"&gt;Demonstration Box&lt;/div&gt;
  &lt;ul&gt;
  &lt;li&gt;list item 1&lt;/li&gt;
  &lt;li&gt;list &lt;strong&gt;item&lt;/strong&gt; 2&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/div&gt;
</pre><p>The code <code>$('div.demo-container').text()</code> would produce the following result:</p><p>
        <code>Demonstration Box list item 1 list item 2</code>
      </p><p>The <code>.text()</code> method cannot be used on form inputs or scripts.  To set or get the text value of <code>input</code> or <code>textarea</code> elements, use the <a href="/val"><code>.val()</code></a> method. To get the value of a script element, use the <a href="/html"><code>.html()</code></a> method.</p><p>As of jQuery 1.4, the <code>.text()</code> method returns the value of text and CDATA nodes as well as element nodes.</p></div>
  </d:entry>
  <d:entry id="_text__textstring___167_1" d:title=".text()" d:value="text()">
    <d:index d:title=".text()" d:value="text()"/>
    <d:index d:title=".text( textString )" d:value="text( textString )"/>
    <d:index d:title=".text( function(index, text) )" d:value="text( function(index, text) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.text( textString )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set the content of each element in the set of matched elements to the specified text.</p><ul class="signatures">
<li class="signature" id="text-textString">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.text( textString )</h4>
<p class="arguement"><strong>textString</strong>A string of text to set as the content of each matched element.</p>
</li>
<li class="signature" id="text-functionindex- text">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.text( function(index, text) )</h4>
<p class="arguement"><strong>function(index, text)</strong>A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments.</p>
</li>
</ul>
<p>Unlike the <code>.html()</code> method, <code>.text()</code> can be used in both XML and HTML documents. </p><p>We need to be aware that this method escapes the string provided as necessary so that it will render correctly in HTML. To do so, it calls the DOM method <code>.createTextNode()</code>, which replaces special characters with their HTML entity equivalents (such as <code>&amp;lt;</code> for <code>&lt;</code>).  Consider the following HTML:</p><pre>&lt;div class="demo-container"&gt;
  &lt;div class="demo-box"&gt;Demonstration Box&lt;/div&gt;
  &lt;ul&gt;
    &lt;li&gt;list item 1&lt;/li&gt;
    &lt;li&gt;list &lt;strong&gt;item&lt;/strong&gt; 2&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</pre><p>The code <code>$('div.demo-container').text('&lt;p&gt;This is a test.&lt;/p&gt;');</code> will produce the following DOM output:</p><pre>&lt;div class="demo-container"&gt;
&amp;lt;p&amp;gt;This is a test.&amp;lt;/p&amp;gt;
&lt;/div&gt;</pre><p>It will appear on a rendered page as though the tags were exposed, like this:</p><pre>&lt;p&gt;This is a test&lt;/p&gt;</pre><p>The <code>.text()</code> method cannot be used on input elements.  For input field text, use the <a href="/val">.val()</a> method.</p><p>As of jQuery 1.4, the <code>.text()</code> method allows us to set the text content by passing in a function.</p><pre>$('ul li').text(function(index) {
  return 'item number ' + (index + 1);
});</pre><p>Given an unordered list with three <code>&lt;li&gt;</code> elements, this example will produce the following DOM output:</p><pre>&lt;ul&gt;
  &lt;li&gt;item number 1&lt;/li&gt;
  &lt;li&gt;item number 2&lt;/li&gt;
  &lt;li&gt;item number 3&lt;/li&gt;
&lt;/ul&gt;
</pre></div>
  </d:entry>
  <d:entry id="attributestartswith_168_0" d:title="Attribute Starts With Selector [name^=&quot;value&quot;]" d:value="Attribute Starts With Selector [name^=&quot;value&quot;]">
    <d:index d:title="Attribute Starts With Selector [name^=&quot;value&quot;]" d:value="Attribute Starts With Selector [name^=&quot;value&quot;]"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">attributeStartsWith</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects elements that have the specified attribute with a value beginning exactly with a given string.</p><ul class="signatures"><li><dl class="arguments">
<dt>attribute</dt>
<dd>An attribute name.</dd>
<dt>value</dt>
<dd>An attribute value. Quotes are mandatory.</dd>
</dl></li></ul>
<p>This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.</p></div>
  </d:entry>
  <d:entry id="text_169_0" d:title=":text Selector" d:value="text Selector">
    <d:index d:title=":text Selector" d:value="text Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">text</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements of type text.</p>
      <p><code>$(':text')</code> is equivalent to <code>$('[type=text]')</code> and thus selects all <code>&lt;input type="text"&gt;</code> elements. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':text')</code> is equivalent to <code>$('*:text')</code>, so <code>$('input:text')</code> should be used instead. </p>
      <p><strong>Note:</strong> As of jQuery 1.5.2, <code>:text</code> selects <code>input</code> elements that have no specified <code>type</code> attribute (in which case <code>type="text"</code> is implied).  </p>
      <ul>
        <li>Because <code>:text</code> is a jQuery extension and not part of the CSS specification, queries using <code>:text</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type="text"]</code> instead.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_toarray___170_0" d:title=".toArray()" d:value="toArray()">
    <d:index d:title=".toArray()" d:value="toArray()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.toArray()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Array">Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Retrieve all the DOM elements contained in the jQuery set, as an array.</p><ul class="signatures"><li class="signature" id="toArray"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.toArray()</h4></li></ul>
<p><code>.toArray()</code> returns all of the elements in the jQuery set:</p><pre>alert($('li').toArray());</pre><p>All of the matched DOM nodes are returned by this call, contained in a standard array:</p><p><span class="result">[&lt;li id="foo"&gt;, &lt;li id="bar"&gt;]</span></p></div>
  </d:entry>
  <d:entry id="_toggle____duration______callback_____171_0" d:title=".toggle()" d:value="toggle()">
    <d:index d:title=".toggle()" d:value="toggle()"/>
    <d:index d:title=".toggle(  [duration] [, callback] )" d:value="toggle(  [duration] [, callback] )"/>
    <d:index d:title=".toggle(  [duration] [, easing] [, callback] )" d:value="toggle(  [duration] [, easing] [, callback] )"/>
    <d:index d:title=".toggle( showOrHide )" d:value="toggle( showOrHide )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.toggle(  [duration]  [, callback]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Display or hide the matched elements.</p><ul class="signatures">
<li class="signature" id="toggle-duration-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.toggle(  [duration] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="toggle-duration-easing-callback">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.toggle(  [duration] [, easing] [, callback] )</h4>
<p class="arguement"><strong>duration</strong>A string or number determining how long the animation will run.</p>
<p class="arguement"><strong>easing</strong>A string indicating which easing function to use for the transition.</p>
<p class="arguement"><strong>callback</strong>A function to call once the animation is complete.</p>
</li>
<li class="signature" id="toggle-showOrHide">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>.toggle( showOrHide )</h4>
<p class="arguement"><strong>showOrHide</strong>A Boolean indicating whether to show or hide the elements.</p>
</li>
</ul>
<p>With no parameters, the <code>.toggle()</code> method simply toggles the visibility of elements:</p><pre>$('.target').toggle();
</pre><p>The matched elements will be revealed or hidden immediately, with no animation, by changing the CSS <code>display</code> property. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The <code>display</code> property is saved and restored as needed. If an element has a <code>display</code> value of <code>inline</code>, then is hidden and shown, it will once again be displayed <code>inline</code>.</p><p>When a duration is provided, <code>.toggle()</code> becomes an animation method. The <code>.toggle()</code> method animates the width, height, and opacity of the matched elements simultaneously. When these properties reach 0 after a hiding animation, the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p><blockquote><p>Note: The event handling suite also has a method named <a href="http://api.jquery.com/toggle-event/">.toggle()</a>. Which one is fired depends on the set of arguments passed.</p></blockquote><p>As of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href="http://jqueryui.com">jQuery UI suite</a>.</p><p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p><p>We can animate any element, such as a simple image:</p><pre>&lt;div id="clickme"&gt;
  Click here
&lt;/div&gt;
&lt;img id="book" src="book.png" alt="" width="100" height="123" /&gt;
</pre><p>We will cause <code>.toggle()</code> to be called when another element is clicked:</p><pre>$('#clickme').click(function() {
  $('#book').toggle('slow', function() {
    // Animation complete.
  });
});
</pre><p>With the element initially shown, we can hide it slowly with the first click:
</p><p class="image four-across"> 
<img src="/images/0042_06_09.png" alt=""/><img src="/images/0042_06_10.png" alt=""/><img src="/images/0042_06_11.png" alt=""/><img src="/images/0042_06_12.png" alt=""/></p><p>A second click will show the element once again:</p><p class="image four-across"><img src="/images/0042_06_13.png" alt=""/><img src="/images/0042_06_14.png" alt=""/><img src="/images/0042_06_15.png" alt=""/><img src="/images/0042_06_16.png" alt=""/></p><p>The second version of the method accepts a Boolean parameter. If this parameter is <code>true</code>, then the matched elements are shown; if <code>false</code>, the elements are hidden. In essence, the statement:
</p><pre>$('#foo').toggle(showOrHide);</pre><p>is equivalent to:</p><pre>if ( showOrHide == true ) {
  $('#foo').show();
} else if ( showOrHide == false ) {
  $('#foo').hide();
}
</pre><ul><li>All jQuery effects, including <code>.toggle()</code>, can be turned off globally by setting  <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href="http://api.jquery.com/jquery.fx.off">jQuery.fx.off</a>.</li></ul></div>
  </d:entry>
  <d:entry id="_toggle__handler_eventobject___handler_eventobject_____handler_eventobject______172_0" d:title=".toggle()" d:value="toggle()">
    <d:index d:title=".toggle()" d:value="toggle()"/>
    <d:index d:title=".toggle( handler(eventObject), handler(eventObject) [, handler(eventObject)] )" d:value="toggle( handler(eventObject), handler(eventObject) [, handler(eventObject)] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.toggle( handler(eventObject), handler(eventObject) [, handler(eventObject)]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind two or more handlers to the matched elements, to be executed on alternate clicks.</p><ul class="signatures"><li class="signature" id="toggle-handlereventObject-handlereventObject-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.toggle( handler(eventObject), handler(eventObject) [, handler(eventObject)] )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute every even time the element is clicked.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute every odd time the element is clicked.</p>
<p class="arguement"><strong>handler(eventObject)</strong>Additional handlers to cycle through after clicks.</p>
</li></ul>
<p>The <code>.toggle()</code> method binds a handler for the <code>click</code> event, so the rules outlined for the triggering of <code>click</code> apply here as well.</p><pre>For example, consider the HTML:
&lt;div id="target"&gt;
  Click here
&lt;/div&gt;</pre><p class="image"><img src="/images/0042_05_05.png" alt=""/></p><p>Event handlers can then be bound to the <code>&lt;div&gt;</code>:</p><pre>$('#target').toggle(function() {
  alert('First handler for .toggle() called.');
}, function() {
  alert('Second handler for .toggle() called.');
});</pre><p>As the element is clicked repeatedly, the messages alternate:</p><p>
  <span class="output">First handler for .toggle() called.</span><br/><span class="output">Second handler for .toggle() called.</span><br/><span class="output">First handler for .toggle() called.</span><br/><span class="output">Second handler for .toggle() called.</span><br/><span class="output">First handler for .toggle() called.</span>
</p><p>If more than two handlers are provided, <code>.toggle()</code> will cycle among all of them. For example, if there are three handlers, then the first handler will be called on the first click, the fourth click, the seventh click, and so on.</p><blockquote><p>Note: jQuery also provides an animation method named <a href="http://api.jquery.com/toggle/">.toggle()</a> that toggles the visibility of elements. Whether the animation or the event method is fired depends on the set of arguments passed.</p></blockquote><p>The <code>.toggle()</code> method is provided for convenience. It is relatively straightforward to implement the same behavior by hand, and this can be necessary if the assumptions built into <code>.toggle()</code> prove limiting. For example, <code>.toggle()</code> is not guaranteed to work correctly if applied twice to the same element. Since <code>.toggle()</code> internally uses a <code>click</code> handler to do its work, we must unbind <code>click</code> to remove a behavior attached with <code>.toggle()</code>, so other <code>click</code> handlers can be caught in the crossfire. The implementation also calls <code>.preventDefault()</code> on the event, so links will not be followed and buttons will not be clicked if <code>.toggle()</code> has been called on the element.</p></div>
  </d:entry>
  <d:entry id="_toggleclass__classname___173_0" d:title=".toggleClass()" d:value="toggleClass()">
    <d:index d:title=".toggleClass()" d:value="toggleClass()"/>
    <d:index d:title=".toggleClass( className )" d:value="toggleClass( className )"/>
    <d:index d:title=".toggleClass( className, switch )" d:value="toggleClass( className, switch )"/>
    <d:index d:title=".toggleClass(  [switch] )" d:value="toggleClass(  [switch] )"/>
    <d:index d:title=".toggleClass( function(index, class, switch) [, switch] )" d:value="toggleClass( function(index, class, switch) [, switch] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.toggleClass( className )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the switch argument.</p><ul class="signatures">
<li class="signature" id="toggleClass-className">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.toggleClass( className )</h4>
<p class="arguement"><strong>className</strong>One or more class names (separated by spaces) to be toggled for each element in the matched set.</p>
</li>
<li class="signature" id="toggleClass-className-switch">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>.toggleClass( className, switch )</h4>
<p class="arguement"><strong>className</strong>One or more class names (separated by spaces) to be toggled for each element in the matched set.</p>
<p class="arguement"><strong>switch</strong>A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.</p>
</li>
<li class="signature" id="toggleClass-switch">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.toggleClass(  [switch] )</h4>
<p class="arguement"><strong>switch</strong>A boolean value to determine whether the class should be added or removed.</p>
</li>
<li class="signature" id="toggleClass-functionindex- class- switch-switch">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.toggleClass( function(index, class, switch) [, switch] )</h4>
<p class="arguement"><strong>function(index, class, switch)</strong>A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the switch as arguments.</p>
<p class="arguement"><strong>switch</strong>A boolean value to determine whether the class should be added or removed.</p>
</li>
</ul>
<p>This method takes one or more class names as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply <code>.toggleClass()</code> to a simple <code>&lt;div&gt;</code>: </p><pre>&lt;div class="tumble"&gt;Some text.&lt;/div&gt;
      </pre><p>The first time we apply <code>$('div.tumble').toggleClass('bounce')</code>, we get the following:</p><pre>&lt;div class="tumble bounce"&gt;Some text.&lt;/div&gt;
      </pre><p>The second time we apply <code>$('div.tumble').toggleClass('bounce')</code>, the <code>&lt;div&gt;</code> class is returned to the single <code>tumble</code> value:</p><pre>&lt;div class="tumble"&gt;Some text.&lt;/div&gt;</pre><p>Applying <code>.toggleClass('bounce spin')</code> to the same <code>&lt;div&gt;</code> alternates between <code>&lt;div class="tumble bounce spin"&gt;</code> and <code>&lt;div class="tumble"&gt;</code>.</p><p>The second version of <code>.toggleClass()</code> uses the second parameter for determining whether the class should be added or removed. If this parameter's value is <code>true</code>, then the class is added; if <code>false</code>, the class is removed. In essence, the statement:</p><pre>$('#foo').toggleClass(className, addOrRemove);</pre><p>is equivalent to:</p><pre>if (addOrRemove) {
    $('#foo').addClass(className);
  }
  else {
    $('#foo').removeClass(className);
  }
  </pre><p><strong>As of jQuery 1.4</strong>, if no arguments are passed to <code>.toggleClass()</code>, all class names on the element the first time <code>.toggleClass()</code> is called will be toggled. Also as of jQuery 1.4, the class name to be toggled can be determined by passing in a function.</p><pre>$('div.foo').toggleClass(function() {
  if ($(this).parent().is('.bar')) {
    return 'happy';
  } else {
    return 'sad';
  }
});</pre><p>This example will toggle the <code>happy</code> class for <code>&lt;div class="foo"&gt;</code> elements if their parent element has a class of <code>bar</code>; otherwise, it will toggle the <code>sad</code> class.</p></div>
  </d:entry>
  <d:entry id="_trigger__eventtype__extraparameters___174_0" d:title=".trigger()" d:value="trigger()">
    <d:index d:title=".trigger()" d:value="trigger()"/>
    <d:index d:title=".trigger( eventType, extraParameters )" d:value="trigger( eventType, extraParameters )"/>
    <d:index d:title=".trigger( event )" d:value="trigger( event )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.trigger( eventType, extraParameters )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Execute all handlers and behaviors attached to the matched elements for the given event type.</p><ul class="signatures">
<li class="signature" id="trigger-eventType-extraParameters">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.trigger( eventType, extraParameters )</h4>
<p class="arguement"><strong>eventType</strong>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</p>
<p class="arguement"><strong>extraParameters</strong>Additional parameters to pass along to the event handler.</p>
</li>
<li class="signature" id="trigger-event">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>.trigger( event )</h4>
<p class="arguement"><strong>event</strong>A <a href="http://api.jquery.com/category/events/event-object/"><code>jQuery.Event</code></a> object.</p>
</li>
</ul>
<p>Any event handlers attached with <code>.bind()</code> or one of its shortcut methods are triggered when the corresponding event occurs. They can be fired manually, however, with the <code>.trigger()</code> method. A call to <code>.trigger()</code> executes the handlers in the same order they would be if the event were triggered naturally by the user:</p><pre>$('#foo').bind('click', function() {
      alert($(this).text());
    });
    $('#foo').trigger('click');</pre><p>As of jQuery 1.3, <code>.trigger()</code>ed events bubble up the DOM tree; an event handler can stop the bubbling by returning <code>false</code> from the handler or calling the <a href="http://api.jquery.com/event.stopPropagation/"><code>.stopPropagation()</code></a> method on the event object passed into the event. Although <code>.trigger()</code> simulates an event activation, complete with a synthesized event object, it does not perfectly replicate a naturally-occurring event.</p><p>To trigger handlers bound via jQuery without also triggering the native event, use <a href="http://api.jquery.com/triggerHandler/"><code>.triggerHandler()</code></a> instead. </p><p>When we define a custom event type using the <code>.bind()</code> method, the second argument to <code>.trigger()</code> can become useful. For example, suppose we have bound a handler for the <code>custom</code> event to our element instead of the built-in <code>click</code> event as we did above:</p><pre>$('#foo').bind('custom', function(event, param1, param2) {
  alert(param1 + "\n" + param2);
});
$('#foo').trigger('custom', ['Custom', 'Event']);
</pre><p>The event object is always passed as the first parameter to an event handler, but if additional parameters are specified during a <code>.trigger()</code> call, these parameters will be passed along to the handler as well. To pass more than one parameter, use an array as shown here. As of jQuery 1.6.2, a single parameter can be passed without using an array.</p><p>Note the difference between the extra parameters we're passing here and the <code>eventData</code> parameter to the <a href="/bind/">.bind()</a> method. Both are mechanisms for passing information to an event handler, but the <code>extraParameters</code> argument to <code>.trigger()</code> allows information to be determined at the time the event is triggered, while the <code>eventData</code> argument to <code>.bind()</code> requires the information to be already computed at the time the handler is bound.</p></div>
  </d:entry>
  <d:entry id="_triggerhandler__eventtype__extraparameters___175_0" d:title=".triggerHandler()" d:value="triggerHandler()">
    <d:index d:title=".triggerHandler()" d:value="triggerHandler()"/>
    <d:index d:title=".triggerHandler( eventType, extraParameters )" d:value="triggerHandler( eventType, extraParameters )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.triggerHandler( eventType, extraParameters )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>Execute all handlers attached to an element for an event.</p><ul class="signatures"><li class="signature" id="triggerHandler-eventType-extraParameters">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.triggerHandler( eventType, extraParameters )</h4>
<p class="arguement"><strong>eventType</strong>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</p>
<p class="arguement"><strong>extraParameters</strong>An array of additional parameters to pass along to the event handler.</p>
</li></ul>
<p>The <code>.triggerHandler()</code> method behaves similarly to <code>.trigger()</code>, with the following exceptions:</p><ul>
<li>The <code>.triggerHandler()</code> method does not cause the default behavior of an event to occur (such as a form submission).</li>
    <li>While <code>.trigger()</code> will operate on all elements matched by the jQuery object, <code>.triggerHandler()</code> only affects the first matched element.</li>
    <li>Events created with <code>.triggerHandler()</code> do not bubble up the DOM hierarchy; if they are not handled by the target element directly, they do nothing.</li>
    <li>Instead of returning the jQuery object (to allow chaining), <code>.triggerHandler()</code> returns whatever value was returned by the last handler it caused to be executed. If no handlers are triggered, it returns <code>undefined</code>
</li>
    </ul>
<p>For more information on this method, see the discussion for <code><a href="/trigger">.trigger()</a></code>.</p></div>
  </d:entry>
  <d:entry id="jquery_trim__str___176_0" d:title="jQuery.trim()" d:value="jQuerytrim()">
    <d:index d:title="jQuery.trim()" d:value="jQuerytrim()"/>
    <d:index d:title="jQuery.trim()" d:value="trim()"/>
    <d:index d:title="jQuery.trim( str )" d:value="jQuerytrim( str )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.trim( str )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove the whitespace from the beginning and end of a string.</p><ul class="signatures"><li class="signature" id="jQuery-trim-str">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.trim( str )</h4>
<p class="arguement"><strong>str</strong>The string to trim.</p>
</li></ul>
<p>The <code>$.trim()</code> function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.</p></div>
  </d:entry>
  <d:entry id="jquery_type__obj___177_0" d:title="jQuery.type()" d:value="jQuerytype()">
    <d:index d:title="jQuery.type()" d:value="jQuerytype()"/>
    <d:index d:title="jQuery.type()" d:value="type()"/>
    <d:index d:title="jQuery.type( obj )" d:value="jQuerytype( obj )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.type( obj )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>Determine the internal JavaScript [[Class]] of an object.</p><ul class="signatures"><li class="signature" id="jQuery-type-obj">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>jQuery.type( obj )</h4>
<p class="arguement"><strong>obj</strong>Object to get the internal JavaScript [[Class]] of.</p>
</li></ul>
<p>A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:</p><ul>
<li>If the object is undefined or null, then "undefined" or "null" is returned accordingly.</li>
<li>If the object has an internal [[Class]] equivalent to one of the browser's built-in objects, the associated name is returned. (<a href="http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/">More details about this technique.</a>)<ul>
<li>jQuery.type(true) === "boolean"</li>
<li>jQuery.type(3) === "number"</li>
<li>jQuery.type("test") === "string"</li>
<li>jQuery.type(function(){}) === "function"</li>
<li>jQuery.type([]) === "array"</li>
<li>jQuery.type(new Date()) === "date"</li>
<li>jQuery.type(/test/) === "regexp"</li>
</ul>
</li>
<li>Everything else returns "object" as its type.</li>
</ul></div>
  </d:entry>
  <d:entry id="_unbind____eventtype______handler_eventobject______178_0" d:title=".unbind()" d:value="unbind()">
    <d:index d:title=".unbind()" d:value="unbind()"/>
    <d:index d:title=".unbind(  [eventType] [, handler(eventObject)] )" d:value="unbind(  [eventType] [, handler(eventObject)] )"/>
    <d:index d:title=".unbind( eventType, false )" d:value="unbind( eventType, false )"/>
    <d:index d:title=".unbind( event )" d:value="unbind( event )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.unbind(  [eventType]  [, handler(eventObject)]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove a previously-attached event handler from the elements.</p><ul class="signatures">
<li class="signature" id="unbind-eventType-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.unbind(  [eventType] [, handler(eventObject)] )</h4>
<p class="arguement"><strong>eventType</strong>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</p>
<p class="arguement"><strong>handler(eventObject)</strong>The function that is to be no longer executed.</p>
</li>
<li class="signature" id="unbind-eventType-false">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.unbind( eventType, false )</h4>
<p class="arguement"><strong>eventType</strong>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</p>
<p class="arguement"><strong>false</strong>Unbinds the corresponding 'return false' function that was bound using <code>.bind( eventType, false )</code>.</p>
</li>
<li class="signature" id="unbind-event">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.unbind( event )</h4>
<p class="arguement"><strong>event</strong>A JavaScript event object as passed to an event handler.</p>
</li>
</ul>
<p>Any handler that has been attached with <code>.bind()</code> can be removed with <code>.unbind()</code>. In the simplest case, with no arguments, <code>.unbind()</code> removes all handlers attached to the elements:</p><pre>$('#foo').unbind();</pre><p>This version removes the handlers regardless of type. To be more precise, we can pass an event type:</p><pre>$('#foo').unbind('click');</pre><p>By specifying the <code>click</code> event type, only handlers for that event type will be unbound. This approach can still have negative ramifications if other scripts might be attaching behaviors to the same element, however. Robust and extensible applications typically demand the two-argument version for this reason:</p><pre>var handler = function() {
  alert('The quick brown fox jumps over the lazy dog.');
};
$('#foo').bind('click', handler);
$('#foo').unbind('click', handler);
</pre><p>By naming the handler, we can be assured that no other functions are caught in the crossfire. Note that the following will <em>not</em> work:</p><pre>$('#foo').bind('click', function() {
  alert('The quick brown fox jumps over the lazy dog.');
});

// will NOT work
$('#foo').unbind('click', function() {
  alert('The quick brown fox jumps over the lazy dog.');
});</pre><p>Even though the two functions are identical in content, they are created separately and so JavaScript is free to keep them as distinct function objects. To unbind a particular handler, we need a reference to that function and not a different one that happens to do the same thing.</p><blockquote><p><strong>Note: </strong>Because the <code><a href="http://api.jquery.com/live/">.live()</a></code> method binds event handlers to <code>document</code> by default, calling .unbind() on <code>document</code> will unbind the handlers bound by <code>.live()</code>, as well. For example, <code>$(document).unbind('click');</code> will remove not only <code>$(document).bind('click', fn1)</code> <br/>but also <br/><code>$('a.foo').live('click', fn2)</code>.</p></blockquote><blockquote><p><strong>Note:</strong> Using a proxied function to unbind an event on an element will unbind all proxied functions on that element, as the same proxy function is used for all proxied events. To allow unbinding a specific event, use unique class names on the event (e.g. <code>click.proxy1</code>, <code>click.proxy2</code>) when attaching them.</p></blockquote><h4>Using Namespaces</h4><p>Instead of maintaining references to handlers in order to unbind them, we can namespace the events and use this capability to narrow the scope of our unbinding actions. As shown in the discussion for the <code>.bind()</code> method, namespaces are defined by using a period (<code>.</code>) character when binding a handler:</p><pre>$('#foo').bind('click.myEvents', handler);</pre><p>When a handler is bound in this fashion, we can still unbind it the normal way:</p><pre>$('#foo').unbind('click');</pre><p>However, if we want to avoid affecting other handlers, we can be more specific:</p><pre>$('#foo').unbind('click.myEvents');</pre><p>We can also unbind all of the handlers in a namespace, regardless of event type:</p><pre>$('#foo').unbind('.myEvents');</pre><p>It is particularly useful to attach namespaces to event bindings when we are developing plug-ins or otherwise writing code that may interact with other event-handling code in the future.</p><h4>Using the Event Object</h4><p>The third form of the <code>.unbind()</code> method is used when we wish to unbind a handler from within itself. For example, suppose we wish to trigger an event handler only three times:</p><pre>var timesClicked = 0;
$('#foo').bind('click', function(event) {
  alert('The quick brown fox jumps over the lazy dog.');
  timesClicked++;
  if (timesClicked &gt;= 3) {
    $(this).unbind(event);
  }
});
</pre><p>The handler in this case must take a parameter, so that we can capture the event object and use it to unbind the handler after the third click. The event object contains the context necessary for <code>.unbind()</code> to know which handler to remove.
This example is also an illustration of a closure. Since the handler refers to the <code>timesClicked</code> variable, which is defined outside the function, incrementing the variable has an effect even between invocations of the handler.</p></div>
  </d:entry>
  <d:entry id="_before__content____content_____179_0" d:title=".before()" d:value="before()">
    <d:index d:title=".before()" d:value="before()"/>
    <d:index d:title=".before( content [, content] )" d:value="before( content [, content] )"/>
    <d:index d:title=".before( function )" d:value="before( function )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.before( content [, content]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Insert content, specified by the parameter, before each element in the set of matched elements.</p><ul class="signatures">
<li class="signature" id="before-content-content">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.before( content [, content] )</h4>
<p class="arguement"><strong>content</strong>HTML string, DOM element, or jQuery object to insert before each element in the set of matched elements.</p>
<p class="arguement"><strong>content</strong>One or more additional DOM elements, arrays of elements, HTML strings, or jQuery objects to insert before each element in the set of matched elements.</p>
</li>
<li class="signature" id="before-function">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.before( function )</h4>
<p class="arguement"><strong>function</strong>A function that returns an HTML string, DOM element(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, <code>this</code> refers to the current element in the set.
</p>
</li>
</ul>
<p>The <code>.before()</code> and <code><a href="/insertBefore">.insertBefore()</a></code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With<code> .before()</code>, the selector expression preceding the method is the container before which the content is inserted. With <code>.insertBefore()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.</p><p>Consider the following HTML:</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>You can create content and insert it before several elements at once:</p><pre>$('.inner').before('&lt;p&gt;Test&lt;/p&gt;');</pre><p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p><pre>&lt;div class="container"&gt;
  &lt;h2&gt;Greetings&lt;/h2&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;p&gt;Test&lt;/p&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>You can also select an element on the page and insert it before another:</p><pre>$('.container').before($('h2'));</pre><p>If an element selected this way is inserted elsewhere, it will be moved before the target (not cloned):</p><pre>&lt;h2&gt;Greetings&lt;/h2&gt;
&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first.</p><p>In jQuery 1.4, <code>.before()</code> and <code>.after()</code> will also work on disconnected DOM nodes:</p><pre>$("&lt;div/&gt;").before("&lt;p&gt;&lt;/p&gt;");</pre><p>The result is a jQuery set that contains a paragraph and a div (in that order).</p><h4 id="additional-arguments">Additional Arguments</h4><p>Similar to other content-adding methods such as <code><a href="http://api.jquery.com/prepend/">.prepend()</a></code> and <code><a href="http://api.jquery.com/after/">.after()</a></code>, <code>.before()</code> also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</p><p>For example, the following will insert two new <code>&lt;div&gt;</code>s and an existing <code>&lt;div&gt;</code> before the first paragraph:</p><pre>var $newdiv1 = $('&lt;div id="object1"/&gt;'),
    newdiv2 = document.createElement('div'),
    existingdiv1 = document.getElementById('foo');

$('p').first().before($newdiv1, [newdiv2, existingdiv1]);
</pre><p>Since <code>.before()</code> can accept any number of additional arguments, the same result can be achieved by passing in the three <code>&lt;div&gt;</code>s as three separate arguments, like so: <code>$('p').first().before($newdiv1, newdiv2, existingdiv1)</code>. The type and number of arguments will largely depend on how you collect the elements in your code.</p></div>
  </d:entry>
  <d:entry id="_undelegate_____180_0" d:title=".undelegate()" d:value="undelegate()">
    <d:index d:title=".undelegate()" d:value="undelegate()"/>
    <d:index d:title=".undelegate( selector, eventType )" d:value="undelegate( selector, eventType )"/>
    <d:index d:title=".undelegate( selector, eventType, handler )" d:value="undelegate( selector, eventType, handler )"/>
    <d:index d:title=".undelegate( selector, events )" d:value="undelegate( selector, events )"/>
    <d:index d:title=".undelegate( namespace )" d:value="undelegate( namespace )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.undelegate(  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove a handler from the event for all elements which match the current selector, now or in the future, based upon a specific set of root elements.</p><ul class="signatures">
<li class="signature" id="undelegate"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.2/">1.4.2</a></span>.undelegate()</h4></li>
<li class="signature" id="undelegate-selector-eventType">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.2/">1.4.2</a></span>.undelegate( selector, eventType )</h4>
<p class="arguement"><strong>selector</strong>A selector which will be used to filter the event results.</p>
<p class="arguement"><strong>eventType</strong>A string containing a JavaScript event type, such as "click" or "keydown"</p>
</li>
<li class="signature" id="undelegate-selector-eventType-handler">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.2/">1.4.2</a></span>.undelegate( selector, eventType, handler )</h4>
<p class="arguement"><strong>selector</strong>A selector which will be used to filter the event results.</p>
<p class="arguement"><strong>eventType</strong>A string containing a JavaScript event type, such as "click" or "keydown"</p>
<p class="arguement"><strong>handler</strong>A function to execute at the time the event is triggered.</p>
</li>
<li class="signature" id="undelegate-selector-events">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.undelegate( selector, events )</h4>
<p class="arguement"><strong>selector</strong>A selector which will be used to filter the event results.</p>
<p class="arguement"><strong>events</strong>A map of one or more event types and previously bound functions to unbind from them.</p>
</li>
<li class="signature" id="undelegate-namespace">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.undelegate( namespace )</h4>
<p class="arguement"><strong>namespace</strong>A string containing a namespace to unbind all events from.</p>
</li>
</ul>
<p>Undelegate is a way of removing event handlers that have been bound using <a href="/delegate">.delegate()</a>. It works virtually identically to <a href="/die">.die()</a> with the addition of a selector filter argument (which is required for delegation to work).</p></div>
  </d:entry>
  <d:entry id="jquery_unique__array___181_0" d:title="jQuery.unique()" d:value="jQueryunique()">
    <d:index d:title="jQuery.unique()" d:value="jQueryunique()"/>
    <d:index d:title="jQuery.unique()" d:value="unique()"/>
    <d:index d:title="jQuery.unique( array )" d:value="jQueryunique( array )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.unique( array )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Array">Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</p><ul class="signatures"><li class="signature" id="jQuery-unique-array">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1.3/">1.1.3</a></span>jQuery.unique( array )</h4>
<p class="arguement"><strong>array</strong>The Array of DOM elements.</p>
</li></ul>
<p>The <code>$.unique()</code> function searches through an array of objects, sorting the array, and removing any duplicate nodes. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery.</p><p>As of jQuery 1.4 the results will always be returned in document order.</p></div>
  </d:entry>
  <d:entry id="_unload__handler_eventobject____182_0" d:title=".unload()" d:value="unload()">
    <d:index d:title=".unload()" d:value="unload()"/>
    <d:index d:title=".unload( handler(eventObject) )" d:value="unload( handler(eventObject) )"/>
    <d:index d:title=".unload(  [eventData], handler(eventObject) )" d:value="unload(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.unload( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "unload" JavaScript event.</p><ul class="signatures">
<li class="signature" id="unload-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.unload( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute when the event is triggered.</p>
</li>
<li class="signature" id="unload-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.unload(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
</ul>
<p>This method is a shortcut for <code>.bind('unload', handler)</code>.</p><p>The <code>unload</code> event is sent to the <code>window</code> element when the user navigates away from the page. This could mean one of many things. The user could have clicked on a link to leave the page, or typed in a new URL in the address bar. The forward and back buttons will trigger the event. Closing the browser window will cause the event to be triggered. Even a page reload will first create an <code>unload</code> event.</p><blockquote><p>The exact handling of the <code>unload</code> event has varied from version to version of browsers. For example, some versions of Firefox trigger the event when a link is followed, but not when the window is closed. In practical usage, behavior should be tested on all supported browsers, and contrasted with the proprietary <code>beforeunload</code> event.</p></blockquote><p>Any <code>unload</code> event handler should be bound to the <code>window</code> object:</p><pre>$(window).unload(function() {
  alert('Handler for .unload() called.');
});
</pre><p>After this code executes, the alert will be displayed whenever the browser leaves the current page.
It is not possible to cancel the <code>unload</code> event with <code>.preventDefault()</code>. This event is available so that scripts can perform cleanup when the user leaves the page.
</p></div>
  </d:entry>
  <d:entry id="_unwrap___183_0" d:title=".unwrap()" d:value="unwrap()">
    <d:index d:title=".unwrap()" d:value="unwrap()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.unwrap()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</p><ul class="signatures"><li class="signature" id="unwrap"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.unwrap()</h4></li></ul>
<p>The <code>.unwrap()</code> method removes the element's parent. This is effectively the inverse of the <code><a href="/wrap">.wrap()</a></code> method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.</p></div>
  </d:entry>
  <d:entry id="_val___184_0" d:title=".val()" d:value="val()">
    <d:index d:title=".val()" d:value="val()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.val()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String,%20Number,%20Array">String, Number, Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current value of the first element in the set of matched elements.</p><ul class="signatures"><li class="signature" id="val"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.val()</h4></li></ul>
<p>The <code>.val()</code> method is primarily used to get the values of form elements. In the case of <code>&lt;select multiple="multiple"&gt;</code> elements, the <code>.val()</code> method returns an array containing each selected option.</p><p>For selects and checkboxes, you can also use the <a href="/selected">:selected</a> and <a href="/checked">:checked</a> selectors to get at values, for example:</p><pre>$('select.foo option:selected').val();    // get the value from a dropdown select
$('select.foo').val();                    // get the value from a dropdown select even easier
$('input:checkbox:checked').val();        // get the value from a checked checkbox
$('input:radio[name=bar]:checked').val(); // get the value from a set of radio buttons</pre></div>
  </d:entry>
  <d:entry id="_val__value___184_1" d:title=".val()" d:value="val()">
    <d:index d:title=".val()" d:value="val()"/>
    <d:index d:title=".val( value )" d:value="val( value )"/>
    <d:index d:title=".val( function(index, value) )" d:value="val( function(index, value) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.val( value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set the value of each element in the set of matched elements.</p><ul class="signatures">
<li class="signature" id="val-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.val( value )</h4>
<p class="arguement"><strong>value</strong>A string of text or an array of strings corresponding to the value of each matched element to set as selected/checked.</p>
</li>
<li class="signature" id="val-functionindex- value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.val( function(index, value) )</h4>
<p class="arguement"><strong>function(index, value)</strong>A function returning the value to set. <code>this</code> is the current element. Receives the index position of the element in the set and the old value as arguments.</p>
</li>
</ul>
<p>This method is typically used to set the values of form fields. </p><p>Passing an array of element values allows matching  <code>&lt;input type="checkbox"&gt;</code>, <code>&lt;input type="radio"&gt;</code> and <code>&lt;option&gt;</code>s inside of n <code>&lt;select multiple="multiple"&gt;</code> to be selected. In the case of <code>&lt;input type="radio"&gt;</code>s that are part of a radio group and <code>&lt;select multiple="multiple"&gt;</code> the other elements will be deselected.</p><p>The <code>.val()</code> method allows us to set the value by passing in a function. As of jQuery 1.4, the function is passed two arguments, the current element's index and its current value: </p><pre>$('input:text.items').val(function(index, value) {
  return value + ' ' + this.className;
});
</pre><p>This example appends the string " items" to the text inputs' values.</p></div>
  </d:entry>
  <d:entry id="visible_185_0" d:title=":visible Selector" d:value="visible Selector">
    <d:index d:title=":visible Selector" d:value="visible Selector"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">visible</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects all elements that are visible.</p><p>Elements can be considered hidden for several reasons:</p><ul>
<li>They have a CSS <code>display</code> value of <code>none</code>.</li>
<li>They are form elements with <code>type="hidden"</code>.</li>
<li>Their width and height are explicitly set to 0.</li>
<li>An ancestor element is hidden, so the element is not shown on the page.</li>
</ul>
<p>Elements with <code>visibility: hidden</code> or <code>opacity: 0</code> are considered to be visible, since they still consume space in the layout. During animations that hide an element, the element is considered to be visible until the end of the animation. During animations to show an element, the element is considered to be visible at the start at the animation.</p><p>How <code>:visible</code> is calculated was changed in jQuery 1.3.2. The <a href="http://docs.jquery.com/Release:jQuery_1.3.2#:visible.2F:hidden_Overhauled">release notes</a> outline the changes in more detail.</p><ul><li>Because <code>:visible</code> is a jQuery extension and not part of the CSS specification, queries using <code>:visible</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:visible</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":visible")</code></a>.</li></ul></div>
  </d:entry>
  <d:entry id="jquery_when__deferreds___186_0" d:title="jQuery.when()" d:value="jQuerywhen()">
    <d:index d:title="jQuery.when()" d:value="jQuerywhen()"/>
    <d:index d:title="jQuery.when()" d:value="when()"/>
    <d:index d:title="jQuery.when( deferreds )" d:value="jQuerywhen( deferreds )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.when( deferreds )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Promise">Promise</a></span>
</h2><p class="desc"><strong>Description: </strong>Provides a way to execute callback functions based on one or more objects, usually Deferred objects that represent asynchronous events.</p><ul class="signatures"><li class="signature" id="jQuery-when-deferreds">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>jQuery.when( deferreds )</h4>
<p class="arguement"><strong>deferreds</strong>One or more Deferred objects, or plain JavaScript objects.</p>
</li></ul>
<p>If a single Deferred is passed to <code>jQuery.when</code>, its Promise object (a subset of the Deferred methods) is returned by the method. Additional methods of the Promise object can be called to attach callbacks, such as <a href="/deferred.then"><code>deferred.then</code></a>. When the Deferred is resolved or rejected, usually by the code that created the Deferred originally, the appropriate callbacks will be called. For example, the jqXHR object returned by <code>jQuery.ajax</code> is a Deferred and can be used this way:</p><pre>$.when( $.ajax("test.aspx") ).then(function(ajaxArgs){ 
     alert(ajaxArgs[1]); /* ajaxArgs is [ "success", statusText, jqXHR ] */
});</pre><p>If a single argument is passed to <code>jQuery.when</code> and it is not a Deferred, it will be treated as a resolved Deferred and any doneCallbacks attached will be executed immediately. The doneCallbacks are passed the original argument. In this case any failCallbacks you might set are never called since the Deferred is never rejected. For example:</p><pre>$.when( { testing: 123 } ).done(
   function(x){ alert(x.testing); } /* alerts "123" */
);</pre><p>In the case where multiple Deferred objects are passed to <code>jQuery.when</code>, the method returns the Promise from a new "master" Deferred object that tracks the aggregate state of all the Deferreds it has been passed. The method will resolve its master Deferred as soon as all the Deferreds resolve, or reject the master Deferred as soon as one of the Deferreds is rejected. If the master Deferred is resolved, it is passed the resolved values of all the Deferreds that were passed to <code>jQuery.when</code>. For example, when the Deferreds are <code>jQuery.ajax()</code> requests, the arguments will be the jqXHR objects for the requests, in the order they were given in the argument list.</p><p>In the multiple-Deferreds case where one of the Deferreds is rejected, <code>jQuery.when</code> immediately fires the failCallbacks for its master Deferred. Note that some of the Deferreds may still be unresolved at that point. If you need to perform additional processing for this case, such as canceling any unfinished ajax requests, you can keep references to the underlying jqXHR objects in a closure and inspect/cancel them in the failCallback.</p></div>
  </d:entry>
  <d:entry id="_width___187_0" d:title=".width()" d:value="width()">
    <d:index d:title=".width()" d:value="width()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.width()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Integer">Integer</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the current computed width for the first element in the set of matched elements.</p><ul class="signatures"><li class="signature" id="width"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.width()</h4></li></ul>
<p>The difference between <code>.css(width)</code> and <code>.width()</code> is that the latter returns a unit-less pixel value (for example, <code>400</code>) while the former returns a value with units intact (for example, <code>400px</code>). The <code>.width()</code> method is recommended when an element's width needs to be used in a mathematical calculation.</p><p class="image"><img src="/images/0042_04_04.png"/></p><p>This method is also able to find the width of the window and document.</p><pre>$(window).width();   // returns width of browser viewport
$(document).width(); // returns width of HTML document</pre><p>Note that <code>.width()</code> will always return the content width, regardless of the value of the CSS <code>box-sizing</code> property.</p></div>
  </d:entry>
  <d:entry id="_width__value___187_1" d:title=".width()" d:value="width()">
    <d:index d:title=".width()" d:value="width()"/>
    <d:index d:title=".width( value )" d:value="width( value )"/>
    <d:index d:title=".width( function(index, width) )" d:value="width( function(index, width) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.width( value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set the CSS width of each element in the set of matched elements.</p><ul class="signatures">
<li class="signature" id="width-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.width( value )</h4>
<p class="arguement"><strong>value</strong>An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).</p>
</li>
<li class="signature" id="width-functionindex- width">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.1/">1.4.1</a></span>.width( function(index, width) )</h4>
<p class="arguement"><strong>function(index, width)</strong>A function returning the width to set. Receives the index position of the element in the set and the old width as arguments. Within the function, <code>this</code> refers to the current element in the set.</p>
</li>
</ul>
<p>When calling <code>.width('value')</code>, the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used for the width (such as <code>100px</code>, <code>50%</code>, or <code>auto</code>). Note that in modern browsers, the CSS width property does not include padding, border, or margin, unless the <code>box-sizing</code> CSS property is used.</p><p>If no explicit unit was specified (like 'em' or '%') then "px" is concatenated to the value.</p><p>Note that <code>.width('value')</code> sets the width of the box in accordance with the CSS <code>box-sizing</code> property. Changing this property to <code>border-box</code> will cause this function to change the outerWidth of the box instead of the content width.</p></div>
  </d:entry>
  <d:entry id="_wrap__wrappingelement___188_0" d:title=".wrap()" d:value="wrap()">
    <d:index d:title=".wrap()" d:value="wrap()"/>
    <d:index d:title=".wrap( wrappingElement )" d:value="wrap( wrappingElement )"/>
    <d:index d:title=".wrap( function(index) )" d:value="wrap( function(index) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.wrap( wrappingElement )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Wrap an HTML structure around each element in the set of matched elements.</p><ul class="signatures">
<li class="signature" id="wrap-wrappingElement">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.wrap( wrappingElement )</h4>
<p class="arguement"><strong>wrappingElement</strong>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the matched elements.</p>
</li>
<li class="signature" id="wrap-functionindex">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.wrap( function(index) )</h4>
<p class="arguement"><strong>function(index)</strong>A callback function returning the HTML content or jQuery object to wrap around the matched elements. Receives the index position of the element in the set as an argument. Within the function, <code>this</code> refers to the current element in the set.</p>
</li>
</ul>
<p>The <code>.wrap()</code> function can take any string or object that could be passed to the <code>$()</code> factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.</p><p>Consider the following HTML:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>Using <code>.wrap()</code>, we can insert an HTML structure around the inner <code>&lt;div&gt;</code> elements like so:</p><pre>$('.inner').wrap('&lt;div class="new" /&gt;');</pre><p>The new <code>&lt;div&gt;</code> element is created on the fly and added to the DOM. The result is a new <code>&lt;div&gt;</code> wrapped around each matched element:</p><pre>&lt;div class="container"&gt;
  &lt;div class="new"&gt;
    &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="new"&gt;
    &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre><p>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the corresponding element. For example:</p><pre>$('.inner').wrap(function() {
  return '&lt;div class="' + $(this).text() + '" /&gt;';
});</pre><p>This will cause each <code>&lt;div&gt;</code> to have a class corresponding to the text it wraps:</p><pre>&lt;div class="container"&gt;
  &lt;div class="Hello"&gt;
    &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="Goodbye"&gt;
    &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre></div>
  </d:entry>
  <d:entry id="_wrapall__wrappingelement___189_0" d:title=".wrapAll()" d:value="wrapAll()">
    <d:index d:title=".wrapAll()" d:value="wrapAll()"/>
    <d:index d:title=".wrapAll( wrappingElement )" d:value="wrapAll( wrappingElement )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.wrapAll( wrappingElement )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Wrap an HTML structure around all elements in the set of matched elements.</p><ul class="signatures"><li class="signature" id="wrapAll-wrappingElement">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.wrapAll( wrappingElement )</h4>
<p class="arguement"><strong>wrappingElement</strong>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the matched elements.</p>
</li></ul>
<p>The <code>.wrapAll()</code> function can take any string or object that could be passed to the <code>$()</code> function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.</p><p>Consider the following HTML:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>Using <code>.wrapAll()</code>, we can insert an HTML structure around the inner <code>&lt;div&gt;</code> elements like so:</p><pre>$('.inner').wrapAll('&lt;div class="new" /&gt;');</pre><p>The new <code>&lt;div&gt;</code> element is created on the fly and added to the DOM. The result is a new <code>&lt;div&gt;</code> wrapped around all matched elements:</p><pre>&lt;div class="container"&gt;
  &lt;div class="new"&gt;
    &lt;div class="inner"&gt;Hello&lt;/div&gt;
    &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre></div>
  </d:entry>
  <d:entry id="_bind__eventtype____eventdata____handler_eventobject____190_0" d:title=".bind()" d:value="bind()">
    <d:index d:title=".bind()" d:value="bind()"/>
    <d:index d:title=".bind( eventType [, eventData], handler(eventObject) )" d:value="bind( eventType [, eventData], handler(eventObject) )"/>
    <d:index d:title=".bind( eventType [, eventData], preventBubble )" d:value="bind( eventType [, eventData], preventBubble )"/>
    <d:index d:title=".bind( events )" d:value="bind( events )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.bind( eventType [, eventData] , handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Attach a handler to an event for the elements.</p><ul class="signatures">
<li class="signature" id="bind-eventType-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.bind( eventType [, eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventType</strong>A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.</p>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="bind-eventType-eventData-preventBubble">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.bind( eventType [, eventData], preventBubble )</h4>
<p class="arguement"><strong>eventType</strong>A string containing one or more JavaScript event types, such as "click" or "submit," or custom event names.</p>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>preventBubble</strong>Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.</p>
</li>
<li class="signature" id="bind-events">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.bind( events )</h4>
<p class="arguement"><strong>events</strong>A map of one or more JavaScript event types and functions to execute for them.</p>
</li>
</ul>
<p>The <code>.bind()</code> method is the primary means of attaching behavior to a document. All JavaScript event types, such as <code>focus</code>, <code>mouseover</code>, and <code>resize</code>, are allowed for <code>eventType</code>. The <code>error</code> event on the <code>window</code> object uses nonstandard conventions and is not supported by jQuery; attach a handler directly to the <code>window</code> object instead. The <code>beforeunload</code> event is supported cross-browser in jQuery 1.5.1 and 1.6+, but is not supported in IE for jQuery 1.5.2 due to a regression.</p><p>The jQuery library provides shortcut methods for binding the standard event types, such as <code>.click()</code> for <code>.bind('click')</code>. A description of each can be found in the discussion of its shortcut method: <a href="http://api.jquery.com/blur">blur</a>, <a href="http://api.jquery.com/focus">focus</a>, <a href="http://api.jquery.com/focusin">focusin</a>, <a href="http://api.jquery.com/focusout">focusout</a>, <a href="http://api.jquery.com/load-event">load</a>, <a href="http://api.jquery.com/resize">resize</a>, <a href="http://api.jquery.com/scroll">scroll</a>, <a href="http://api.jquery.com/unload">unload</a>, <a href="http://api.jquery.com/click">click</a>, <a href="http://api.jquery.com/dblclick">dblclick</a>, <a href="http://api.jquery.com/mousedown">mousedown</a>, <a href="http://api.jquery.com/mouseup">mouseup</a>, <a href="http://api.jquery.com/mousemove">mousemove</a>, <a href="http://api.jquery.com/mouseover">mouseover</a>, <a href="http://api.jquery.com/mouseout">mouseout</a>, <a href="http://api.jquery.com/mouseenter">mouseenter</a>, <a href="http://api.jquery.com/mouseleave">mouseleave</a>, <a href="http://api.jquery.com/change">change</a>, <a href="http://api.jquery.com/select">select</a>, <a href="http://api.jquery.com/submit">submit</a>, <a href="http://api.jquery.com/keydown">keydown</a>, <a href="http://api.jquery.com/keypress">keypress</a>, <a href="http://api.jquery.com/keyup">keyup</a>,  <a href="http://api.jquery.com/error">error</a></p><p>Any string is legal for <code>eventType</code>; if the string is not the name of a native JavaScript event, then the handler is bound to a custom event. These events are never called by the browser, but may be triggered manually from other JavaScript code using <code>.trigger()</code> or <code>.triggerHandler()</code>.</p><p>If the <code>eventType</code> string contains a period (<code>.</code>) character, then the event is namespaced. The period character separates the event from its namespace. For example, in the call <code>.bind('click.name', handler)</code>, the string <code>click</code> is the event type, and the string <code>name</code> is the namespace. Namespacing allows us to unbind or trigger some events of a type without affecting others. See the discussion of <code>.unbind()</code> for more information.</p><p>When an event reaches an element, all handlers bound to that event type for the element are fired. If there are multiple handlers registered, they will always execute in the order in which they were bound. After all handlers have executed, the event continues along the normal event propagation path.</p><p>A basic usage of <code>.bind()</code> is:</p><pre>
$('#foo').bind('click', function() {
  alert('User clicked on "foo."');
});
</pre><p>This code will cause the element with an ID of <code>foo</code> to respond to the <code>click</code> event. When a user clicks inside this element thereafter, the alert will be shown.</p><h4 id="multiple-events">Multiple Events</h4><p>Multiple event types can be bound at once by including each one separated by a space:</p><pre>
$('#foo').bind('mouseenter mouseleave', function() {
  $(this).toggleClass('entered');
});
</pre><p>The effect of this on <code>&lt;div id="foo"&gt;</code> (when it does not initially have the "entered" class) is to add the "entered" class when the mouse enters the <code>&lt;div&gt;</code> and remove the class when the mouse leaves. </p><p>As of jQuery 1.4 we can bind multiple event handlers simultaneously by passing a map of event type/handler pairs:</p><pre>
$('#foo').bind({
  click: function() {
    // do something on click
  },
  mouseenter: function() {
    // do something on mouseenter
  }
});
</pre><h4 id="event-handlers">Event Handlers</h4><p>The <code>handler</code> parameter takes a callback function, as shown above. Within the handler, the keyword <code>this</code> refers to the DOM element to which the handler is bound. To make use of the element in jQuery, it can be passed to the normal <code>$()</code> function. For example:</p><pre>$('#foo').bind('click', function() {
  alert($(this).text());
});
</pre><p>After this code is executed, when the user clicks inside the element with an ID of <code>foo</code>, its text contents will be shown as an alert.
</p><p>As of jQuery 1.4.2 duplicate event handlers can be bound to an element instead of being discarded. For example:</p><pre>function test(){ alert("Hello"); }
$("button").click( test );
$("button").click( test );</pre><p>The above will generate two alerts when the button is clicked.</p><p>In jQuery 1.4.3 you can now pass in 'false' in place of an event handler. This will bind an event handler that's equivalent to: <code>function(){ return false; }</code>. This function can be removed at a later time by calling: <code>.unbind( eventName, false )</code>.</p><h4 id="event-object"><a href="http://api.jquery.com/category/events/event-object/">The Event object</a></h4><p>The <code>handler</code> callback function can also take parameters. When the function is called, the JavaScript event object will be passed to the first parameter.</p><p>The event object is often unnecessary and the parameter omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered. However, at times it becomes necessary to gather more information about the user's environment at the time the event was initiated. <a href="http://api.jquery.com/category/events/event-object/">View the full Event Object</a>.</p><p>Returning <code>false</code> from a handler is equivalent to calling both <code>.preventDefault()</code> and <code>.stopPropagation()</code> on the event object.</p><p>Using the event object in a handler looks like this:</p><pre>$(document).ready(function() {
  $('#foo').bind('click', function(event) {
    alert('The mouse cursor is at ('
      + event.pageX + ', ' + event.pageY + ')');
  });
});
</pre><p>Note the parameter added to the anonymous function. This code will cause a click on the element with ID <code>foo</code> to report the page coordinates of the mouse cursor at the time of the click.</p><h4 id="passing-event-data">Passing Event Data</h4><p>The optional <code>eventData</code> parameter is not commonly used. When provided, this argument allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. For example, suppose we have two event handlers that both refer to the same external variable:</p><pre>var message = 'Spoon!';
$('#foo').bind('click', function() {
  alert(message);
});
message = 'Not in the face!';
$('#bar').bind('click', function() {
  alert(message);
});
</pre><p>Because the handlers are closures that both have <code>message</code> in their environment, both will display the message <span class="output">Not in the face!</span> when triggered. The variable's value has changed. To sidestep this, we can pass the message in using <code>eventData</code>:
</p><pre>var message = 'Spoon!';
$('#foo').bind('click', {msg: message}, function(event) {
  alert(event.data.msg);
});
message = 'Not in the face!';
$('#bar').bind('click', {msg: message}, function(event) {
  alert(event.data.msg);
});
</pre><p>This time the variable is not referred to directly within the handlers; instead, the variable is passed in <em>by value</em> through <code>eventData</code>, which fixes the value at the time the event is bound. The first handler will now display <span class="output">Spoon!</span> while the second will alert <span class="output">Not in the face!</span>
</p><blockquote>
  <p>Note that objects are passed to functions <em>by reference</em>, which further complicates this scenario.</p>
</blockquote><p>If <code>eventData</code> is present, it is the second argument to the <code>.bind()</code> method; if no additional data needs to be sent to the handler, then the callback is passed as the second and final argument.</p><blockquote><p>See the <code>.trigger()</code> method reference for a way to pass data to a handler at the time the event happens rather than when the handler is bound.</p></blockquote><p>As of jQuery 1.4 we can no longer attach data (and thus, events) to object, embed, or applet elements because critical errors occur when attaching data to Java applets.</p><p><strong>Note: </strong>Although demonstrated in the next example, it is inadvisable to bind handlers to both the <code>click</code> and <code>dblclick</code> events for the same element. The sequence of events triggered varies from browser to browser, with some receiving two click events before the <code>dblclick</code> and others only one. Double-click sensitivity (maximum time between clicks that is detected as a double click) can vary by operating system and browser, and is often user-configurable.</p></div>
  </d:entry>
  <d:entry id="_wrapinner__wrappingelement___191_0" d:title=".wrapInner()" d:value="wrapInner()">
    <d:index d:title=".wrapInner()" d:value="wrapInner()"/>
    <d:index d:title=".wrapInner( wrappingElement )" d:value="wrapInner( wrappingElement )"/>
    <d:index d:title=".wrapInner( function(index) )" d:value="wrapInner( function(index) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.wrapInner( wrappingElement )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Wrap an HTML structure around the content of each element in the set of matched elements.</p><ul class="signatures">
<li class="signature" id="wrapInner-wrappingElement">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.wrapInner( wrappingElement )</h4>
<p class="arguement"><strong>wrappingElement</strong>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.</p>
</li>
<li class="signature" id="wrapInner-functionindex">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.wrapInner( function(index) )</h4>
<p class="arguement"><strong>function(index)</strong>A callback function which generates a structure to wrap around the content of the matched elements. Receives the index position of the element in the set as an argument. Within the function, <code>this</code> refers to the current element in the set.</p>
</li>
</ul>
<p>The <code>.wrapInner()</code> function can take any string or object that could be passed to the <code>$()</code> factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.</p><p>Consider the following HTML:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;Hello&lt;/div&gt;
  &lt;div class="inner"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>Using <code>.wrapInner()</code>, we can insert an HTML structure around the content of each inner <code>&lt;div&gt;</code> elements like so:</p><pre>$('.inner').wrapInner('&lt;div class="new" /&gt;');</pre><p>The new <code>&lt;div&gt;</code> element is created on the fly and added to the DOM. The result is a new <code>&lt;div&gt;</code> wrapped around the content of each matched element:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    &lt;div class="new"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    &lt;div class="new"&gt;Goodbye&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre><p>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the content of the corresponding element. For example:</p><pre>$('.inner').wrapInner(function() {
  return '&lt;div class="' + this.nodeValue + '" /&gt;';
});</pre><p>This will cause each <code>&lt;div&gt;</code> to have a class corresponding to the text it wraps:</p><pre>&lt;div class="container"&gt;
  &lt;div class="inner"&gt;
    &lt;div class="Hello"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="inner"&gt;
    &lt;div class="Goodbye"&gt;Goodbye&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre><p><strong>Note:</strong> When passing a selector string to the <code>.wrapInner()</code> function, the expected input is well formed HTML with correctly closed tags. Examples of valid input include:</p><pre>
$(elem).wrapInner("&lt;div class='test' /&gt;");
$(elem).wrapInner("&lt;div class='test'&gt;&lt;/div&gt;");
$(elem).wrapInner("&lt;div class=\"test\"&gt;&lt;/div&gt;");
</pre></div>
  </d:entry>
  <d:entry id="_blur__handler_eventobject____192_0" d:title=".blur()" d:value="blur()">
    <d:index d:title=".blur()" d:value="blur()"/>
    <d:index d:title=".blur( handler(eventObject) )" d:value="blur( handler(eventObject) )"/>
    <d:index d:title=".blur(  [eventData], handler(eventObject) )" d:value="blur(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.blur( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "blur" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="blur-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.blur( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="blur-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.blur(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="blur"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.blur()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('blur', handler)</code> in the first two variations, and <code>.trigger('blur')</code> in the third.</p><p>The <code>blur</code> event is sent to an element when it loses focus. Originally, this event was only applicable to form elements, such as <code>&lt;input&gt;</code>. In recent browsers, the domain of the event has been extended to include all element types. An element can lose focus via keyboard commands, such as the Tab key, or by mouse clicks elsewhere on the page.</p><p>For example, consider the HTML:</p><pre>&lt;form&gt;
  &lt;input id="target" type="text" value="Field 1" /&gt;
  &lt;input type="text" value="Field 2" /&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;
The event handler can be bound to the first input field:
$('#target').blur(function() {
  alert('Handler for .blur() called.');
});</pre><p>Now if the first field has the focus, clicking elsewhere or tabbing away from it displays the alert:</p><p><span class="output">Handler for .blur() called.</span></p><p>To trigger the event programmatically, apply <code>.blur()</code> without an argument:</p><pre>$('#other').click(function() {
  $('#target').blur();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p><p>The <code>blur</code> event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the <code>blur</code> event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping <code>blur</code> to the <code>focusout</code> event in its event delegation methods, <a href="http://api.jquery.com/live/"><code>.live()</code></a> and <a href="http://api.jquery.com/delegate/"><code>.delegate()</code></a>.</p></div>
  </d:entry>
  <d:entry id="jquery_boxmodel_193_0" d:title="jQuery.boxModel" d:value="jQueryboxModel">
    <d:index d:title="jQuery.boxModel" d:value="jQueryboxModel"/>
    <d:index d:title="jQuery.boxModel" d:value="boxModel"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.boxModel</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Deprecated in jQuery 1.3 (see jQuery.support). States if the current page, in the user's browser, is being rendered using the W3C CSS Box Model.</p><ul class="signatures"><li class="signature" id="jQuery-boxModel"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.boxModel</h4></li></ul>
</div>
  </d:entry>
  <d:entry id="jquery_ajax__url____settings_____194_0" d:title="jQuery.ajax()" d:value="jQueryajax()">
    <d:index d:title="jQuery.ajax()" d:value="jQueryajax()"/>
    <d:index d:title="jQuery.ajax()" d:value="ajax()"/>
    <d:index d:title="jQuery.ajax( url [, settings] )" d:value="jQueryajax( url [, settings] )"/>
    <d:index d:title="jQuery.ajax( settings )" d:value="jQueryajax( settings )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.ajax( url [, settings]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jqXHR">jqXHR</a></span>
</h2><p class="desc"><strong>Description: </strong>Perform an asynchronous HTTP (Ajax) request.</p><ul class="signatures">
<li class="signature" id="jQuery-ajax-url-settings">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>jQuery.ajax( url [, settings] )</h4>
<p class="arguement"><strong>url</strong>A string containing the URL to which the request is sent.</p>
<p class="arguement"><strong>settings</strong>A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with <a href="/jQuery.ajaxSetup">$.ajaxSetup()</a>. See <a href="#jQuery-ajax-settings">jQuery.ajax( settings )</a> below for a complete list of all settings. </p>
</li>
<li class="signature" id="jQuery-ajax-settings">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.ajax( settings )</h4>
<p class="arguement"><strong>settings</strong>A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with <a href="/jQuery.ajaxSetup">$.ajaxSetup()</a>.</p>
<div class="options">
<h5 class="option">accepts<span class="type"><a href="http://api.jquery.com/Types#Map">Map</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>depends on DataType</div>
<p>The content type sent in the request header that tells the server what kind of response it will accept in return. If the <code>accepts</code> setting needs modification, it is recommended to do so once in the <code>$.ajaxSetup()</code> method</p>
<h5 class="option">async<span class="type"><a href="http://api.jquery.com/Types#Boolean">Boolean</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>true</div>
<p>By default, all requests are sent asynchronously (i.e. this is set to <code>true</code> by default). If you need synchronous requests, set this option to <code>false</code>. Cross-domain requests and <code>dataType: "jsonp"</code> requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active.</p>
<h5 class="option">beforeSend(jqXHR, settings)<span class="type"><a href="http://api.jquery.com/Types#Function">Function</a></span>
</h5>
<p>A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings maps are passed as arguments. This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>. Returning <code>false</code> in the <code>beforeSend</code> function will cancel the request. <strong>As of jQuery 1.5</strong>, the <code>beforeSend</code> option will be called regardless of the type of request.</p>
<h5 class="option">cache<span class="type"><a href="http://api.jquery.com/Types#Boolean">Boolean</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>true, false for dataType 'script' and 'jsonp'</div>
<p>If set to <code>false</code>, it will force requested pages not to be cached by the browser. Setting cache to <code>false</code> also appends a query string parameter, "_=[TIMESTAMP]", to the URL. </p>
<h5 class="option">complete(jqXHR, textStatus)<span class="type"><a href="http://api.jquery.com/Types#Function,%20Array">Function, Array</a></span>
</h5>
<p>A function to be called when the request finishes (after <code>success</code> and <code>error</code> callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (<code>"success"</code>, <code>"notmodified"</code>, <code>"error"</code>, <code>"timeout"</code>, <code>"abort"</code>, or <code>"parsererror"</code>). <strong>As of jQuery 1.5</strong>, the <code>complete</code> setting can accept an array of functions. Each function will be called in turn. This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>.</p>
<h5 class="option">contents<span class="added">(added 1.5)</span><span class="type"><a href="http://api.jquery.com/Types#Map">Map</a></span>
</h5>
<p>A map of string/regular-expression pairs that determine how jQuery will parse the response, given its content type.</p>
<h5 class="option">contentType<span class="type"><a href="http://api.jquery.com/Types#String">String</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>'application/x-www-form-urlencoded'</div>
<p>When sending data to the server, use this content-type. Default is "application/x-www-form-urlencoded", which is fine for most cases. If you explicitly pass in a content-type to <code>$.ajax()</code> then it'll always be sent to the server (even if no data is sent). Data will always be transmitted to the server using UTF-8 charset; you must decode this appropriately on the server side.</p>
<h5 class="option">context<span class="type"><a href="http://api.jquery.com/Types#Object">Object</a></span>
</h5>
<p>This object will be made the context of all Ajax-related callbacks. By default, the context is an object that represents the ajax settings used in the call (<code>$.ajaxSettings</code> merged with the settings passed to <code>$.ajax</code>). For example specifying a DOM element as the context will make that the context for the <code>complete</code> callback of a request, like so: </p>
<pre>$.ajax({
  url: "test.html",
  context: document.body,
  success: function(){
    $(this).addClass("done");
  }
});</pre>
<h5 class="option">converters<span class="added">(added 1.5)</span><span class="type"><a href="http://api.jquery.com/Types#Map">Map</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>{"* text": window.String, "text html": true, "text json": jQuery.parseJSON, "text xml": jQuery.parseXML}</div>
<p>A map of dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response</p>
<h5 class="option">crossDomain<span class="added">(added 1.5)</span><span class="type"><a href="http://api.jquery.com/Types#"/></span>
</h5>
<div class="default-value">
<strong>Default: </strong>false for same-domain requests, true for cross-domain requests</div>
<p>If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to <code>true</code>. This allows, for example, server-side redirection to another domain</p>
<h5 class="option">data<span class="type"><a href="http://api.jquery.com/Types#Object,%20String">Object, String</a></span>
</h5>
<p>Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See processData option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the <code>traditional</code> setting (described below).</p>
<h5 class="option">dataFilter(data, type)<span class="type"><a href="http://api.jquery.com/Types#Function">Function</a></span>
</h5>
<p>A function to be used to handle the raw response data of XMLHttpRequest.This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.</p>
<h5 class="option">dataType<span class="type"><a href="http://api.jquery.com/Types#String">String</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>Intelligent Guess (xml, json, script, or html)</div>
<p>The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are:
          </p>
<ul>
<li>"xml": Returns a XML document that can be processed via jQuery.</li>
            <li>"html": Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.</li>
            <li>"script": Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to the URL unless the <code>cache</code> option is set to <code>true</code>. <strong>Note:</strong> This will turn POSTs into GETs for remote-domain requests. </li>
            <li>"json": Evaluates the response as JSON and returns a JavaScript object. In jQuery 1.4 the JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. (See <a href="http://json.org/">json.org</a> for more information on proper JSON formatting.)</li>
            <li>"jsonp": Loads in a JSON block using <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">JSONP</a>. Adds an extra "?callback=?" to the end of your URL to specify the callback. Disables caching by appending a query string parameter, "_=[TIMESTAMP]", to the URL unless the <code>cache</code> option is set to <code>true</code>.</li>
            <li>"text": A plain text string.</li>
            <li>multiple, space-separated values: <strong>As of jQuery 1.5</strong>, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use "text xml" for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: "jsonp text xml." Similarly, a shorthand string such as "jsonp xml" will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml.
            </li>
          </ul>
<h5 class="option">error(jqXHR, textStatus, errorThrown)<span class="type"><a href="http://api.jquery.com/Types#Function">Function</a></span>
</h5>
<p>A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides <code>null</code>) are <code>"timeout"</code>, <code>"error"</code>, <code>"abort"</code>, and <code>"parsererror"</code>. When an HTTP error occurs, <code>errorThrown</code> receives the textual portion of the HTTP status, such as "Not Found" or "Internal Server Error."  <strong>As of jQuery 1.5</strong>, the <code>error</code> setting can accept an array of functions. Each function will be called in turn.  <strong>Note:</strong> <em>This handler is not called for cross-domain script and JSONP requests.</em> This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>. </p>
<h5 class="option">global<span class="type"><a href="http://api.jquery.com/Types#Boolean">Boolean</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>true</div>
<p>Whether to trigger global Ajax event handlers for this request. The default is <code>true</code>. Set to <code>false</code> to prevent the global handlers like <code>ajaxStart</code> or <code>ajaxStop</code> from being triggered. This can be used to control various <a href="http://docs.jquery.com/Ajax_Events">Ajax Events</a>.</p>
<h5 class="option">headers<span class="added">(added 1.5)</span><span class="type"><a href="http://api.jquery.com/Types#Map">Map</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>{}</div>
<p>A map of additional header key/value pairs to send along with the request. This setting is set before the <code>beforeSend</code> function is called; therefore, any values in the headers setting can be overwritten from within the <code>beforeSend</code> function.</p>
<h5 class="option">ifModified<span class="type"><a href="http://api.jquery.com/Types#Boolean">Boolean</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>false</div>
<p>Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is <code>false</code>, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.</p>
<h5 class="option">isLocal<span class="added">(added 1.5.1)</span><span class="type"><a href="http://api.jquery.com/Types#Boolean">Boolean</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>depends on current location protocol</div>
<p>Allow the current environment to be recognized as "local," (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: <code>file</code>, <code>*-extension</code>, and <code>widget</code>. If the <code>isLocal</code> setting needs modification, it is recommended to do so once in the <code>$.ajaxSetup()</code> method.  </p>
<h5 class="option">jsonp<span class="type"><a href="http://api.jquery.com/Types#String">String</a></span>
</h5>
<p>Override the callback function name in a jsonp request.  This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url.  So <code>{jsonp:'onJSONPLoad'}</code> would result in <code>'onJSONPLoad=?'</code> passed to the server. <strong>As of jQuery 1.5</strong>, setting the <code>jsonp</code> option to <code>false</code> prevents jQuery from adding the "?callback" string to the URL or attempting to use "=?" for transformation. In this case, you should also explicitly set the <code>jsonpCallback</code> setting. For example, <code>{ jsonp: false, jsonpCallback: "callbackName" }</code></p>
<h5 class="option">jsonpCallback<span class="type"><a href="http://api.jquery.com/Types#String,%20Function">String, Function</a></span>
</h5>
<p>Specify the callback function name for a JSONP request.  This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. <strong>As of jQuery 1.5</strong>, you can also use a function for this setting, in which case the value of <code>jsonpCallback</code> is set to the return value of that function. </p>
<h5 class="option">mimeType<span class="added">(added 1.5.1)</span><span class="type"><a href="http://api.jquery.com/Types#String">String</a></span>
</h5>
<p>A mime type to override the <abbr title="XMLHttpRequest">XHR</abbr> mime type.</p>
<h5 class="option">password<span class="type"><a href="http://api.jquery.com/Types#String">String</a></span>
</h5>
<p>A password to be used in response to an HTTP access authentication request.</p>
<h5 class="option">processData<span class="type"><a href="http://api.jquery.com/Types#Boolean">Boolean</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>true</div>
<p>By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type "application/x-www-form-urlencoded". If you want to send a DOMDocument, or other non-processed data, set this option to <code>false</code>.</p>
<h5 class="option">scriptCharset<span class="type"><a href="http://api.jquery.com/Types#String">String</a></span>
</h5>
<p>Only for requests with "jsonp" or "script" dataType and "GET" type. Forces the request to be interpreted as a certain charset. Only needed for charset differences between the remote and local content.</p>
<h5 class="option">statusCode<span class="added">(added 1.5)</span><span class="type"><a href="http://api.jquery.com/Types#Map">Map</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>{}</div>
<p>
            </p>
<p>A map of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:</p>
<pre>$.ajax({
  statusCode: {
    404: function() {
      alert('page not found');
    }
  }
});</pre>
            <p>If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error, they take the same parameters as the <code>error</code> callback.</p>
          
<h5 class="option">success(data, textStatus, jqXHR)<span class="type"><a href="http://api.jquery.com/Types#Function,%20Array">Function, Array</a></span>
</h5>
<p>A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the <code>dataType</code> parameter; a string describing the status; and the <code>jqXHR</code> (in jQuery 1.4.x, XMLHttpRequest) object. <strong>As of jQuery 1.5</strong>, <em>the success setting can accept an array of functions. Each function will be called in turn.</em> This is an <a href="http://docs.jquery.com/Ajax_Events">Ajax Event</a>.</p>
<h5 class="option">timeout<span class="type"><a href="http://api.jquery.com/Types#Number">Number</a></span>
</h5>
<p>Set a timeout (in milliseconds) for the request. This will override any global timeout set with <a href="http://api.jquery.com/jQuery.ajaxSetup">$.ajaxSetup()</a>. The timeout period starts at the point the <code>$.ajax</code> call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. <strong>In jQuery 1.4.x and below,</strong> the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. <strong>In Firefox 3.0+ only,</strong> script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.</p>
<h5 class="option">traditional<span class="type"><a href="http://api.jquery.com/Types#Boolean">Boolean</a></span>
</h5>
<p>Set this to <code>true</code> if you wish to use the traditional style of <a href="/jQuery.param">param serialization</a>.</p>
<h5 class="option">type<span class="type"><a href="http://api.jquery.com/Types#String">String</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>'GET'</div>
<p>The type of request to make ("POST" or "GET"), default is "GET". <strong>Note:</strong> Other HTTP request methods, such as PUT and DELETE, can also be used here, but they are not supported by all browsers.</p>
<h5 class="option">url<span class="type"><a href="http://api.jquery.com/Types#String">String</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>The current page</div>
<p> A string containing the URL to which the request is sent.</p>
<h5 class="option">username<span class="type"><a href="http://api.jquery.com/Types#String">String</a></span>
</h5>
<p>A username to be used in response to an HTTP access authentication request.</p>
<h5 class="option">xhr<span class="type"><a href="http://api.jquery.com/Types#Function">Function</a></span>
</h5>
<div class="default-value">
<strong>Default: </strong>ActiveXObject when available (IE), the XMLHttpRequest otherwise</div>
<p>Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.</p>
<h5 class="option">xhrFields<span class="added">(added 1.5.1)</span><span class="type"><a href="http://api.jquery.com/Types#Map">Map</a></span>
</h5>
<p/>
<p>A map of fieldName-fieldValue pairs to set on the native <code><abbr title="XMLHttpRequest">XHR</abbr></code> object. For example, you can use it to set <code>withCredentials</code> to <code>true</code> for cross-domain requests if needed.
</p>
<pre>$.ajax({
   url: a_cross_domain_url,
   xhrFields: {
      withCredentials: true
   }
});</pre>
<p>
<strong>In jQuery 1.5</strong>, the <code>withCredentials</code> property was not propagated to the native <code>XHR</code> and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.
</p>

</div>
</li>
</ul>
<p>The <code>$.ajax()</code> function underlies all Ajax requests sent by jQuery.  It is often unnecessary to directly call this function, as several higher-level alternatives like <code><a href="/jQuery.get">$.get()</a></code> and <code><a href="/load">.load()</a></code> are available and are easier to use. If less common options are required, though, <code>$.ajax()</code> can be used more flexibly.</p><p>At its simplest, the <code>$.ajax()</code> function can be called with no arguments:</p><pre>$.ajax();</pre><p><strong>Note:</strong> Default settings can be set globally by using the <code><a href="/jQuery.ajaxSetup">$.ajaxSetup()</a></code> function.</p><p>This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, we can implement one of the callback functions.</p><h4 id="jqXHR">The jqXHR Object</h4><p>The jQuery XMLHttpRequest (jqXHR) object returned by <code>$.ajax()</code> <strong>as of jQuery 1.5</strong> is a superset of the browser's native XMLHttpRequest object. For example, it contains <code>responseText</code> and <code>responseXML</code> properties, as well as a <code>getResponseHeader()</code> method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the <code>jqXHR</code> object simulates native XHR functionality where possible. </p><p><strong>As of jQuery 1.5.1</strong>, the <code>jqXHR</code> object also contains the <code>overrideMimeType()</code> method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The <code>.overrideMimeType()</code> method may be used in the <code>beforeSend()</code> callback function, for example, to modify the response content-type header:</p><pre>
$.ajax({
  url: 'http://fiddle.jshell.net/favicon.png',
  beforeSend: function( xhr ) {
    xhr.overrideMimeType( 'text/plain; charset=x-user-defined' );
  },
  success: function( data ) {
    if (console &amp;&amp; console.log){
      console.log( 'Sample of data:', data.slice(0,100) );
    }
  }
});
</pre><p>The jqXHR objects returned by <code>$.ajax()</code> as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see <a href="http://api.jquery.com/category/deferred-object/">Deferred object</a> for more information).  For convenience and consistency with the callback names used by <code>$.ajax()</code>, jqXHR also provides <code>.error()</code>, <code>.success()</code>, and <code>.complete()</code> methods. These methods take a function argument that is called when the <code>$.ajax()</code> request terminates, and the function receives the same arguments as the correspondingly-named <code>$.ajax()</code> callback. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.)</p><blockquote>
      <p><strong>Deprecation Notice:</strong> The <code>jqXHR.success()</code>, <code>jqXHR.error()</code>, and <code>jqXHR.complete()</code> callbacks will be deprecated in jQuery 1.8. To prepare your code for their eventual removal, use <code>jqXHR.done()</code>, <code>jqXHR.fail()</code>, and <code>jqXHR.always()</code> instead.</p>
    </blockquote><pre>// Assign handlers immediately after making the request,
// and remember the jqxhr object for this request
var jqxhr = $.ajax( "example.php" )
    .done(function() { alert("success"); })
    .fail(function() { alert("error"); })
    .always(function() { alert("complete"); });

// perform other work here ...

// Set another completion function for the request above
jqxhr.always(function() { alert("second complete"); });</pre><p>For backward compatibility with <code>XMLHttpRequest</code>, a <code>jqXHR</code> object will expose the following properties and methods:</p><ul>
<li><code>readyState</code></li>
        <li><code>status</code></li>
        <li><code>statusText</code></li>
        <li>
<code>responseXML</code> and/or <code>responseText</code> when the underlying request responded with xml and/or text, respectively</li>
        <li>
<code>setRequestHeader(name, value)</code> which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one</li>
        <li><code>getAllResponseHeaders()</code></li>
        <li><code>getResponseHeader()</code></li>
        <li><code>abort()</code></li>
      </ul>
<p>No <code>onreadystatechange</code> mechanism is provided, however, since <code>success</code>, <code>error</code>, <code>complete</code> and <code>statusCode</code> cover all conceivable requirements.</p><h4 id="callback-functions">Callback Function Queues</h4><p>The <code>beforeSend</code>, <code>error</code>, <code>dataFilter</code>, <code>success</code> and <code>complete</code> options all accept callback functions that are invoked at the appropriate times.</p><p><strong>As of jQuery 1.5</strong>, the <code>error</code> (<code>fail</code>), <code>success</code> (<code>done</code>), and <code>complete</code> (<code>always</code>, as of jQuery 1.6) callback hooks are first-in, first-out managed queues. This means you can assign more than one callback for each hook. See <a href="http://api.jquery.com/category/deferred-object/">Deferred object methods</a>, which are implemented internally for these <code>$.ajax()</code> callback hooks.</p><p>The <code>this</code> reference within all callbacks is the object in the <code>context</code> option passed to <code>$.ajax</code> in the settings; if <code>context</code> is not specified, <code>this</code> is a reference to the Ajax settings themselves.</p><p>Some types of Ajax requests, such as JSONP and cross-domain GET requests, do not use XHR; in those cases the <code>XMLHttpRequest</code> and <code>textStatus</code> parameters passed to the callback are <code>undefined</code>.</p><p>Here are the callback hooks provided by <code>$.ajax()</code>:</p><ol>
<li>
<code>beforeSend</code> callback is invoked; it receives the <code>jqXHR</code> object and the <code>settings</code> map as parameters.</li>
        <li>
<code>error</code> callbacks are invoked, in the order they are registered, if the request fails. They receive the <code>jqXHR</code>, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: "abort", "timeout", "No Transport".</li>
        <li>
<code>dataFilter</code> callback is invoked immediately upon successful receipt of response data. It receives the returned data and the value of <code>dataType</code>, and must return the (possibly altered) data to pass on to <code>success</code>.</li>
        <li>
<code>success</code> callbacks are then invoked, in the order they are registered, if the request succeeds. They receive the returned data, a string containing the success code, and the <code>jqXHR</code> object.</li>
        <li>
<code>complete</code> callbacks fire, in the order they are registered, when the request finishes, whether in failure or success. They receive the <code>jqXHR</code> object, as well as a string containing the success or error code.</li>
      </ol>
<p>For example, to make use of the returned HTML, we can implement a <code>success</code> handler:</p><pre>$.ajax({
  url: 'ajax/test.html',
  success: function(data) {
    $('.result').html(data);
    alert('Load was performed.');
  }
});</pre><h4 id="data-types">Data Types</h4><p>The <code>$.ajax()</code> function relies on the server to provide information about the retrieved data. If the server reports the return data as XML, the result can be traversed using normal XML methods or jQuery's selectors. If another type is detected, such as HTML in the example above, the data is treated as text.</p><p>Different data handling can be achieved by using the <code>dataType</code> option. Besides plain <code>xml</code>, the <code>dataType</code> can be <code>html</code>, <code>json</code>, <code>jsonp</code>, <code>script</code>, or <code>text</code>.</p><p>The <code>text</code> and <code>xml</code> types return the data with no processing. The data is simply passed on to the success handler, either through the <code>responseText</code> or <code>responseXML</code> property of the <code>jqXHR</code> object, respectively.</p><p><strong>Note:</strong> We must ensure that the MIME type reported by the web server matches our choice of <code>dataType</code>. In particular, XML must be declared by the server as <code>text/xml</code> or <code>application/xml</code> for consistent results.</p><p>If <code>html</code> is specified, any embedded JavaScript inside the retrieved data is executed before the HTML is returned as a string. Similarly, <code>script</code> will execute the JavaScript that is pulled back from the server, then return nothing.</p><p>The <code>json</code> type parses the fetched data file as a JavaScript object and returns the constructed object as the result data. To do so, it uses <code>jQuery.parseJSON()</code> when the browser supports it; otherwise it uses a <code>Function</code> <strong>constructor</strong>. Malformed JSON data will throw a parse error (see <a href="http://json.org/">json.org</a> for more information). JSON data is convenient for communicating structured data in a way that is concise and easy for JavaScript to parse. If the fetched data file exists on a remote server, specify the <code>jsonp</code> type instead.</p><p>The <code>jsonp</code> type appends a query string parameter of <code>callback=?</code> to the URL. The server should prepend the JSON data with the callback name to form a valid JSONP response. We can specify a parameter name other than <code>callback</code> with the <code>jsonp</code> option to <code>$.ajax()</code>.</p><p><strong>Note:</strong> JSONP is an extension of the JSON format, requiring some server-side code to detect and handle the query string parameter. More information about it can be found in the <a href="http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/">original post detailing its use</a>.</p><p>When data is retrieved from remote servers (which is only possible using the <code>script</code> or <code>jsonp</code> data types), the <code>error</code> callbacks and global events will never be fired.</p><h4 id="sending-data-to-server">Sending Data to the Server</h4><p>By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the <code>type</code> option. This option affects how the contents of the <code>data</code> option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard.</p><p>The <code>data</code> option can contain either a query string of the form <code>key1=value1&amp;key2=value2</code>, or a map of the form <code>{key1: 'value1', key2: 'value2'}</code>. If the latter form is used, the data is converted into a query string using <code><a href="http://api.jquery.com/jQuery.param/">jQuery.param()</a></code> before it is sent. This processing can be circumvented by setting <code>processData</code> to <code>false</code>.  The processing might be undesirable if you wish to send an XML object to the server; in this case, change the <code>contentType</code> option from <code>application/x-www-form-urlencoded</code> to a more appropriate MIME type.</p><h4 id="advanced-options">Advanced Options</h4><p>The <code>global</code> option prevents handlers registered using <code><a href="/ajaxSend">.ajaxSend()</a></code>, <code><a href="/ajaxError">.ajaxError()</a></code>, and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with <code><a href="/ajaxSend">.ajaxSend()</a></code> if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to <code>false</code>. See the descriptions of these methods below for more details.  See the descriptions of these methods below for more details.</p><p>If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the <code>username</code> and <code>password</code> options.</p><p>Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using <code><a href="/jQuery.ajaxSetup">$.ajaxSetup()</a></code> rather than being overridden for specific requests with the <code>timeout</code> option.</p><p>By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set <code>cache</code> to <code>false</code>. To cause the request to report failure if the asset has not been modified since the last request, set <code>ifModified</code> to <code>true</code>.</p><p>The <code>scriptCharset</code> allows the character set to be explicitly specified for requests that use a <code>&lt;script&gt;</code> tag (that is, a type of <code>script</code> or <code>jsonp</code>). This is useful if the script and host page have differing character sets.</p><p>The first letter in Ajax stands for "asynchronous," meaning that the operation occurs in parallel and the order of completion is not guaranteed. The <code>async</code> option to <code>$.ajax()</code> defaults to <code>true</code>, indicating that code execution can continue after the request is made. Setting this option to <code>false</code> (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.</p><p>The <code>$.ajax()</code> function returns the <code>XMLHttpRequest</code> object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the <code>xhr</code> option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling <code>.abort()</code> on the object will halt the request before it completes.</p><p><strong>At present</strong>, due to a bug in Firefox where <code>.getAllResponseHeaders()</code> returns the empty string although <code>.getResponseHeader('Content-Type')</code> returns a non-empty string, automatically decoding JSON CORS responses in Firefox with jQuery is not supported.</p><p>A workaround to this is possible by overriding <code>jQuery.ajaxSettings.xhr</code> as follows:</p><pre>
var _super = jQuery.ajaxSettings.xhr;
jQuery.ajaxSettings.xhr = function () {
    var xhr = _super(),
        getAllResponseHeaders = xhr.getAllResponseHeaders;

    xhr.getAllResponseHeaders = function () {
        if ( getAllResponseHeaders() ) {
            return getAllResponseHeaders();
        }
        var allHeaders = "";
        $( ["Cache-Control", "Content-Language", "Content-Type",
                "Expires", "Last-Modified", "Pragma"] ).each(function (i, header_name) {

            if ( xhr.getResponseHeader( header_name ) ) {
                allHeaders += header_name + ": " + xhr.getResponseHeader( header_name ) + "\n";
            }
            return allHeaders;
        });
    };
    return xhr;
};
</pre><h4>Extending Ajax</h4><p><strong>As of jQuery 1.5</strong>, jQuery's Ajax implementation includes prefilters, converters, and transports that allow you to extend Ajax with a great deal of flexibility. For more information about these advanced features, see the <a href="http://api.jquery.com/extending-ajax/">Extending Ajax</a> page.</p><ul>
<li>Due to browser security restrictions, most "Ajax" requests are subject to the <a title="Same Origin Policy on Wikipedia" href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a>; the request can not successfully retrieve data from a different domain, subdomain, or protocol.</li>
<li>Script and JSONP requests are not subject to the same origin policy restrictions.</li>
</ul></div>
  </d:entry>
  <d:entry id="jquery_browser_195_0" d:title="jQuery.browser" d:value="jQuerybrowser">
    <d:index d:title="jQuery.browser" d:value="jQuerybrowser"/>
    <d:index d:title="jQuery.browser" d:value="browser"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.browser</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Map">Map</a></span>
</h2><p class="desc"><strong>Description: </strong>Contains flags for the useragent, read from navigator.userAgent. We recommend against using this property; please try to use feature detection instead (see jQuery.support). jQuery.browser may be moved to a plugin in a future release of jQuery. </p><ul class="signatures"><li class="signature" id="jQuery-browser"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.browser</h4></li></ul>
<p>The <code>$.browser</code> property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.</p><p>Available flags are:</p><ul>
<li>webkit (as of jQuery 1.4)</li>
  <li>safari (deprecated)</li>
  <li>opera</li>
  <li>msie</li>
  <li>mozilla</li>
</ul>
<p>This property is available immediately. It is therefore safe to use it to determine whether or not to call <code>$(document).ready()</code>.
The <code>$.browser</code> property is deprecated in jQuery 1.3, and its functionality may be moved to a team-supported plugin in a future release of jQuery.</p><p>Because <code>$.browser</code> uses <code>navigator.userAgent</code> to determine the platform, it is vulnerable to spoofing by the user or misrepresentation by the browser itself. It is always best to avoid browser-specific code entirely where possible. The <code><a href="http://api.jquery.com/jQuery.support/">$.support</a></code> property is available for detection of support for particular features rather than relying on <code>$.browser</code>. </p></div>
  </d:entry>
  <d:entry id="jquery_browser_version_195_1" d:title="jQuery.browser" d:value="jQuerybrowser">
    <d:index d:title="jQuery.browser" d:value="jQuerybrowser"/>
    <d:index d:title="jQuery.browser" d:value="browser"/>
    <d:index d:title="jQuery.browser.version" d:value="jQuerybrowserversion"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.browser.version</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>The version number of the rendering engine for the user's browser.</p><ul class="signatures"><li class="signature" id="jQuery-browser-version"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1.3/">1.1.3</a></span>jQuery.browser.version</h4></li></ul>
<p>Here are some typical results:</p><ul>
<li>Internet Explorer: 6.0, 7.0, 8.0</li>
      <li>Mozilla/Firefox/Flock/Camino: 1.7.12, 1.8.1.3, 1.9</li>
      <li>Opera: 10.06, 11.01</li>
      <li>Safari/Webkit: 312.8, 418.9</li>
    </ul>
<p>Note that IE8 claims to be 7 in Compatibility View.</p></div>
  </d:entry>
  <d:entry id="button_196_0" d:title=":button Selector" d:value="button Selector">
    <d:index d:title=":button Selector" d:value="button Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">button</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all button elements and elements of type button.</p>
      <ul>
        <li>Because <code>:button</code> is a jQuery extension and not part of the CSS specification, queries using <code>:button</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:button</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":button")</code></a>.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="_change__handler_eventobject____197_0" d:title=".change()" d:value="change()">
    <d:index d:title=".change()" d:value="change()"/>
    <d:index d:title=".change( handler(eventObject) )" d:value="change( handler(eventObject) )"/>
    <d:index d:title=".change(  [eventData], handler(eventObject) )" d:value="change(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.change( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "change" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="change-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.change( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="change-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.change(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="change"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.change()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('change', handler)</code> in the first two variations, and <code>.trigger('change')</code> in the third.</p><p>The <code>change</code> event is sent to an element when its value changes. This event is limited to <code>&lt;input&gt;</code> elements, <code>&lt;textarea&gt;</code> boxes and <code>&lt;select&gt;</code> elements. For select boxes, checkboxes, and radio buttons, the event is fired immediately when the user makes a selection with the mouse, but for the other element types the event is deferred until the element loses focus.</p><p>For example, consider the HTML:</p><pre>&lt;form&gt;
  &lt;input class="target" type="text" value="Field 1" /&gt;
  &lt;select class="target"&gt;
    &lt;option value="option1" selected="selected"&gt;Option 1&lt;/option&gt;
    &lt;option value="option2"&gt;Option 2&lt;/option&gt;
  &lt;/select&gt;
&lt;/form&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre><p>The event handler can be bound to the text input and the select box:</p><pre>$('.target').change(function() {
  alert('Handler for .change() called.');
});</pre><p>Now when the second option is selected from the dropdown, the alert is displayed. It is also displayed if you change the text in the field and then click away. If the field loses focus without the contents having changed, though, the event is not triggered. To trigger the event manually, apply <code>.change()</code> without arguments:</p><pre>$('#other').click(function() {
  $('.target').change();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message. The message will display twice, because the handler has been bound to the <code>change</code> event on both of the form elements.</p><p>As of jQuery 1.4, the <code>change</code> event bubbles in Internet Explorer, behaving consistently with the event in other modern browsers.</p></div>
  </d:entry>
  <d:entry id="checkbox_198_0" d:title=":checkbox Selector" d:value="checkbox Selector">
    <d:index d:title=":checkbox Selector" d:value="checkbox Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">checkbox</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements of type checkbox.</p>
      <p><code>$(':checkbox')</code> is equivalent to <code>$('[type=checkbox]')</code>. As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':checkbox')</code> is equivalent to <code>$('*:checkbox')</code>, so <code>$('input:checkbox')</code> should be used instead. </p>
      <ul>
        <li>Because <code>:checkbox</code> is a jQuery extension and not part of the CSS specification, queries using <code>:checkbox</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type="checkbox"]</code> instead.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="checked_199_0" d:title=":checked Selector" d:value="checked Selector">
    <d:index d:title=":checked Selector" d:value="checked Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">checked</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Matches all elements that are checked.</p>
      <p>The <code>:checked</code> selector works for checkboxes and radio buttons. For select elements, use the <code>:selected</code> selector.</p>
    </div>
  </d:entry>
  <d:entry id="child_200_0" d:title="Child Selector (“parent &amp;gt; child”)" d:value="Child Selector (“parent &amp;gt; child”)">
    <d:index d:title="Child Selector (“parent &amp;gt; child”)" d:value="Child Selector (“parent &amp;gt; child”)"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">child</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects all direct child elements specified by "child" of elements specified by "parent".</p><ul class="signatures"><li><dl class="arguments">
<dt>parent</dt>
<dd>Any valid selector.</dd>
<dt>child</dt>
<dd>A selector to filter the child elements.</dd>
</dl></li></ul>
<p>As a CSS selector, the child combinator is supported by all modern web browsers including Safari, Firefox, Opera, Chrome, and Internet Explorer 7 and above, but notably not by Internet Explorer versions 6 and below. However, in jQuery, this selector (along with all others) works across all supported browsers, including IE6.</p><p>The child combinator (E <strong>&gt;</strong> F) can be thought of as a more specific form of the descendant combinator (E F) in that it selects only first-level descendants.</p><blockquote><p><strong>Note: </strong>The <code>$("&gt; elem", context)</code> selector will be deprecated in a future release. Its usage is thus discouraged in lieu of using alternative selectors.</p></blockquote></div>
  </d:entry>
  <d:entry id="_children____selector_____201_0" d:title=".children()" d:value="children()">
    <d:index d:title=".children()" d:value="children()"/>
    <d:index d:title=".children(  [selector] )" d:value="children(  [selector] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.children(  [selector]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the children of each element in the set of matched elements, optionally filtered by a selector.</p><ul class="signatures"><li class="signature" id="children-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.children(  [selector] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.children()</code> method allows us to search through the immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.find()</code> and <code>.children()</code> methods are similar, except that the latter only travels a single level down the DOM tree. Note also that like most jQuery methods, <code>.children()</code> does not return text nodes; to get <em>all</em> children including text and comment nodes, use <code>.contents()</code>.</p><p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p><p>Consider a page with a basic nested list on it:</p><pre>
&lt;ul class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li class="item-ii"&gt;II
    &lt;ul class="level-2"&gt;
      &lt;li class="item-a"&gt;A&lt;/li&gt;
      &lt;li class="item-b"&gt;B
        &lt;ul class="level-3"&gt;
          &lt;li class="item-1"&gt;1&lt;/li&gt;
          &lt;li class="item-2"&gt;2&lt;/li&gt;
          &lt;li class="item-3"&gt;3&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li class="item-c"&gt;C&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre><p>If we begin at the level-2 list, we can find its children:</p><pre>$('ul.level-2').children().css('background-color', 'red');</pre><p>The result of this call is a red background behind items A, B, and C. Since we do not supply a selector expression, all of the children are part of the returned jQuery object. If we had supplied one, only the matching items among these three would be included.</p></div>
  </d:entry>
  <d:entry id="class_202_0" d:title="Class Selector (“.class”)" d:value="Class Selector (“class”)">
    <d:index d:title="Class Selector (“.class”)" d:value="Class Selector (“class”)"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">class</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects all elements with the given class. </p><ul class="signatures"><li><dl class="arguments">
<dt>class</dt>
<dd>A class to search for. An element can have multiple classes; only one of them must match.</dd>
</dl></li></ul>
<p>For class selectors, jQuery uses JavaScript's native <code>getElementsByClassName()</code> function if the browser supports it.</p></div>
  </d:entry>
  <d:entry id="_clearqueue____queuename_____203_0" d:title=".clearQueue()" d:value="clearQueue()">
    <d:index d:title=".clearQueue()" d:value="clearQueue()"/>
    <d:index d:title=".clearQueue(  [queueName] )" d:value="clearQueue(  [queueName] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.clearQueue(  [queueName]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove from the queue all items that have not yet been run.</p><ul class="signatures"><li class="signature" id="clearQueue-queueName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.clearQueue(  [queueName] )</h4>
<p class="arguement"><strong>queueName</strong>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</p>
</li></ul>
<p>When the <code>.clearQueue()</code> method is called, all functions on the queue that have not been executed are removed from the queue. When used without an argument, <code>.clearQueue()</code> removes the remaining functions from <code>fx</code>, the standard effects queue. In this way it is similar to <code>.stop(true)</code>. However,  while the <code>.stop()</code> method is meant to be used only with animations, <code>.clearQueue()</code> can also be used to remove any function that has been added to a generic jQuery queue with the <code>.queue()</code> method. </p></div>
  </d:entry>
  <d:entry id="_click__handler_eventobject____204_0" d:title=".click()" d:value="click()">
    <d:index d:title=".click()" d:value="click()"/>
    <d:index d:title=".click( handler(eventObject) )" d:value="click( handler(eventObject) )"/>
    <d:index d:title=".click(  [eventData], handler(eventObject) )" d:value="click(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.click( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "click" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="click-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.click( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="click-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.click(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="click"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.click()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('click', handler)</code> in the first two variations, and <code>.trigger('click')</code> in the third.</p><p>The <code>click</code> event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event.</p><pre>For example, consider the HTML:
&lt;div id="target"&gt;
  Click here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre><p class="image"><img src="/images/0042_05_03.png" alt=""/></p><p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p><pre>$('#target').click(function() {
  alert('Handler for .click() called.');
});</pre><p>Now if we click on this element, the alert is displayed:</p><p><span class="output">Handler for .click() called.</span></p><p>We can also trigger the event when a different element is clicked:</p><pre>$('#other').click(function() {
  $('#target').click();
});</pre><p>After this code executes, clicks on <span class="output">Trigger the handler</span> will also alert the message.</p><p>The <code>click</code> event is only triggered after this exact series of events:</p><ul><li>The mouse button is depressed while the pointer is inside the element.</li>
  <li>The mouse button is released while the pointer is inside the element.</li>
</ul><p>This is usually the desired sequence before taking an action. If this is not required, the <code>mousedown</code> or <code>mouseup</code> event may be more suitable.</p></div>
  </d:entry>
  <d:entry id="_ajaxcomplete__handler_event__xmlhttprequest__ajaxoptions____205_0" d:title=".ajaxComplete()" d:value="ajaxComplete()">
    <d:index d:title=".ajaxComplete()" d:value="ajaxComplete()"/>
    <d:index d:title=".ajaxComplete( handler(event, XMLHttpRequest, ajaxOptions) )" d:value="ajaxComplete( handler(event, XMLHttpRequest, ajaxOptions) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.ajaxComplete( handler(event, XMLHttpRequest, ajaxOptions) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Register a handler to be called when Ajax requests complete. This is an Ajax Event.</p><ul class="signatures"><li class="signature" id="ajaxComplete-handlerevent- XMLHttpRequest- ajaxOptions">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.ajaxComplete( handler(event, XMLHttpRequest, ajaxOptions) )</h4>
<p class="arguement"><strong>handler(event, XMLHttpRequest, ajaxOptions)</strong>The function to be invoked.</p>
</li></ul>
<p>Whenever an Ajax request completes, jQuery triggers the <code>ajaxComplete</code> event. Any and all handlers that have been registered with the <code>.ajaxComplete()</code> method are executed at this time.</p><p>To observe this method in action, we can set up a basic Ajax load request:</p><pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;
</pre><p>We can attach our event handler to any element:</p><pre>$('.log').ajaxComplete(function() {
  $(this).text('Triggered ajaxComplete handler.');
});
</pre><p>Now, we can make an Ajax request using any jQuery method:</p><pre>$('.trigger').click(function() {
  $('.result').load('ajax/test.html');
});</pre><p>When the user clicks the button and the Ajax request completes, the log message is displayed.</p><p><strong>Note:</strong> Because <code>.ajaxComplete()</code> is implemented as a method of jQuery object instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p><p>All <code>ajaxComplete</code> handlers are invoked, regardless of what Ajax request was completed. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an <code>ajaxComplete</code> handler is executed, it is passed the event object, the <code>XMLHttpRequest</code> object, and the settings object that was used in the creation of the request. For example, we can restrict our callback to only handling events dealing with a particular URL:</p><p><strong>Note:</strong> You can get the returned ajax contents by looking at <code>xhr.responseXML</code> or <code>xhr.responseHTML</code> for xml and html respectively.</p><pre>$('.log').ajaxComplete(function(e, xhr, settings) {
  if (settings.url == 'ajax/test.html') {
    $(this).text('Triggered ajaxComplete handler. The result is ' +
                     xhr.responseHTML);
  }
});</pre></div>
  </d:entry>
  <d:entry id="_clone____withdataandevents_____206_0" d:title=".clone()" d:value="clone()">
    <d:index d:title=".clone()" d:value="clone()"/>
    <d:index d:title=".clone(  [withDataAndEvents] )" d:value="clone(  [withDataAndEvents] )"/>
    <d:index d:title=".clone(  [withDataAndEvents] [, deepWithDataAndEvents] )" d:value="clone(  [withDataAndEvents] [, deepWithDataAndEvents] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.clone(  [withDataAndEvents]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Create a deep copy of the set of matched elements.</p><ul class="signatures">
<li class="signature" id="clone-withDataAndEvents">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.clone(  [withDataAndEvents] )</h4>
<p class="arguement"><strong>withDataAndEvents</strong>A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well.</p>
</li>
<li class="signature" id="clone-withDataAndEvents-deepWithDataAndEvents">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>.clone(  [withDataAndEvents] [, deepWithDataAndEvents] )</h4>
<p class="arguement"><strong>withDataAndEvents</strong>A Boolean indicating whether event handlers and data should be copied along with the elements. The default value is <code>false</code>. <em>*In jQuery 1.5.0 the default value was incorrectly <code>true</code>; it was changed back to <code>false</code> in 1.5.1 and up.</em></p>
<p class="arguement"><strong>deepWithDataAndEvents</strong>A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. By default its value matches the first argument's value (which defaults to <code>false</code>).</p>
</li>
</ul>
<p>The <code>.clone()</code> method performs a <em>deep</em> copy of the set of matched elements, meaning that it copies the matched elements as well as all of their descendant elements and text nodes. When used in conjunction with one of the insertion methods, <code>.clone()</code> is a convenient way to duplicate elements on a page. Consider the following HTML:</p><pre>&lt;div class="container"&gt;
  &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>As shown in the discussion for <code><a href="http://api.jquery.com/append/">.append()</a></code>,  normally when an element is inserted somewhere in the DOM, it is moved from its old location. So, given the code:</p><pre>$('.hello').appendTo('.goodbye');</pre><p>The resulting DOM structure would be:</p><pre>&lt;div class="container"&gt;
  &lt;div class="goodbye"&gt;
    Goodbye
    &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre><p>To prevent this and instead create a copy of the element, you could write the following:</p><pre>$('.hello').clone().appendTo('.goodbye');</pre><p>This would produce:</p><pre>&lt;div class="container"&gt;
  &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;div class="goodbye"&gt;
    Goodbye
    &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</pre><blockquote><p>Note that when using the <code>.clone()</code> method, you can modify the cloned elements or their contents before (re-)inserting them into the document.</p></blockquote><p>Normally, any event handlers bound to the original element are <em>not</em> copied to the clone. The optional <code>withDataAndEvents</code> parameter allows us to change this behavior, and to instead make copies of all of the event handlers as well, bound to the new copy of the element. As of jQuery 1.4, all element data (attached by the <code>.data()</code> method) is also copied to the new copy. </p><p>However, objects and arrays within element data are not copied and will continue to be shared between the cloned element and the original element. To deep copy all data, copy each one manually:</p><pre>var $elem = $('#elem').data( "arr": [ 1 ] ), // Original element with attached data
    $clone = $elem.clone( true )
    .data( "arr", $.extend( [], $elem.data("arr") ) ); // Deep copy to prevent data sharing
</pre><p>As of jQuery 1.5, <code>withDataAndEvents</code> can be optionally enhanced with <code>deepWithDataAndEvents </code> to copy the events and data for all children of the cloned element.</p></div>
  </d:entry>
  <d:entry id="_closest__selector___207_0" d:title=".closest()" d:value="closest()">
    <d:index d:title=".closest()" d:value="closest()"/>
    <d:index d:title=".closest( selector )" d:value="closest( selector )"/>
    <d:index d:title=".closest( selector [, context] )" d:value="closest( selector [, context] )"/>
    <d:index d:title=".closest( jQuery object )" d:value="closest( jQuery object )"/>
    <d:index d:title=".closest( element )" d:value="closest( element )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.closest( selector )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the first element that matches the selector, beginning at the current element and progressing up through the DOM tree.</p><ul class="signatures">
<li class="signature" id="closest-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>.closest( selector )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
</li>
<li class="signature" id="closest-selector-context">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.closest( selector [, context] )</h4>
<p class="arguement"><strong>selector</strong>A string containing a selector expression to match elements against.</p>
<p class="arguement"><strong>context</strong>A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.</p>
</li>
<li class="signature" id="closest-jQuery object">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.closest( jQuery object )</h4>
<p class="arguement"><strong>jQuery object</strong>A jQuery object to match elements against.</p>
</li>
<li class="signature" id="closest-element">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>.closest( element )</h4>
<p class="arguement"><strong>element</strong>An element to match elements against.</p>
</li>
</ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.closest()</code> method searches through these elements and their ancestors in the DOM tree and constructs a new jQuery object from the matching elements. The <code>.parents()</code> and <code>.closest()</code> methods are similar in that they both traverse up the DOM tree. The differences between the two, though subtle, are significant:</p><table>
<thead><tr>
<th>.closest()</th>
        <th>.parents()</th>
      </tr></thead>
<tbody>
<tr>
<td>Begins with the current element</td>
        <td>Begins with the parent element</td>
</tr>
<tr>
<td>Travels up the DOM tree until it finds a match for the supplied selector</td>
        <td>Travels up the DOM tree to the document's root element, adding each ancestor element to a temporary collection; it then filters that collection based on a selector if one is supplied </td>
      </tr>
<tr>
<td>The returned jQuery object contains zero or one element</td>
        <td>The returned jQuery object contains zero, one, or multiple elements</td>
      </tr>
</tbody>
</table>
<pre>
&lt;ul id="one" class="level-1"&gt;
  &lt;li class="item-i"&gt;I&lt;/li&gt;
  &lt;li id="ii" class="item-ii"&gt;II
  &lt;ul class="level-2"&gt;
    &lt;li class="item-a"&gt;A&lt;/li&gt;
    &lt;li class="item-b"&gt;B
      &lt;ul class="level-3"&gt;
        &lt;li class="item-1"&gt;1&lt;/li&gt;
        &lt;li class="item-2"&gt;2&lt;/li&gt;
        &lt;li class="item-3"&gt;3&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li class="item-c"&gt;C&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li class="item-iii"&gt;III&lt;/li&gt;
&lt;/ul&gt;
</pre><p>Suppose we perform a search for <code>&lt;ul&gt;</code> elements starting at item A:</p><pre>
$('li.item-a').closest('ul')
  .css('background-color', 'red');
</pre><p>This will change the color of the level-2 <code>&lt;ul&gt;</code>, since it is the first encountered when traveling up the DOM tree.</p><p>Suppose we search for an <code>&lt;li&gt;</code> element instead:</p><pre>$('li.item-a').closest('li')
  .css('background-color', 'red');
</pre><p>This will change the color of list item A. The <code>.closest()</code> method begins its search <em>with the element itself</em> before progressing up the DOM tree, and stops when item A matches the selector.</p><p>We can pass in a DOM element as the context within which to search for the closest element.</p><pre>var listItemII = document.getElementById('ii');
$('li.item-a').closest('ul', listItemII)
  .css('background-color', 'red');
$('li.item-a').closest('#one', listItemII)
  .css('background-color', 'green');</pre><p>This will change the color of the level-2 <code>&lt;ul&gt;</code>, because it is both the first <code>&lt;ul&gt;</code> ancestor of list item A and a descendant of list item II. It will not change the color of the level-1 <code>&lt;ul&gt;</code>, however, because it is not a descendant of list item II.</p></div>
  </d:entry>
  <d:entry id="_closest__selectors____context_____207_1" d:title=".closest()" d:value="closest()">
    <d:index d:title=".closest()" d:value="closest()"/>
    <d:index d:title=".closest( selectors [, context] )" d:value="closest( selectors [, context] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.closest( selectors [, context]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Array">Array</a></span>
</h2><p class="desc"><strong>Description: </strong>Gets an array of all the elements and selectors matched against the current element up through the DOM tree.</p><ul class="signatures"><li class="signature" id="closest-selectors-context">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.closest( selectors [, context] )</h4>
<p class="arguement"><strong>selectors</strong>An array or string containing a selector expression to match elements against (can also be a jQuery object).</p>
<p class="arguement"><strong>context</strong>A DOM element within which a matching element may be found. If no context is passed in then the context of the jQuery set will be used instead.</p>
</li></ul>
<p>This method is primarily meant to be used internally or by plugin authors.</p></div>
  </d:entry>
  <d:entry id="jquery_contains__container__contained___208_0" d:title="jQuery.contains()" d:value="jQuerycontains()">
    <d:index d:title="jQuery.contains()" d:value="jQuerycontains()"/>
    <d:index d:title="jQuery.contains()" d:value="contains()"/>
    <d:index d:title="jQuery.contains( container, contained )" d:value="jQuerycontains( container, contained )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.contains( container, contained )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Check to see if a DOM element is within another DOM element.</p><ul class="signatures"><li class="signature" id="jQuery-contains-container-contained">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>jQuery.contains( container, contained )</h4>
<p class="arguement"><strong>container</strong>The DOM element that may contain the other element.</p>
<p class="arguement"><strong>contained</strong>The DOM element that may be contained by the other element.</p>
</li></ul>
</div>
  </d:entry>
  <d:entry id="contains_209_0" d:title=":contains() Selector" d:value="contains() Selector">
    <d:index d:title=":contains() Selector" d:value="contains() Selector"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">contains</span>  selector</h2><p class="desc"><strong>Description: </strong>Select all elements that contain the specified text.</p><ul class="signatures"><li><dl class="arguments">
<dt>text</dt>
<dd>A string of text to look for. It's case sensitive.</dd>
</dl></li></ul>
<p>The matching text can appear directly within the selected element, in any of that element's descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of <code>:contains()</code> can be written as bare words or surrounded by quotation marks. The text must have matching case to be selected.</p></div>
  </d:entry>
  <d:entry id="_contents___210_0" d:title=".contents()" d:value="contents()">
    <d:index d:title=".contents()" d:value="contents()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.contents()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the children of each element in the set of matched elements, including text and comment nodes.</p><ul class="signatures"><li class="signature" id="contents"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.contents()</h4></li></ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.contents()</code> method allows us to search through the immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.contents()</code> and <code>.children()</code> methods are similar, except that the former includes text nodes as well as HTML elements in the resulting jQuery object.</p><p>The <code>.contents()</code> method can also be used to get the content document of an iframe, if the iframe is on the same domain as the main page.</p><p>Consider a simple <code>&lt;div&gt;</code> with a number of text nodes, each of which is separated by two line break elements (<code>&lt;br /&gt;</code>):</p><pre>&lt;div class="container"&gt;
  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed 
  do eiusmod tempor incididunt ut labore et dolore magna aliqua. 
  &lt;br /&gt;&lt;br /&gt;
  Ut enim ad minim veniam, quis nostrud exercitation ullamco 
  laboris nisi ut aliquip ex ea commodo consequat.
  &lt;br /&gt; &lt;br /&gt;
  Duis aute irure dolor in reprehenderit in voluptate velit 
  esse cillum dolore eu fugiat nulla pariatur.
&lt;/div&gt;
</pre><p>We can employ the <code>.contents()</code> method to help convert this blob of text into three well-formed paragraphs:</p><pre>
$('.container').contents().filter(function() {
  return this.nodeType == 3;
})
  .wrap('&lt;p&gt;&lt;/p&gt;')
.end()
.filter('br')
  .remove();
</pre><p>This code first retrieves the contents  of <code>&lt;div class="container"&gt;</code> and then filters it for text nodes, which are wrapped in paragraph tags. This is accomplished by testing the <a href="https://developer.mozilla.org/en/nodeType"><code>.nodeType</code> property</a> of the element. This DOM property holds a numeric code indicating the node's type; text nodes use the code 3. The contents are again filtered, this time for <code>&lt;br /&gt;</code> elements, and these elements are removed.</p></div>
  </d:entry>
  <d:entry id="context_211_0" d:title=".context" d:value="context">
    <d:index d:title=".context" d:value="context"/>
    <d:index d:title="context" d:value="context"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">context</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Element">Element</a></span>
</h2><p class="desc"><strong>Description: </strong>The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.</p><ul class="signatures"><li class="signature" id="context"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>context</h4></li></ul>
<p>The <code>.live()</code> method for binding event handlers uses this property to determine the root element to use for its event delegation needs.</p><p>
The value of this property is typically equal to <code>document</code>, as this is the default context for jQuery objects if none is supplied. The context may differ if, for example, the object was created by searching within an <code>&lt;iframe&gt;</code> or XML document.</p><p>Note that the context property may only apply to the elements originally selected by <code>jQuery()</code>, as it is possible for the user to add elements to the collection via methods such as <code>.add()</code> and these may have a different context.</p></div>
  </d:entry>
  <d:entry id="_css__propertyname___212_0" d:title=".css()" d:value="css()">
    <d:index d:title=".css()" d:value="css()"/>
    <d:index d:title=".css( propertyName )" d:value="css( propertyName )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.css( propertyName )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>Get the value of a style property for the first element in the set of matched elements.</p><ul class="signatures"><li class="signature" id="css-propertyName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.css( propertyName )</h4>
<p class="arguement"><strong>propertyName</strong>A CSS property.</p>
</li></ul>
<p>The <code>.css()</code> method is a convenient way to get a style property from the first matched element, especially in light of the different ways browsers access most of those properties (the <code>getComputedStyle()</code> method in standards-based browsers versus the <code>currentStyle</code> and <code>runtimeStyle</code> properties in Internet Explorer) and the different terms browsers use for certain properties. For example, Internet Explorer's DOM implementation refers to the <code>float</code> property as <code>styleFloat</code>, while W3C standards-compliant browsers refer to it as <code>cssFloat</code>. The <code>.css()</code> method accounts for such differences, producing the same result no matter which term we use. For example, an element that is floated left will return the string <code>left</code> for each of the following three lines:</p><ol>
<li><code>$('div.left').css('float');</code></li>
					<li><code>$('div.left').css('cssFloat');</code></li>
					<li><code>$('div.left').css('styleFloat');</code></li>
				</ol>
<p>Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands and returns the correct value for both <code>.css('background-color')</code> and <code>.css('backgroundColor')</code>. Different browsers may return CSS color values that are logically but not textually equal, e.g., #FFF, #ffffff, and rgb(255,255,255).</p><p>Shorthand CSS properties (e.g. margin, background, border) are not supported. For example, if you want to retrieve the rendered margin, use: <code>$(elem).css('marginTop')</code> and <code>$(elem).css('marginRight')</code>, and so on.</p></div>
  </d:entry>
  <d:entry id="_css__propertyname__value___212_1" d:title=".css()" d:value="css()">
    <d:index d:title=".css()" d:value="css()"/>
    <d:index d:title=".css( propertyName, value )" d:value="css( propertyName, value )"/>
    <d:index d:title=".css( propertyName, function(index, value) )" d:value="css( propertyName, function(index, value) )"/>
    <d:index d:title=".css( map )" d:value="css( map )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.css( propertyName, value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set one or more CSS properties for the  set of matched elements.</p><ul class="signatures">
<li class="signature" id="css-propertyName-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.css( propertyName, value )</h4>
<p class="arguement"><strong>propertyName</strong>A CSS property name.</p>
<p class="arguement"><strong>value</strong>A value to set for the property.</p>
</li>
<li class="signature" id="css-propertyName-functionindex- value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.css( propertyName, function(index, value) )</h4>
<p class="arguement"><strong>propertyName</strong>A CSS property name.</p>
<p class="arguement"><strong>function(index, value)</strong>A function returning the value to set. <code>this</code> is the current element. Receives the index position of the element in the set and the old value as arguments.</p>
</li>
<li class="signature" id="css-map">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.css( map )</h4>
<p class="arguement"><strong>map</strong>A map of property-value pairs to set.</p>
</li>
</ul>
<p>As with the <code>.prop()</code> method, the <code>.css()</code> method makes setting properties of elements quick and easy. This method can take either a property name and value as separate parameters, or a single map of key-value pairs (JavaScript object notation).</p><p>Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands and returns the correct value for both <code>.css({'background-color': '#ffe', 'border-left': '5px solid #ccc'})</code> and <code>.css({backgroundColor: '#ffe', borderLeft: '5px solid #ccc'})</code>. Notice that with the DOM notation, quotation marks around the property names are optional, but with CSS notation they're required due to the hyphen in the name.</p><p>When using <code>.css()</code> as a setter, jQuery modifies the element's <code>style</code> property. For example,  <code>$('#mydiv').css('color', 'green')</code> is equivalent to <code>document.getElementById('mydiv').style.color = 'green'</code>. Setting the value of a style property to an empty string — e.g. <code>$('#mydiv').css('color', '')</code> — removes that property from an element if it has already been directly applied, whether in the HTML style attribute, through jQuery's <code>.css()</code> method, or through direct DOM manipulation of the <code>style</code> property. It does not, however, remove a style that has been applied with a CSS rule in a stylesheet or <code>&lt;style&gt;</code> element.</p><p>As of jQuery 1.6, <code>.css()</code> accepts relative values similar to <code>.animate()</code>. Relative values are a string starting with <code>+=</code> or <code>-=</code> to increment or decrement the current value. For example, if an element's padding-left was 10px, <code>.css( "padding-left", "+=15" )</code> would result in a total padding-left of 25px.</p><p>As of jQuery 1.4, <code>.css()</code> allows us to pass a function as the property value:</p><pre>$('div.example').css('width', function(index) {
  return index * 50;
});</pre><p>This example sets the widths of the matched elements to incrementally larger values.</p><p><strong>Note: </strong>If nothing is returned in the setter function (ie. <code>function(index, style){})</code>, or if <code>undefined</code> is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.</p></div>
  </d:entry>
  <d:entry id="jquery_csshooks_213_0" d:title="jQuery.cssHooks" d:value="jQuerycssHooks">
    <d:index d:title="jQuery.cssHooks" d:value="jQuerycssHooks"/>
    <d:index d:title="jQuery.cssHooks" d:value="cssHooks"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.cssHooks</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.</p><ul class="signatures"><li class="signature" id="jQuery-cssHooks"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>jQuery.cssHooks</h4></li></ul>
<p>The <code>$.cssHooks</code> object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients. </p><p>For example, some versions of Webkit-based browsers require <code>-webkit-border-radius</code> to set the <code>border-radius</code> on an element, while earlier Firefox versions require <code>-moz-border-radius</code>. A cssHook can normalize these vendor-prefixed properties to let <code>.css()</code> accept a single, standard property name (<code>border-radius</code>, or with DOM property syntax, <code>borderRadius</code>).</p><p>In addition to providing fine-grained control over how specific style properties are handled, <code>$.cssHooks</code> also extends the set of properties available to the <code>.animate()</code> method.</p><p>Defining a new cssHook is straight-forward. The skeleton template below can serve as a guide to creating your own. </p><pre class="prettyprint">(function($) {
  // first, check to see if cssHooks are supported
  if ( !$.cssHooks ) {
    // if not, output an error message
    throw("jQuery 1.4.3 or above is required for this plugin to work");
    return;
  }

  $.cssHooks["someCSSProp"] = {
    get: function( elem, computed, extra ) {
      // handle getting the CSS property
    },
    set: function( elem, value ) {
      // handle setting the CSS value
    }
  };
})(jQuery);
</pre><h4 id="feature-testing">Feature Testing</h4><p>Before normalizing a vendor-specific CSS property, first determine whether the browser supports the standard property or a vendor-prefixed variation. For example, to check for support of the <code>border-radius</code> property, see if any variation is a member of a temporary element's <code>style</code> object.</p><pre class="prettyprint">(function($) {
  function styleSupport( prop ) {
    var vendorProp, supportedProp,

        // capitalize first character of the prop to test vendor prefix
        capProp = prop.charAt(0).toUpperCase() + prop.slice(1),
        prefixes = [ "Moz", "Webkit", "O", "ms" ],
        div = document.createElement( "div" );

    if ( prop in div.style ) {

      // browser supports standard CSS property name
      supportedProp = prop;
    } else {

      // otherwise test support for vendor-prefixed property names
      for ( var i = 0; i &lt; prefixes.length; i++ ) {
        vendorProp = prefixes[i] + capProp;
        if ( vendorProp in div.style ) {
          supportedProp = vendorProp;
          break;
        }
      }
    }

    // avoid memory leak in IE
    div = null;
    
    // add property to $.support so it can be accessed elsewhere
    $.support[ prop ] = supportedProp;
    
    return supportedProp;
  }

  // call the function, e.g. testing for "border-radius" support:
  styleSupport( "borderRadius" );
})(jQuery);
</pre><h4 id="defining-complete-csshook">Defining a complete cssHook</h4><p>To define a complete cssHook, combine the support test with a filled-out version of the skeleton template provided in the first example:</p><pre class="prettyprint">(function($) {
  if ( !$.cssHooks ) {
    throw("jQuery 1.4.3+ is needed for this plugin to work");
    return;
  }
  
  function styleSupport( prop ) {
    var vendorProp, supportedProp,
        capProp = prop.charAt(0).toUpperCase() + prop.slice(1),
        prefixes = [ "Moz", "Webkit", "O", "ms" ],
        div = document.createElement( "div" );

    if ( prop in div.style ) {
      supportedProp = prop;
    } else {
      for ( var i = 0; i &lt; prefixes.length; i++ ) {
        vendorProp = prefixes[i] + capProp;
        if ( vendorProp in div.style ) {
          supportedProp = vendorProp;
          break;
        }
      }
    }

    div = null;
    $.support[ prop ] = supportedProp
    return supportedProp;
  }

  var borderRadius = styleSupport( "borderRadius" );

  // Set cssHooks only for browsers that
  // support a vendor-prefixed border radius
  if ( borderRadius &amp;&amp; borderRadius !== "borderRadius" ) {
    $.cssHook.borderRadius = {
      get: function( elem, computed, extra ) {
        return $.css( elem, borderRadius );
      },
      set: function( elem, value) {
        elem.style[ borderRadius ] = value;
      }
    };
  }
})(jQuery);
</pre><p>You can then set the border radius in a supported browser using either the DOM (camelCased) style or the CSS (hyphenated) style:</p><pre class="prettyprint">
$("#element").css("borderRadius", "10px");
$("#another").css("border-radius", "20px");
</pre><p>If the browser lacks support for any form of the CSS property, vendor-prefixed or not, the style is not applied to the element. However, if the browser supports a proprietary alternative, it can be applied to the cssHooks instead. </p><pre class="prettyprint">
 (function($) {
  // feature test for support of a CSS property
  // and a proprietary alternative
  // ...


 if ( $.support.someCSSProp &amp;&amp; $.support.someCSSProp !== "someCSSProp" ) {

    // Set cssHooks for browsers that
    // support only a vendor-prefixed someCSSProp
    $.cssHook.someCSSProp = {
      get: function( elem, computed, extra ) {
        return $.css( elem, $.support.someCSSProp );
      },
      set: function( elem, value) {
        elem.style[ $.support.someCSSProp ] = value;
      }
    };
  } else if ( supportsProprietaryAlternative ) {
    $.cssHook.someCSSProp = {
      get: function( elem, computed, extra ) {
        // Handle crazy conversion from the proprietary alternative 
      },
      set: function( elem, value ) {
        // Handle crazy conversion to the proprietary alternative
      }
    }
  }

})(jQuery);
</pre><h4 id="special-units">Special units</h4><p>By default, jQuery adds a "px" unit to the values passed to the <code>.css()</code> method. This behavior can be prevented by adding the property to the <code>jQuery.cssNumber</code> object</p><pre class="prettyprint">$.cssNumber["someCSSProp"] = true;</pre><h4 id="animating">Animating with cssHooks</h4><p>A cssHook can also hook into jQuery's animation mechanism by adding a property to the <code>jQuery.fx.step</code> object:</p><pre class="prettyprint">$.fx.step["someCSSProp"] = function(fx){
  $.cssHooks["someCSSProp"].set( fx.elem, fx.now + fx.unit );
};
</pre><p>Note that this works best for simple numeric-value animations. More custom code may be required depending on the CSS property, the type of value it returns, and the animation's complexity.</p></div>
  </d:entry>
  <d:entry id="_data__key__value___214_0" d:title=".data()" d:value="data()">
    <d:index d:title=".data()" d:value="data()"/>
    <d:index d:title=".data( key, value )" d:value="data( key, value )"/>
    <d:index d:title=".data( obj )" d:value="data( obj )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.data( key, value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Store arbitrary data associated with the matched elements.</p><ul class="signatures">
<li class="signature" id="data-key-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.3/">1.2.3</a></span>.data( key, value )</h4>
<p class="arguement"><strong>key</strong>A string naming the piece of data to set.</p>
<p class="arguement"><strong>value</strong>The new data value; it can be any Javascript type including Array or Object.</p>
</li>
<li class="signature" id="data-obj">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.data( obj )</h4>
<p class="arguement"><strong>obj</strong>An object of key-value pairs of data to update.</p>
</li>
</ul>
<p>The <code>.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.</p><p> We can set several distinct values for a single element and retrieve them later:</p><pre>
$('body').data('foo', 52);
$('body').data('bar', { myType: 'test', count: 40 });

$('body').data('foo'); // 52
$('body').data(); // {foo: 52, bar: { myType: 'test', count: 40 }}
</pre><p>In jQuery 1.4.3 setting an element's data object with <code>.data(obj)</code> extends the data previously stored with that element. jQuery itself uses the <code>.data()</code> method to save information under the names 'events' and 'handle', and also reserves any data name starting with an underscore ('_') for internal use.</p><p>Prior to jQuery 1.4.3 (starting in jQuery 1.4) the .data() method completely replaced all data, instead of just extending the data object. If you are using third-party plugins it may not be advisable to completely replace the element's data object, since plugins may have also set data.</p><p>Due to the way browsers interact with plugins and external code, the <code>.data()</code> method cannot be used on <code>&lt;object&gt;</code> (unless it's a Flash plugin), <code>&lt;applet&gt;</code> or <code>&lt;embed&gt;</code> elements.</p><ul><li>Note that this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties.</li></ul></div>
  </d:entry>
  <d:entry id="_data__key___214_1" d:title=".data()" d:value="data()">
    <d:index d:title=".data()" d:value="data()"/>
    <d:index d:title=".data( key )" d:value="data( key )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.data( key )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>Returns value at named data store for the first element in the jQuery collection, as set by data(name, value).</p><ul class="signatures">
<li class="signature" id="data-key">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.3/">1.2.3</a></span>.data( key )</h4>
<p class="arguement"><strong>key</strong>Name of the data stored.</p>
</li>
<li class="signature" id="data"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.data()</h4></li>
</ul>
<p>The <code>.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</p><pre>
alert($('body').data('foo'));
alert($('body').data());
</pre><p>The above lines alert the data values that were set on the <code>body</code> element. If no data at all was set on that element, <code>undefined</code> is returned.</p><pre>
alert( $("body").data("foo")); //undefined
$("body").data("bar", "foobar");
alert( $("body").data("bar")); //foobar
</pre><p><strong>HTML 5 data- Attributes</strong></p><p>As of jQuery 1.4.3 <a href="http://ejohn.org/blog/html-5-data-attributes/">HTML 5 data- attributes</a> will be automatically pulled in to jQuery's data object. The treatment of attributes with embedded dashes was changed in jQuery 1.6 to conform to the <a href="http://www.w3.org/TR/html5/elements.html#embedding-custom-non-visible-data-with-the-data-attributes">W3C HTML5 specification</a>.</p><p>For example, given the following HTML:</p><pre>&lt;div data-role="page" data-last-value="43" data-hidden="true" data-options='{"name":"John"}'&gt;&lt;/div&gt;</pre><p>All of the following jQuery code will work.</p><pre>$("div").data("role") === "page";
$("div").data("lastValue") === 43;
$("div").data("hidden") === true;
$("div").data("options").name === "John";</pre><p>Every attempt is made to convert the string to a JavaScript value (this includes booleans, numbers, objects, arrays, and null) otherwise it is left as a string. To retrieve the value's attribute as a string without any attempt to convert it, use the <code><a href="/attr/">attr()</a></code> method. When the data attribute is an object (starts with '{') or array (starts with '[') then <code>jQuery.parseJSON</code> is used to parse the string; it must follow <a href="http://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example">valid JSON syntax</a> <em>including quoted property names</em>. The data- attributes are pulled in the first time the data property is accessed and then are no longer accessed or mutated (all data values are then stored internally in jQuery).</p><p>Calling <code>.data()</code> with no parameters retrieves all of the values as a JavaScript object. This object can be safely cached in a variable as long as a new object is not set with <code>.data(obj)</code>. Using the object directly to get or set values is faster than making individual calls to <code>.data()</code> to get or set each value:</p><pre>
var mydata = $("#mydiv").data();
if ( mydata.count &lt; 9 ) {
    mydata.count = 43;
    mydata.status = "embiggened";
}
</pre><ul><li>Note that this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties.</li></ul></div>
  </d:entry>
  <d:entry id="jquery_data__element__key__value___215_0" d:title="jQuery.data()" d:value="jQuerydata()">
    <d:index d:title="jQuery.data()" d:value="jQuerydata()"/>
    <d:index d:title="jQuery.data()" d:value="data()"/>
    <d:index d:title="jQuery.data( element, key, value )" d:value="jQuerydata( element, key, value )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.data( element, key, value )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>Store arbitrary data associated with the specified element. Returns the value that was set.</p><ul class="signatures"><li class="signature" id="jQuery-data-element-key-value">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.3/">1.2.3</a></span>jQuery.data( element, key, value )</h4>
<p class="arguement"><strong>element</strong>The DOM element to associate with the data.</p>
<p class="arguement"><strong>key</strong>A string naming the piece of data to set.</p>
<p class="arguement"><strong>value</strong>The new data value.</p>
</li></ul>
<p><strong>Note:</strong> This is a low-level method; a more convenient <code><a href="/data">.data()</a></code> is also available.</p><p>The <code>jQuery.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore free from memory leaks. jQuery ensures that the data is removed when DOM elements are removed via jQuery methods, and when the user leaves the page. We can set several distinct values for a single element and retrieve them later:</p><pre>
jQuery.data(document.body, 'foo', 52);
jQuery.data(document.body, 'bar', 'test');
</pre><p><em>Note:</em> this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties.</p></div>
  </d:entry>
  <d:entry id="jquery_data__element__key___215_1" d:title="jQuery.data()" d:value="jQuerydata()">
    <d:index d:title="jQuery.data()" d:value="jQuerydata()"/>
    <d:index d:title="jQuery.data()" d:value="data()"/>
    <d:index d:title="jQuery.data( element, key )" d:value="jQuerydata( element, key )"/>
    <d:index d:title="jQuery.data( element )" d:value="jQuerydata( element )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.data( element, key )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>Returns value at named data store for the element, as set by jQuery.data(element, name, value), or the full data store for the element.</p><ul class="signatures">
<li class="signature" id="jQuery-data-element-key">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.3/">1.2.3</a></span>jQuery.data( element, key )</h4>
<p class="arguement"><strong>element</strong>The DOM element to query for the data.</p>
<p class="arguement"><strong>key</strong>Name of the data stored.</p>
</li>
<li class="signature" id="jQuery-data-element">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>jQuery.data( element )</h4>
<p class="arguement"><strong>element</strong>The DOM element to query for the data.</p>
</li>
</ul>
<p><strong>Note:</strong> This is a low-level method; a more convenient <code><a href="/data">.data()</a></code> is also available.</p><p><strong>Regarding HTML5 data-* attributes:</strong> This low-level method does NOT retrieve the <code>data-*</code> attributes unless the more convenient <code><a href="/data">.data()</a></code> method has already retrieved them.</p><p>The <code>jQuery.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</p><pre>alert(jQuery.data( document.body, 'foo' ));
alert(jQuery.data( document.body ));</pre><p>The above lines alert the data values that were set on the <code>body</code> element. If nothing was set on that element, an empty string is returned.</p><p>Calling <code>jQuery.data(element)</code> retrieves all of the element's associated values as a JavaScript object. Note that jQuery itself uses this method to store data for internal use, such as event handlers, so do not assume that it contains only data that your own code has stored.</p><p><em>Note:</em> this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties.</p></div>
  </d:entry>
  <d:entry id="_ajaxerror__handler_event__jqxhr__ajaxsettings__thrownerror____216_0" d:title=".ajaxError()" d:value="ajaxError()">
    <d:index d:title=".ajaxError()" d:value="ajaxError()"/>
    <d:index d:title=".ajaxError( handler(event, jqXHR, ajaxSettings, thrownError) )" d:value="ajaxError( handler(event, jqXHR, ajaxSettings, thrownError) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.ajaxError( handler(event, jqXHR, ajaxSettings, thrownError) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.</p><ul class="signatures"><li class="signature" id="ajaxError-handlerevent- jqXHR- ajaxSettings- thrownError">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.ajaxError( handler(event, jqXHR, ajaxSettings, thrownError) )</h4>
<p class="arguement"><strong>handler(event, jqXHR, ajaxSettings, thrownError)</strong>The function to be invoked.</p>
</li></ul>
<p>Whenever an Ajax request completes with an error, jQuery triggers the <code>ajaxError</code> event. Any and all handlers that have been registered with the <code>.ajaxError()</code> method are executed at this time.</p><p>To observe this method in action, set up a basic Ajax load request.</p><pre>&lt;button class="trigger"&gt;Trigger&lt;/button&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre><p>Attach the event handler to any element:</p><pre>$("div.log").ajaxError(function() {
  $(this).text( "Triggered ajaxError handler." );
});</pre><p>Now, make an Ajax request using any jQuery method:</p><pre>$("button.trigger").click(function() {
  $("div.result").load( "ajax/missing.html" );
});</pre><p>When the user clicks the button and the Ajax request fails, because the requested file is missing, the log message is displayed.</p><p><strong>Note:</strong> Because <code>.ajaxError()</code> is implemented as a method of jQuery object instances, you can use the <code>this</code> keyword within the callback function to refer to the selected elements.</p><p>All <code>ajaxError</code> handlers are invoked, regardless of what Ajax request was completed. To differentiate between the requests, you can use the parameters passed to the handler. Each time an <code>ajaxError</code> handler is executed, it is passed the event object, the <code>jqXHR</code> object (prior to jQuery 1.5, the <code><abbr title="XMLHttpRequest">XHR</abbr></code> object), and the settings object that was used in the creation of the request. If the request failed because JavaScript raised an exception, the exception object is passed to the handler as a fourth parameter. For example, to restrict the error callback to only handling events dealing with a particular URL:</p><pre>$( "div.log" ).ajaxError(function(e, jqxhr, settings, exception) {
  if ( settings.url == "ajax/missing.html" ) {
    $(this).text( "Triggered ajaxError handler." );
  }
});</pre></div>
  </d:entry>
  <d:entry id="_dblclick__handler_eventobject____217_0" d:title=".dblclick()" d:value="dblclick()">
    <d:index d:title=".dblclick()" d:value="dblclick()"/>
    <d:index d:title=".dblclick( handler(eventObject) )" d:value="dblclick( handler(eventObject) )"/>
    <d:index d:title=".dblclick(  [eventData], handler(eventObject) )" d:value="dblclick(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.dblclick( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "dblclick" JavaScript event, or trigger that event on an element.</p><ul class="signatures">
<li class="signature" id="dblclick-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.dblclick( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="dblclick-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.dblclick(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
<li class="signature" id="dblclick"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.dblclick()</h4></li>
</ul>
<p>This method is a shortcut for <code>.bind('dblclick', handler)</code> in the first two variations, and <code>.trigger('dblclick')</code> in the third.
The <code>dblclick</code> event is sent to an element when the element is double-clicked. Any HTML element can receive this event.
For example, consider the HTML:</p><pre>&lt;div id="target"&gt;
  Double-click here
&lt;/div&gt;
&lt;div id="other"&gt;
  Trigger the handler
&lt;/div&gt;</pre><p class="image"><img src="/images/0042_05_04.png" alt=""/></p><p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p><pre>$('#target').dblclick(function() {
  alert('Handler for .dblclick() called.');
});</pre><p>Now double-clicking on this element displays the alert:</p><p><span class="output">Handler for .dblclick() called.</span></p><p>To trigger the event manually, apply <code>.dblclick()</code> without an argument:</p><pre>$('#other').click(function() {
  $('#target').dblclick();
});</pre><p>After this code executes, (single) clicks on <span class="output">Trigger the handler</span> will also alert the message.</p><p>The <code>dblclick</code> event is only triggered after this exact series of events:</p><ul><li>The mouse button is depressed while the pointer is inside the element.</li>
<li>The mouse button is released while the pointer is inside the element.</li>
<li>The mouse button is depressed again while the pointer is inside the element, within a time window that is system-dependent.</li>
<li>The mouse button is released while the pointer is inside the element.</li>
</ul><p>It is inadvisable to bind handlers to both the <code>click</code> and <code>dblclick</code> events for the same element. The sequence of events triggered varies from browser to browser, with some receiving two <code>click</code> events before the <code>dblclick</code> and others only one. Double-click sensitivity (maximum time between clicks that is detected as a double click) can vary by operating system and browser, and is often user-configurable.
</p></div>
  </d:entry>
  <d:entry id="deferred_always__alwayscallbacks____alwayscallbacks_____218_0" d:title="deferred.always()" d:value="deferredalways()">
    <d:index d:title="deferred.always()" d:value="deferredalways()"/>
    <d:index d:title="deferred.always( alwaysCallbacks [, alwaysCallbacks] )" d:value="deferredalways( alwaysCallbacks [, alwaysCallbacks] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.always( alwaysCallbacks [, alwaysCallbacks]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Deferred">Deferred</a></span>
</h2><p class="desc"><strong>Description: </strong> Add handlers to be called when the Deferred object is either resolved or rejected. </p><ul class="signatures"><li class="signature" id="deferred-always-alwaysCallbacks-alwaysCallbacks">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>deferred.always( alwaysCallbacks [, alwaysCallbacks] )</h4>
<p class="arguement"><strong>alwaysCallbacks</strong>
        A function, or array of functions, that is called when the Deferred is resolved or rejected.
      </p>
<p class="arguement"><strong>alwaysCallbacks</strong>
        Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.
      </p>
</li></ul>
<p>The argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the <code>alwaysCallbacks</code> are called. Since <code>deferred.always()</code> returns the Deferred object, other methods of the Deferred object can be chained to this one, including additional <code>.always()</code> methods. When the Deferred is resolved or rejected, callbacks are executed in the order they were added, using the arguments provided to the <a href="/deferred.resolve/"><code>resolve</code></a>, <a href="/deferred.reject/"><code>reject</code></a>, <a href="/deferred.resolveWith/"><code>resolveWith</code></a> or <a href="/deferred.rejectWith/"><code>rejectWith</code></a> method calls. For more information, see the documentation for <a href="/category/deferred-object/">Deferred object</a>.</p></div>
  </d:entry>
  <d:entry id="deferred_done__donecallbacks____donecallbacks_____219_0" d:title="deferred.done()" d:value="deferreddone()">
    <d:index d:title="deferred.done()" d:value="deferreddone()"/>
    <d:index d:title="deferred.done( doneCallbacks [, doneCallbacks] )" d:value="deferreddone( doneCallbacks [, doneCallbacks] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.done( doneCallbacks [, doneCallbacks]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Deferred">Deferred</a></span>
</h2><p class="desc"><strong>Description: </strong> Add handlers to be called when the Deferred object is resolved. </p><ul class="signatures"><li class="signature" id="deferred-done-doneCallbacks-doneCallbacks">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>deferred.done( doneCallbacks [, doneCallbacks] )</h4>
<p class="arguement"><strong>doneCallbacks</strong>
             A function, or array of functions, that are called when the Deferred is resolved.
           </p>
<p class="arguement"><strong>doneCallbacks</strong>
             Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.
           </p>
</li></ul>
<p>The <code>deferred.done()</code> method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is resolved, the doneCallbacks are called. Callbacks are executed in the order they were added. Since <code>deferred.done()</code> returns the deferred object, other methods of the deferred object can be chained to this one, including additional <code>.done()</code> methods. When the Deferred is resolved, doneCallbacks are executed using the arguments provided to the <a href="/deferred.resolve/"><code>resolve</code></a> or <a href="/deferred.resolveWith/"><code>resolveWith</code></a> method call in the order they were added. For more information, see the documentation for <a href="/category/deferred-object/">Deferred object</a>.</p></div>
  </d:entry>
  <d:entry id="deferred_fail__failcallbacks____failcallbacks_____220_0" d:title="deferred.fail()" d:value="deferredfail()">
    <d:index d:title="deferred.fail()" d:value="deferredfail()"/>
    <d:index d:title="deferred.fail( failCallbacks [, failCallbacks] )" d:value="deferredfail( failCallbacks [, failCallbacks] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.fail( failCallbacks [, failCallbacks]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Deferred">Deferred</a></span>
</h2><p class="desc"><strong>Description: </strong> Add handlers to be called when the Deferred object is rejected. </p><ul class="signatures"><li class="signature" id="deferred-fail-failCallbacks-failCallbacks">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>deferred.fail( failCallbacks [, failCallbacks] )</h4>
<p class="arguement"><strong>failCallbacks</strong>
             A function, or array of functions, that are called when the Deferred is rejected.
           </p>
<p class="arguement"><strong>failCallbacks</strong>
             Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.
           </p>
</li></ul>
<p>The <code>deferred.fail()</code> method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since <code>deferred.fail()</code> returns the deferred object, other methods of the deferred object can be chained to this one, including additional <code>deferred.fail()</code> methods. The failCallbacks are executed using the arguments provided to the <a href="deferred.reject"><code>deferred.reject()</code></a> or <a href="deferred.rejectWith"><code>deferred.rejectWith()</code></a> method call in the order they were added. For more information, see the documentation for <a href="/category/deferred-object/">Deferred object</a>.</p></div>
  </d:entry>
  <d:entry id="deferred_isrejected___221_0" d:title="deferred.isRejected()" d:value="deferredisRejected()">
    <d:index d:title="deferred.isRejected()" d:value="deferredisRejected()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.isRejected()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong> Determine whether a Deferred object has been rejected. </p><ul class="signatures"><li class="signature" id="deferred-isRejected"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>deferred.isRejected()</h4></li></ul>
<p>Returns <code>true</code> if the Deferred object is in the rejected state, meaning that either <a href="http://api.jquery.com/deferred.reject/"><code>deferred.reject()</code></a> or <a href="http://api.jquery.com/deferred.rejectWith/"><code>deferred.rejectWith()</code></a> has been called for the object and the failCallbacks have been called (or are in the process of being called).</p><p>Note that a Deferred object can be in one of three states: unresolved, resolved, or rejected; use <a href="http://api.jquery.com/deferred.isResolved/"><code>deferred.isResolved()</code></a> to determine whether the Deferred object is in the resolved state. These methods are primarily useful for debugging, for example to determine whether a Deferred has already been resolved even though you are inside code that intended to reject it.</p></div>
  </d:entry>
  <d:entry id="deferred_isresolved___222_0" d:title="deferred.isResolved()" d:value="deferredisResolved()">
    <d:index d:title="deferred.isResolved()" d:value="deferredisResolved()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.isResolved()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong> Determine whether a Deferred object has been resolved. </p><ul class="signatures"><li class="signature" id="deferred-isResolved"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>deferred.isResolved()</h4></li></ul>
<p>Returns <code>true</code> if the Deferred object is in the resolved state, meaning that either <a href="http://api.jquery.com/deferred.resolve/"><code>deferred.resolve()</code></a> or <a href="http://api.jquery.com/deferred.resolveWith/"><code>deferred.resolveWith()</code></a> has been called for the object and the doneCallbacks have been called (or are in the process of being called).</p><p>Note that a Deferred object can be in one of three states: unresolved, resolved, or rejected; use <a href="http://api.jquery.com/deferred.isRejected/"><code>deferred.isRejected()</code></a> to determine whether the Deferred object is in the rejected state. These methods are primarily useful for debugging, for example to determine whether a Deferred has already been resolved even though you are inside code that intended to reject it.</p></div>
  </d:entry>
  <d:entry id="deferred_pipe____donefilter______failfilter_____223_0" d:title="deferred.pipe()" d:value="deferredpipe()">
    <d:index d:title="deferred.pipe()" d:value="deferredpipe()"/>
    <d:index d:title="deferred.pipe(  [doneFilter] [, failFilter] )" d:value="deferredpipe(  [doneFilter] [, failFilter] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.pipe(  [doneFilter]  [, failFilter]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Promise">Promise</a></span>
</h2><p class="desc"><strong>Description: </strong> Utility method to filter and/or chain Deferreds.  </p><ul class="signatures"><li class="signature" id="deferred-pipe-doneFilter-failFilter">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.6/">1.6</a></span>deferred.pipe(  [doneFilter] [, failFilter] )</h4>
<p class="arguement"><strong>doneFilter</strong>
        An optional function that is called when the Deferred is resolved.
      </p>
<p class="arguement"><strong>failFilter</strong>
        An optional function that is called when the Deferred is rejected.
      </p>
</li></ul>
<p>The <code>deferred.pipe()</code> method returns a new promise that filters the status and values of a deferred through a function.  The <code>doneFilter</code> and <code>failFilter</code> functions filter the original deferred's resolved / rejected status and values.  These filter functions can return a new value to be passed along to the piped promise's <code>done()</code> or <code>fail()</code> callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise's callbacks. If the filter function used is <code>null</code>, or not specified, the piped promise will be resolved or rejected with the same values as the original.</p></div>
  </d:entry>
  <d:entry id="deferred_promise____target_____224_0" d:title="deferred.promise()" d:value="deferredpromise()">
    <d:index d:title="deferred.promise()" d:value="deferredpromise()"/>
    <d:index d:title="deferred.promise(  [target] )" d:value="deferredpromise(  [target] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.promise(  [target]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Promise">Promise</a></span>
</h2><p class="desc"><strong>Description: </strong> Return a Deferred's Promise object. </p><ul class="signatures"><li class="signature" id="deferred-promise-target">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>deferred.promise(  [target] )</h4>
<p class="arguement"><strong>target</strong>Object onto which the promise methods have to be attached</p>
</li></ul>
<p>The <code>deferred.promise()</code> method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (<code>then</code>, <code>done</code>, <code>fail</code>, <code>isResolved</code>, and <code>isRejected</code>), but not ones that change the state (<code>resolve</code>, <code>reject</code>, <code>resolveWith</code>, and <code>rejectWith</code>). <strong>As of jQuery 1.6</strong>, the Promise also exposes the <code>always</code> and <code>pipe</code> Deferred methods.</p><p>If <code>target</code> is provided, <code>deferred.promise()</code> will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.</p><p>If you are creating a Deferred, keep a reference to the Deferred so that it can be resolved or rejected at some point. Return <em>only</em> the Promise object via <code>deferred.promise()</code> so other code can register callbacks or inspect the current state.</p><p>For more information, see the documentation for <a href="/category/deferred-object/">Deferred object</a>.</p></div>
  </d:entry>
  <d:entry id="deferred_reject__args___225_0" d:title="deferred.reject()" d:value="deferredreject()">
    <d:index d:title="deferred.reject()" d:value="deferredreject()"/>
    <d:index d:title="deferred.reject( args )" d:value="deferredreject( args )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.reject( args )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Deferred">Deferred</a></span>
</h2><p class="desc"><strong>Description: </strong> Reject a Deferred object and call any failCallbacks with the given args. </p><ul class="signatures"><li class="signature" id="deferred-reject-args">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>deferred.reject( args )</h4>
<p class="arguement"><strong>args</strong>
             Optional arguments that are passed to the failCallbacks.
           </p>
</li></ul>
<p>Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through <a href="http://api.jquery.com/deferred.promise/"><code>deferred.promise()</code></a>.</p><p>When the Deferred is rejected, any failCallbacks added by <a href="http://api.jquery.com/deferred.then/"><code>deferred.then</code></a> or <a href="http://api.jquery.com/deferred.fail/"><code>deferred.fail</code></a> are called. Callbacks are executed in the order they were added. Each callback is passed the <code>args</code> from the <code>deferred.reject()</code> call. Any failCallbacks added after the Deferred enters the rejected state are executed immediately when they are added, using the arguments that were passed to the <code>.reject()</code> call. For more information, see the documentation for <a href="http://api.jquery.com/category/deferred-object/">Deferred object</a>.</p></div>
  </d:entry>
  <d:entry id="deferred_rejectwith__context____args_____226_0" d:title="deferred.rejectWith()" d:value="deferredrejectWith()">
    <d:index d:title="deferred.rejectWith()" d:value="deferredrejectWith()"/>
    <d:index d:title="deferred.rejectWith( context [, args] )" d:value="deferredrejectWith( context [, args] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.rejectWith( context [, args]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Deferred">Deferred</a></span>
</h2><p class="desc"><strong>Description: </strong> Reject a Deferred object and call any failCallbacks with the given context and args. </p><ul class="signatures"><li class="signature" id="deferred-rejectWith-context-args">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>deferred.rejectWith( context [, args] )</h4>
<p class="arguement"><strong>context</strong>
             Context passed to the failCallbacks as the <code>this</code> object.
           </p>
<p class="arguement"><strong>args</strong>
             An optional array of arguments that are passed to the failCallbacks.
           </p>
</li></ul>
<p>Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through <a href="http://api.jquery.com/deferred.promise/"><code>deferred.promise()</code></a>.</p><p>When the Deferred is rejected, any failCallbacks added by <a href="/deferred.then/"><code>deferred.then</code></a> or <a href="/deferred.fail/"><code>deferred.fail</code></a> are called. Callbacks are executed in the order they were added. Each callback is passed the <code>args</code> from the <code>deferred.reject()</code> call. Any failCallbacks added after the Deferred enters the rejected state are executed immediately when they are added, using the arguments that were passed to the <code>.reject()</code> call. For more information, see the documentation for <a href="/category/deferred-object/">Deferred object</a>.</p></div>
  </d:entry>
  <d:entry id="jquery_ajaxprefilter____datatypes____handler_options__originaloptions__jqxhr____227_0" d:title="jQuery.ajaxPrefilter()" d:value="jQueryajaxPrefilter()">
    <d:index d:title="jQuery.ajaxPrefilter()" d:value="jQueryajaxPrefilter()"/>
    <d:index d:title="jQuery.ajaxPrefilter()" d:value="ajaxPrefilter()"/>
    <d:index d:title="jQuery.ajaxPrefilter(  [dataTypes], handler(options, originalOptions, jqXHR) )" d:value="jQueryajaxPrefilter(  [dataTypes], handler(options, originalOptions, jqXHR) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.ajaxPrefilter(  [dataTypes] , handler(options, originalOptions, jqXHR) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#undefined">undefined</a></span>
</h2><p class="desc"><strong>Description: </strong>Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().</p><ul class="signatures"><li class="signature" id="jQuery-ajaxPrefilter-dataTypes-handleroptions- originalOptions- jqXHR">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>jQuery.ajaxPrefilter(  [dataTypes], handler(options, originalOptions, jqXHR) )</h4>
<p class="arguement"><strong>dataTypes</strong>An optional string containing one or more space-separated dataTypes</p>
<p class="arguement"><strong>handler(options, originalOptions, jqXHR)</strong>A handler to set default values for future Ajax requests.</p>
</li></ul>
<p>A typical prefilter registration using <code>$.ajaxPrefilter()</code> looks like this:</p><pre>
$.ajaxPrefilter( function( options, originalOptions, jqXHR ) {
  // Modify options, control originalOptions, store jqXHR, etc
});
</pre><p>where:</p><ul>
<li>
<code>options</code> are the request options</li>
<li>
<code>originalOptions</code> are the options as provided to the ajax method, unmodified and, thus, without defaults from <code>ajaxSettings</code>
</li>
<li>
<code>jqXHR</code> is the jqXHR object of the request</li>
</ul>
<p>Prefilters are a perfect fit when custom options need to be handled.  Given the following code, for example, a call to <code>$.ajax()</code> would automatically abort a request to the same URL if the custom <code>abortOnRetry</code> option is set to <code>true</code>:</p><pre>
var currentRequests = {};

$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {
  if ( options.abortOnRetry ) {
    if ( currentRequests[ options.url ] ) {
      currentRequests[ options.url ].abort();
    }
    currentRequests[ options.url ] = jqXHR;
  }
});
</pre><p>Prefilters can also be used to modify existing options. For example, the following proxies cross-domain requests through http://mydomain.net/proxy/:</p><pre>
$.ajaxPrefilter( function( options ) {
  if ( options.crossDomain ) {
    options.url = "http://mydomain.net/proxy/" + encodeURIComponent( options.url );
    options.crossDomain = false;
  }
});
</pre><p>If the optional <code>dataTypes</code> argument is supplied, the prefilter will be only be applied to requests with the indicated dataTypes. For example, the following only applies the given prefilter to JSON and script requests:</p><pre>
$.ajaxPrefilter( "json script", function( options, originalOptions, jqXHR ) {
  // Modify options, control originalOptions, store jqXHR, etc
});
</pre><p>The <code>$.ajaxPrefilter()</code> method can also redirect a request to another dataType by returning that dataType. For example, the following sets a request as "script" if the URL has some specific properties defined in a custom <code>isActuallyScript()</code> function:</p><pre>
$.ajaxPrefilter(function( options ) {
  if ( isActuallyScript( options.url ) ) {
    return "script";
  }
});
</pre><p>This would ensure not only that the request is considered "script" but also that all the prefilters specifically attached to the script dataType would be applied to it.</p></div>
  </d:entry>
  <d:entry id="deferred_resolve__args___228_0" d:title="deferred.resolve()" d:value="deferredresolve()">
    <d:index d:title="deferred.resolve()" d:value="deferredresolve()"/>
    <d:index d:title="deferred.resolve( args )" d:value="deferredresolve( args )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.resolve( args )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Deferred">Deferred</a></span>
</h2><p class="desc"><strong>Description: </strong> Resolve a Deferred object and call any doneCallbacks with the given args. </p><ul class="signatures"><li class="signature" id="deferred-resolve-args">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>deferred.resolve( args )</h4>
<p class="arguement"><strong>args</strong>
             Optional arguments that are passed to the doneCallbacks.
           </p>
</li></ul>
<p>When the Deferred is resolved, any doneCallbacks added by <a href="/deferred.then/"><code>deferred.then</code></a> or <a href="/deferred.done/"><code>deferred.done</code></a> are called. Callbacks are executed in the order they were added. Each callback is passed the <code>args</code> from the <code>.resolve()</code>. Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the <code>.resolve()</code> call. For more information, see the documentation for <a href="/category/deferred-object/">Deferred object</a>.</p></div>
  </d:entry>
  <d:entry id="deferred_resolvewith__context____args_____229_0" d:title="deferred.resolveWith()" d:value="deferredresolveWith()">
    <d:index d:title="deferred.resolveWith()" d:value="deferredresolveWith()"/>
    <d:index d:title="deferred.resolveWith( context [, args] )" d:value="deferredresolveWith( context [, args] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.resolveWith( context [, args]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Deferred">Deferred</a></span>
</h2><p class="desc"><strong>Description: </strong> Resolve a Deferred object and call any doneCallbacks with the given context and args. </p><ul class="signatures"><li class="signature" id="deferred-resolveWith-context-args">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>deferred.resolveWith( context [, args] )</h4>
<p class="arguement"><strong>context</strong>
             Context passed to the doneCallbacks as the <code>this</code> object.
           </p>
<p class="arguement"><strong>args</strong>
             An optional array of arguments that are passed to the doneCallbacks.
           </p>
</li></ul>
<p>Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through <a href="http://api.jquery.com/deferred.promise/"><code>deferred.promise()</code></a>.</p><p>When the Deferred is resolved, any doneCallbacks added by <a href="/deferred.then/"><code>deferred.then</code></a> or <a href="/deferred.done/"><code>deferred.done</code></a> are called. Callbacks are executed in the order they were added. Each callback is passed the <code>args</code> from the <code>.resolve()</code>. Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the <code>.resolve()</code> call. For more information, see the documentation for <a href="/category/deferred-object/">Deferred object</a>.</p></div>
  </d:entry>
  <d:entry id="deferred_then__donecallbacks__failcallbacks___230_0" d:title="deferred.then()" d:value="deferredthen()">
    <d:index d:title="deferred.then()" d:value="deferredthen()"/>
    <d:index d:title="deferred.then( doneCallbacks, failCallbacks )" d:value="deferredthen( doneCallbacks, failCallbacks )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">deferred.then( doneCallbacks, failCallbacks )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Deferred">Deferred</a></span>
</h2><p class="desc"><strong>Description: </strong> Add handlers to be called when the Deferred object is resolved or rejected. </p><ul class="signatures"><li class="signature" id="deferred-then-doneCallbacks-failCallbacks">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.5/">1.5</a></span>deferred.then( doneCallbacks, failCallbacks )</h4>
<p class="arguement"><strong>doneCallbacks</strong>
             A function, or array of functions, called when the Deferred is resolved.
           </p>
<p class="arguement"><strong>failCallbacks</strong>
             A function, or array of functions, called when the Deferred is rejected.
           </p>
</li></ul>
<p>Both arguments can be either a single function or an array of functions. Either argument can also be null if no callback of that type is desired. Alternatively, use <code>.done()</code> or <code>.fail()</code> to set only doneCallbacks or failCallbacks. When the Deferred is resolved, the doneCallbacks are called. If the Deferred is instead rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since <code>deferred.then</code> returns the deferred object, other methods of the deferred object can be chained to this one, including additional <code>.then()</code> methods. For more information, see the documentation for <a href="http://api.jquery.com/category/deferred-object/">Deferred object</a>.</p></div>
  </d:entry>
  <d:entry id="_delay__duration____queuename_____231_0" d:title=".delay()" d:value="delay()">
    <d:index d:title=".delay()" d:value="delay()"/>
    <d:index d:title=".delay( duration [, queueName] )" d:value="delay( duration [, queueName] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.delay( duration [, queueName]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Set a timer to delay execution of subsequent items in the queue.</p><ul class="signatures"><li class="signature" id="delay-duration-queueName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.delay( duration [, queueName] )</h4>
<p class="arguement"><strong>duration</strong>An integer indicating the number of milliseconds to delay execution of the next item in the queue.</p>
<p class="arguement"><strong>queueName</strong>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</p>
</li></ul>
<p>Added to jQuery in version 1.4, the <code>.delay()</code> method allows us to delay the execution of functions that follow it in the queue. It can be used with the standard effects queue or with a custom queue. Only subsequent events in a queue are delayed; for example this will <em>not</em> delay the no-arguments forms of <code>.show()</code> or <code>.hide()</code>  which do not use the effects queue.</p><p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</p><p>Using the standard effects queue, we can, for example, set an 800-millisecond delay between the <code>.slideUp()</code> and <code>.fadeIn()</code> of <code>&lt;div id="foo"&gt;</code>:</p><pre>$('#foo').slideUp(300).delay(800).fadeIn(400);</pre><p>When this statement is executed, the element slides up for 300 milliseconds and then pauses for 800 milliseconds before fading in for 400 milliseconds.</p><blockquote><p><strong>The <code>.delay()</code> method is best for delaying between queued jQuery effects. Because it is limited—it doesn't, for example, offer a way to cancel the delay—<code>.delay()</code> is not a replacement for JavaScript's native <a href="https://developer.mozilla.org/en/DOM/window.setTimeout">setTimeout</a> function, which may be more appropriate for certain use cases.</strong></p></blockquote></div>
  </d:entry>
  <d:entry id="_delegate__selector__eventtype__handler___232_0" d:title=".delegate()" d:value="delegate()">
    <d:index d:title=".delegate()" d:value="delegate()"/>
    <d:index d:title=".delegate( selector, eventType, handler )" d:value="delegate( selector, eventType, handler )"/>
    <d:index d:title=".delegate( selector, eventType, eventData, handler )" d:value="delegate( selector, eventType, eventData, handler )"/>
    <d:index d:title=".delegate( selector, events )" d:value="delegate( selector, events )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.delegate( selector, eventType, handler )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</p><ul class="signatures">
<li class="signature" id="delegate-selector-eventType-handler">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.2/">1.4.2</a></span>.delegate( selector, eventType, handler )</h4>
<p class="arguement"><strong>selector</strong>A selector to filter the elements that trigger the event.</p>
<p class="arguement"><strong>eventType</strong>A string containing one or more space-separated JavaScript event types, such as "click" or "keydown," or custom event names.</p>
<p class="arguement"><strong>handler</strong>A function to execute at the time the event is triggered.</p>
</li>
<li class="signature" id="delegate-selector-eventType-eventData-handler">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.2/">1.4.2</a></span>.delegate( selector, eventType, eventData, handler )</h4>
<p class="arguement"><strong>selector</strong>A selector to filter the elements that trigger the event.</p>
<p class="arguement"><strong>eventType</strong>A string containing one or more space-separated JavaScript event types, such as "click" or "keydown," or custom event names.</p>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler</strong>A function to execute at the time the event is triggered.</p>
</li>
<li class="signature" id="delegate-selector-events">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.delegate( selector, events )</h4>
<p class="arguement"><strong>selector</strong>A selector to filter the elements that trigger the event.</p>
<p class="arguement"><strong>events</strong>A map of one or more event types and functions to execute for them.</p>
</li>
</ul>
<p>Delegate is an alternative to using the <a href="/live">.live()</a> method, allowing for each binding of event delegation to specific DOM elements. For example the following delegate code:</p><pre>$("table").delegate("td", "hover", function(){
	$(this).toggleClass("hover");
});</pre><p>Is equivalent to the following code written using <code>.live()</code>:</p><pre>$("table").each(function(){
	$("td", this).live("hover", function(){
		$(this).toggleClass("hover");
	});
});</pre><p>See also the <a href="/undelegate">.undelegate()</a> method for a way of removing event handlers added in <a href="/delegate">.delegate()</a>.</p><p>Passing and handling event data works <a href="http://api.jquery.com/bind/#passing-event-data">the same way as it does for .bind()</a>.</p><ul><li>Since the <a href="http://api.jquery.com/live"><code>.live()</code></a> method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by <code><a href="http://api.jquery.com/delegate/">.delegate()</a></code> will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling <code><a href="http://api.jquery.com/event.stopPropagation/">event.stopPropagation()</a></code> or returning <code>false</code>.</li></ul></div>
  </d:entry>
  <d:entry id="_dequeue____queuename_____233_0" d:title=".dequeue()" d:value="dequeue()">
    <d:index d:title=".dequeue()" d:value="dequeue()"/>
    <d:index d:title=".dequeue(  [queueName] )" d:value="dequeue(  [queueName] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.dequeue(  [queueName]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Execute the next function on the queue for the matched elements.</p><ul class="signatures"><li class="signature" id="dequeue-queueName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2/">1.2</a></span>.dequeue(  [queueName] )</h4>
<p class="arguement"><strong>queueName</strong>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</p>
</li></ul>
<p>When <code>.dequeue()</code> is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause <code>.dequeue()</code> to be called, so that the sequence can continue.</p></div>
  </d:entry>
  <d:entry id="jquery_dequeue__element____queuename_____234_0" d:title="jQuery.dequeue()" d:value="jQuerydequeue()">
    <d:index d:title="jQuery.dequeue()" d:value="jQuerydequeue()"/>
    <d:index d:title="jQuery.dequeue()" d:value="dequeue()"/>
    <d:index d:title="jQuery.dequeue( element [, queueName] )" d:value="jQuerydequeue( element [, queueName] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.dequeue( element [, queueName]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Execute the next function on the queue for the matched element.</p><ul class="signatures"><li class="signature" id="jQuery-dequeue-element-queueName">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>jQuery.dequeue( element [, queueName] )</h4>
<p class="arguement"><strong>element</strong>A DOM element from which to remove and execute a queued function.</p>
<p class="arguement"><strong>queueName</strong>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</p>
</li></ul>
<p><strong>Note:</strong> This is a low-level method, you should probably use <code><a href="/dequeue">.dequeue()</a></code> instead.</p><p>When <code>jQuery.dequeue()</code> is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause <code>jQuery.dequeue()</code> to be called, so that the sequence can continue.</p></div>
  </d:entry>
  <d:entry id="descendant_235_0" d:title="Descendant Selector (“ancestor descendant”)" d:value="Descendant Selector (“ancestor descendant”)">
    <d:index d:title="Descendant Selector (“ancestor descendant”)" d:value="Descendant Selector (“ancestor descendant”)"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">descendant</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects all elements that are descendants of a given ancestor.</p><ul class="signatures"><li><dl class="arguments">
<dt>ancestor</dt>
<dd>Any valid selector.</dd>
<dt>descendant</dt>
<dd>A selector to filter the descendant elements.</dd>
</dl></li></ul>
<p>A descendant of an element could be a child, grandchild, great-grandchild, and so on, of that element.</p></div>
  </d:entry>
  <d:entry id="_detach____selector_____236_0" d:title=".detach()" d:value="detach()">
    <d:index d:title=".detach()" d:value="detach()"/>
    <d:index d:title=".detach(  [selector] )" d:value="detach(  [selector] )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.detach(  [selector]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove the set of matched elements from the DOM.</p><ul class="signatures"><li class="signature" id="detach-selector">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.detach(  [selector] )</h4>
<p class="arguement"><strong>selector</strong>A selector expression that filters the set of matched elements to be removed.</p>
</li></ul>
<p>The <code>.detach()</code> method is the same as <code><a href="/remove">.remove()</a></code>, except that <code>.detach()</code> keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.</p></div>
  </d:entry>
  <d:entry id="_die___237_0" d:title=".die()" d:value="die()">
    <d:index d:title=".die()" d:value="die()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.die()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove all event handlers previously attached using .live() from the elements.</p><ul class="signatures"><li class="signature" id="die"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.1/">1.4.1</a></span>.die()</h4></li></ul>
<p>Any handler that has been attached with <code>.live()</code> can be removed with <code>.die()</code>. This method is analogous to calling <code>.unbind()</code> with no arguments, which is used to remove all handlers attached with <code>.bind()</code>.
See the discussions of <code>.live()</code> and <code>.unbind()</code> for further details.</p><p><strong>Note:</strong> In order for .die() to function correctly, the selector used with it must match exactly the selector initially used with .live().</p></div>
  </d:entry>
  <d:entry id="_die__eventtype____handler_____237_1" d:title=".die()" d:value="die()">
    <d:index d:title=".die()" d:value="die()"/>
    <d:index d:title=".die( eventType [, handler] )" d:value="die( eventType [, handler] )"/>
    <d:index d:title=".die( eventTypes )" d:value="die( eventTypes )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.die( eventType [, handler]  )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove an event handler previously attached using .live() from the elements.</p><ul class="signatures">
<li class="signature" id="die-eventType-handler">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>.die( eventType [, handler] )</h4>
<p class="arguement"><strong>eventType</strong>A string containing a JavaScript event type, such as <code>click</code> or <code>keydown</code>.</p>
<p class="arguement"><strong>handler</strong>The function that is no longer to be executed.</p>
</li>
<li class="signature" id="die-eventTypes">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.die( eventTypes )</h4>
<p class="arguement"><strong>eventTypes</strong>A map of one or more event types, such as <code>click</code> or <code>keydown</code> and their corresponding functions that are no longer to be executed.</p>
</li>
</ul>
<p>Any handler that has been attached with <code>.live()</code> can be removed with <code>.die()</code>. This method is analogous to <code>.unbind()</code>, which is used to remove handlers attached with <code>.bind()</code>.
See the discussions of <code>.live()</code> and <code>.unbind()</code> for further details.</p><p><strong>Note:</strong> In order for <code>.die()</code> to function correctly, the selector used with it must match exactly the selector initially used with <code>.live()</code>.</p></div>
  </d:entry>
  <d:entry id="_ajaxsend__handler_event__jqxhr__ajaxoptions____238_0" d:title=".ajaxSend()" d:value="ajaxSend()">
    <d:index d:title=".ajaxSend()" d:value="ajaxSend()"/>
    <d:index d:title=".ajaxSend( handler(event, jqXHR, ajaxOptions) )" d:value="ajaxSend( handler(event, jqXHR, ajaxOptions) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.ajaxSend( handler(event, jqXHR, ajaxOptions) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.</p><ul class="signatures"><li class="signature" id="ajaxSend-handlerevent- jqXHR- ajaxOptions">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.ajaxSend( handler(event, jqXHR, ajaxOptions) )</h4>
<p class="arguement"><strong>handler(event, jqXHR, ajaxOptions)</strong>The function to be invoked.</p>
</li></ul>
<p>Whenever an Ajax request is about to be sent, jQuery triggers the <code>ajaxSend</code> event. Any and all handlers that have been registered with the <code>.ajaxSend()</code> method are executed at this time.</p><p>To observe this method in action, we can set up a basic Ajax load request:</p><pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre><p>We can attach our event handler to any element:</p><pre>$('.log').ajaxSend(function() {
  $(this).text('Triggered ajaxSend handler.');
});</pre><p>Now, we can make an Ajax request using any jQuery method:</p><pre>$('.trigger').click(function() {
  $('.result').load('ajax/test.html');
});</pre><p>When the user clicks the button and the Ajax request is about to begin, the log message is displayed.</p><p><strong>Note:</strong> Because <code>.ajaxSend()</code> is implemented as a method of jQuery instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p><p>All <code>ajaxSend</code> handlers are invoked, regardless of what Ajax request is to be sent. If we must differentiate between the requests, we can use the parameters passed to the handler. Each time an <code>ajaxSend</code> handler is executed, it is passed the event object, the <code>jqXHR</code> object (in version 1.4, <code>XMLHttpRequest</code>object), and the <a href="http://api.jquery.com/jQuery.ajax/">settings object</a> that was used in the creation of the Ajax request. For example, we can restrict our callback to only handling events dealing with a particular URL:</p><pre>$('.log').ajaxSend(function(e, jqxhr, settings) {
  if (settings.url == 'ajax/test.html') {
    $(this).text('Triggered ajaxSend handler.');
  }
});</pre></div>
  </d:entry>
  <d:entry id="disabled_239_0" d:title=":disabled Selector" d:value="disabled Selector">
    <d:index d:title=":disabled Selector" d:value="disabled Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">disabled</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements that are disabled.</p>
      <p>As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':disabled')</code> is equivalent to <code>$('*:disabled')</code>, so <code>$('input:disabled')</code> should be used instead. </p>
    </div>
  </d:entry>
  <d:entry id="jquery_each__collection__callback_indexinarray__valueofelement____240_0" d:title="jQuery.each()" d:value="jQueryeach()">
    <d:index d:title="jQuery.each()" d:value="jQueryeach()"/>
    <d:index d:title="jQuery.each()" d:value="each()"/>
    <d:index d:title="jQuery.each( collection, callback(indexInArray, valueOfElement) )" d:value="jQueryeach( collection, callback(indexInArray, valueOfElement) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.each( collection, callback(indexInArray, valueOfElement) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong>A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.</p><ul class="signatures"><li class="signature" id="jQuery-each-collection-callbackindexInArray- valueOfElement">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>jQuery.each( collection, callback(indexInArray, valueOfElement) )</h4>
<p class="arguement"><strong>collection</strong>The object or array to iterate over.</p>
<p class="arguement"><strong>callback(indexInArray, valueOfElement)</strong>The function that will be executed on every object.</p>
</li></ul>
<p>The <code>$.each()</code> function is not the same as <a href="/each/">$(selector).each()</a>, which is used to iterate, exclusively, over a jQuery object. The <code>$.each()</code> function can be used to iterate over any collection, whether it is a map (JavaScript object) or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the <code>this</code> keyword, but Javascript will always wrap the <code>this</code> value as an <code>Object</code> even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.</p><pre>$.each([52, 97], function(index, value) { 
  alert(index + ': ' + value); 
});
</pre><p>This produces two messages:</p><p>
  <span class="output">0: 52</span><br/><span class="output">1: 97</span>
</p><p>If a map is used as the collection, the callback is passed a key-value pair each time:</p><pre>var map = { 
  'flammable': 'inflammable', 
  'duh': 'no duh' 
}; 
$.each(map, function(key, value) { 
  alert(key + ': ' + value); 
});</pre><p>Once again, this produces two messages:</p><p>
      <span class="output">flammable: inflammable</span><br/><span class="output">duh: no duh</span>
    </p><p>We can break the <code>$.each()</code> loop at a particular iteration by making the callback function return <code>false</code>. Returning <em>non-false</em> is the same as a <code>continue</code> statement in a for loop; it will skip immediately to the next iteration.</p></div>
  </d:entry>
  <d:entry id="_each__function_index__element____241_0" d:title=".each()" d:value="each()">
    <d:index d:title=".each()" d:value="each()"/>
    <d:index d:title=".each( function(index, Element) )" d:value="each( function(index, Element) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.each( function(index, Element) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Iterate over a jQuery object, executing a function for each matched element. </p><ul class="signatures"><li class="signature" id="each-functionindex- Element">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.each( function(index, Element) )</h4>
<p class="arguement"><strong>function(index, Element)</strong>A function to execute for each matched element.</p>
</li></ul>
<p>The <code>.each()</code> method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword <code>this</code> refers to the element.</p><p>Suppose we had a simple unordered list on the page:</p><pre>&lt;ul&gt;
    &lt;li&gt;foo&lt;/li&gt;
    &lt;li&gt;bar&lt;/li&gt;
&lt;/ul&gt;
  </pre><p>We can select the list items and iterate across them:</p><pre>$('li').each(function(index) {
    alert(index + ': ' + $(this).text());
});
  </pre><p>A message is thus alerted for each item in the list:</p><p><span class="output">0: foo</span><br/><span class="output">1: bar</span></p><p>We can stop the loop from within the callback function by returning <code>false</code>.</p></div>
  </d:entry>
  <d:entry id="element_242_0" d:title="Element Selector (“element”)" d:value="Element Selector (“element”)">
    <d:index d:title="Element Selector (“element”)" d:value="Element Selector (“element”)"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">element</span>  selector</h2><p class="desc"><strong>Description: </strong>Selects all elements with the given tag name.</p><ul class="signatures"><li><dl class="arguments">
<dt>element</dt>
<dd>An element to search for. Refers to the tagName of DOM nodes.</dd>
</dl></li></ul>
<p>JavaScript's <code>getElementsByTagName()</code> function is called to return the appropriate elements when this expression is used.</p></div>
  </d:entry>
  <d:entry id="_empty___243_0" d:title=".empty()" d:value="empty()">
    <d:index d:title=".empty()" d:value="empty()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.empty()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Remove all child nodes of the set of matched elements from the DOM.</p><ul class="signatures"><li class="signature" id="empty"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.empty()</h4></li></ul>
<p>This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:</p><pre>&lt;div class="container"&gt;
  &lt;div class="hello"&gt;Hello&lt;/div&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>We can target any element for removal:</p><pre>$('.hello').empty();</pre><p>This will result in a DOM structure with the <code>Hello</code> text deleted:</p><pre>&lt;div class="container"&gt;
  &lt;div class="hello"&gt;&lt;/div&gt;
  &lt;div class="goodbye"&gt;Goodbye&lt;/div&gt;
&lt;/div&gt;</pre><p>If we had any number of nested elements inside <code>&lt;div class="hello"&gt;</code>, they would be removed, too. </p><p>To avoid memory leaks, jQuery removes other constructs such as data and event handlers from the child elements before removing the elements themselves.</p></div>
  </d:entry>
  <d:entry id="empty_244_0" d:title=":empty Selector" d:value="empty Selector">
    <d:index d:title=":empty Selector" d:value="empty Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">empty</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Select all elements that have no children (including text nodes).</p>
      <p>This is the inverse of <code>:parent</code>. </p>
      <p>One important thing to note with :empty (and :parent) is that child elements include text nodes.</p>
      <p>The W3C recommends that the <code>&lt;p&gt;</code> element have at least one child node, even if that child is merely text (see http://www.w3.org/TR/html401/struct/text.html#edef-P). Some other elements, on the other hand, are empty (i.e. have no children) by definition: &lt;input&gt;, &lt;img&gt;, &lt;br&gt;, and &lt;hr&gt;, for example.</p>
    </div>
  </d:entry>
  <d:entry id="enabled_245_0" d:title=":enabled Selector" d:value="enabled Selector">
    <d:index d:title=":enabled Selector" d:value="enabled Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">enabled</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects all elements that are enabled.</p>
      <p>As with other pseudo-class selectors (those that begin with a ":") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ("*") is implied. In other words, the bare <code>$(':enabled')</code> is equivalent to <code>$('*:enabled')</code>, so <code>$('input:enabled')</code> should be used instead. </p>
    </div>
  </d:entry>
  <d:entry id="_end___246_0" d:title=".end()" d:value="end()">
    <d:index d:title=".end()" d:value="end()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.end()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.</p><ul class="signatures"><li class="signature" id="end"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.end()</h4></li></ul>
<p>Most of jQuery's <a href="http://api.jquery.com/category/traversing">DOM traversal</a> methods operate on a jQuery object instance and produce a new one, matching a different set of DOM elements. When this happens, it is as if the new set of elements is pushed onto a stack that is maintained inside the object. Each successive filtering method pushes a new element set onto the stack. If we need an older element set, we can use <code>end()</code> to pop the sets back off of the stack.</p><p>Suppose we have a couple short lists on a page:</p><pre>
&lt;ul class="first"&gt;
   &lt;li class="foo"&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="bar"&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="second"&gt;
   &lt;li class="foo"&gt;list item 1&lt;/li&gt;
   &lt;li&gt;list item 2&lt;/li&gt;
   &lt;li class="bar"&gt;list item 3&lt;/li&gt;
&lt;/ul&gt;
</pre><p>The <code>end()</code> method is useful primarily when exploiting jQuery's chaining properties. When not using chaining, we can usually just call up a previous object by variable name, so we don't need to manipulate the stack. With <code>end()</code>, though, we can string all the method calls together:</p><pre>
$('ul.first').find('.foo').css('background-color', 'red')
  <code>.end()</code>.find('.bar').css('background-color', 'green');
</pre><p>This chain searches for items with the class <code>foo</code> within the first list only and turns their backgrounds red. Then <code>end()</code> returns the object to its state before the call to <code>find()</code>, so the second <code>find()</code> looks for '.bar' inside <code>&lt;ul class="first"&gt;</code>, not just inside that list's <code>&lt;li class="foo"&gt;</code>, and turns the matching elements' backgrounds green. The net result is that items 1 and 3 of the first list have a colored background, and none of the items from the second list do.</p><p>A long jQuery chain can be visualized as a structured code block, with filtering methods providing the openings of nested blocks and <code>end()</code> methods closing them:</p><pre>
$('ul.first').find('.foo')
  .css('background-color', 'red')
.end().find('.bar')
  .css('background-color', 'green')
.end();
</pre><p>The last <code>end()</code> is unnecessary, as we are discarding the jQuery object immediately thereafter. However, when the code is written in this form, the <code>end()</code> provides visual symmetry and a sense of completion —making the program, at least to the eyes of some developers, more readable, at the cost of a slight hit to performance as it is an additional function call.</p></div>
  </d:entry>
  <d:entry id="_eq__index___247_0" d:title=".eq()" d:value="eq()">
    <d:index d:title=".eq()" d:value="eq()"/>
    <d:index d:title=".eq( index )" d:value="eq( index )"/>
    <d:index d:title=".eq( -index )" d:value="eq( -index )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.eq( index )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Reduce the set of matched elements to the one at the specified index.</p><ul class="signatures">
<li class="signature" id="eq-index">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1.2/">1.1.2</a></span>.eq( index )</h4>
<p class="arguement"><strong>index</strong>An integer indicating the 0-based position of the element. </p>
</li>
<li class="signature" id="eq--index">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4/">1.4</a></span>.eq( -index )</h4>
<p class="arguement"><strong>-index</strong>An integer indicating the position of the element, counting backwards  from the last element in the set. </p>
</li>
</ul>
<p>Given a jQuery object that represents a set of DOM elements, the <code>.eq()</code> method constructs a new jQuery object from one element within that set. The supplied index identifies the position of this element in the set. </p><p>Consider a page with a simple list on it:</p><pre>
  &lt;ul&gt;
    &lt;li&gt;list item 1&lt;/li&gt;
    &lt;li&gt;list item 2&lt;/li&gt;
    &lt;li&gt;list item 3&lt;/li&gt;
    &lt;li&gt;list item 4&lt;/li&gt;
    &lt;li&gt;list item 5&lt;/li&gt;
  &lt;/ul&gt;
</pre><p>We can apply this method to the set of list items:</p><pre>
  $('li').eq(2).css('background-color', 'red');
</pre><p>The result of this call is a red background for item 3. Note that the supplied index is zero-based, and refers to the position of the element within the jQuery object, not within the DOM tree.</p><p>Providing a negative number indicates a position starting from the end of the set, rather than the beginning. For example:</p><pre>
  $('li').eq(-2).css('background-color', 'red');
</pre><p>This time list item 4 is turned red, since it is two from the end of the set.</p><p>If an element cannot be found at the specified zero-based index, the method constructs a new jQuery object with an empty set and a <code>length</code> property of 0. </p><pre>
  $('li').eq(5).css('background-color', 'red');
</pre><p>Here, none of the list items is turned red, since <code>.eq(5)</code> indicates the sixth of five list items.</p></div>
  </d:entry>
  <d:entry id="eq_248_0" d:title=":eq() Selector" d:value="eq() Selector">
    <d:index d:title=":eq() Selector" d:value="eq() Selector"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">eq</span>  selector</h2><p class="desc"><strong>Description: </strong>Select the element at index n within the matched set.</p><ul class="signatures"><li><dl class="arguments">
<dt>index</dt>
<dd>Zero-based index of the element to match.</dd>
</dl></li></ul>
<p>The index-related selectors (<code>:eq()</code>, <code>:lt()</code>, <code>:gt()</code>, <code>:even</code>, <code>:odd</code>) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (<code>.myclass</code>) and four elements are returned, these elements are given indices <code>0</code> through <code>3</code> for the purposes of these selectors.</p><p>Note that since JavaScript arrays use <em>0-based indexing</em>, these selectors reflect that fact. This is why <code>$('.myclass:eq(1)')</code> selects the second element in the document with the class myclass, rather than the first. In contrast, <code>:nth-child(n)</code> uses <em>1-based indexing</em> to conform to the CSS specification.</p><p>Unlike the <a href="http://api.jquery.com/eq/"><code>.eq(index)</code></a> method, the <code>:eq(index)</code> selector does <em>not</em> accept a negative value for <code>index</code>. For example, while <code>$('li').eq(-1)</code> selects the last <code>li</code> element, <code>$('li:eq(-1)')</code> selects nothing.</p><ul><li>Because <code>:eq()</code> is a jQuery extension and not part of the CSS specification, queries using <code>:eq()</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>$("your-pure-css-selector").eq(index)</code> instead.</li></ul></div>
  </d:entry>
  <d:entry id="jquery_ajaxsetup__options___249_0" d:title="jQuery.ajaxSetup()" d:value="jQueryajaxSetup()">
    <d:index d:title="jQuery.ajaxSetup()" d:value="jQueryajaxSetup()"/>
    <d:index d:title="jQuery.ajaxSetup()" d:value="ajaxSetup()"/>
    <d:index d:title="jQuery.ajaxSetup( options )" d:value="jQueryajaxSetup( options )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.ajaxSetup( options )</span> <span class="returns"/>
</h2><p class="desc"><strong>Description: </strong>Set default values for future Ajax requests.</p><ul class="signatures"><li class="signature" id="jQuery-ajaxSetup-options">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1/">1.1</a></span>jQuery.ajaxSetup( options )</h4>
<p class="arguement"><strong>options</strong>A set of key/value pairs that configure the default Ajax request. All options are optional. </p>
</li></ul>
<p>For details on the settings available for <code>$.ajaxSetup()</code>, see <code><a href="/jQuery.ajax">$.ajax()</a></code>. </p><p>All subsequent Ajax calls using any function will use the new settings, unless overridden by the individual calls, until the next invocation of <code>$.ajaxSetup()</code>.</p><p>For example, the following sets a default for the <code>url</code> parameter before pinging the server repeatedly:</p><pre>$.ajaxSetup({
  url: 'ping.php'
});</pre><p>Now each time an Ajax request is made, the "ping.php" URL will be used automatically:</p><pre>$.ajax({
  // url not set here; uses ping.php
  data: {'name': 'Dan'}
});</pre><blockquote><p>Note: Global callback functions should be set with their respective global Ajax event handler methods—<code><a href="/ajaxStart">.ajaxStart()</a></code>, <code><a href="/ajaxStop">.ajaxStop()</a></code>, <code><a href="/ajaxComplete">.ajaxComplete()</a></code>, <code><a href="/ajaxError">.ajaxError()</a></code>, <code><a href="/ajaxSuccess">.ajaxSuccess()</a></code>, <code><a href="/ajaxSend">.ajaxSend()</a></code>—rather than within the <code>options</code> object for <code>$.ajaxSetup()</code>.</p></blockquote></div>
  </d:entry>
  <d:entry id="_error__handler_eventobject____250_0" d:title=".error()" d:value="error()">
    <d:index d:title=".error()" d:value="error()"/>
    <d:index d:title=".error( handler(eventObject) )" d:value="error( handler(eventObject) )"/>
    <d:index d:title=".error(  [eventData], handler(eventObject) )" d:value="error(  [eventData], handler(eventObject) )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.error( handler(eventObject) )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Bind an event handler to the "error" JavaScript event.</p><ul class="signatures">
<li class="signature" id="error-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.error( handler(eventObject) )</h4>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute when the event is triggered.</p>
</li>
<li class="signature" id="error-eventData-handlereventObject">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>.error(  [eventData], handler(eventObject) )</h4>
<p class="arguement"><strong>eventData</strong>A map of data that will be passed to the event handler.</p>
<p class="arguement"><strong>handler(eventObject)</strong>A function to execute each time the event is triggered.</p>
</li>
</ul>
<p>This method is a shortcut for <code>.bind('error', handler)</code>.</p><p>The <code>error</code> event is sent to elements, such as images, that are referenced by a document and loaded by the browser. It is called if the element was not loaded correctly.</p><p>For example, consider a page with a simple image element:</p><pre>&lt;img alt="Book" id="book" /&gt;</pre><p>The event handler can be bound to the image:</p><pre>$('#book')
  .error(function() {
    alert('Handler for .error() called.')
  })
  .attr("src", "missing.png");
</pre><p>If the image cannot be loaded (for example, because it is not present at the supplied URL), the alert  is displayed:</p><p><span class="output">Handler for .error() called.</span></p><blockquote>
<p>The event handler <em>must</em> be attached before the browser fires the error event, which is why the example sets the src attribute after attaching the handler. Also, the error event may not be correctly fired when the page is served locally; <code>error</code> relies on HTTP status codes and will generally not be triggered if the URL uses the <code>file:</code> protocol.</p>
</blockquote><p>Note: A jQuery error event handler should not be attached to the window object. The browser fires the window's error event when a script error occurs. However, the window error event receives different arguments and has different return value requirements than conventional event handlers. Use <code>window.onerror</code> instead.
</p></div>
  </d:entry>
  <d:entry id="jquery_error__message___251_0" d:title="jQuery.error" d:value="jQueryerror">
    <d:index d:title="jQuery.error" d:value="jQueryerror"/>
    <d:index d:title="jQuery.error" d:value="error"/>
    <d:index d:title="jQuery.error( message )" d:value="jQueryerror( message )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">jQuery.error( message )</span> <span class="returns"/>
</h2><p class="desc"><strong>Description: </strong>Takes a string and throws an exception containing it.</p><ul class="signatures"><li class="signature" id="jQuery-error-message">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.1/">1.4.1</a></span>jQuery.error( message )</h4>
<p class="arguement"><strong>message</strong>The message to send out.</p>
</li></ul>
<p>This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.</p></div>
  </d:entry>
  <d:entry id="even_252_0" d:title=":even Selector" d:value="even Selector">
    <d:index d:title=":even Selector" d:value="even Selector"/>
    <div>
      <h2 class="jq-clearfix roundTop section-title">
<span class="name">even</span>  selector</h2>
      <p class="desc"><strong>Description: </strong>Selects even elements, zero-indexed.  See also odd.</p>
      <p>In particular, note that the <em>0-based indexing</em> means that, counter-intuitively, <code>:even</code> selects the first element, third element, and so on within the matched set.</p>
      <ul>
        <li>Because <code>:even</code> is a jQuery extension and not part of the CSS specification, queries using <code>:even</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:even</code> to select elements, first select the elements using a pure CSS selector, then use <a href="http://api.jquery.com/filter/"><code>.filter(":even")</code></a>.</li>
      </ul>
    </div>
  </d:entry>
  <d:entry id="event_currenttarget_253_0" d:title="event.currentTarget" d:value="eventcurrentTarget">
    <d:index d:title="event.currentTarget" d:value="eventcurrentTarget"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.currentTarget</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Element">Element</a></span>
</h2><p class="desc"><strong>Description: </strong> The current DOM element within the event bubbling phase.  </p><ul class="signatures"><li class="signature" id="event-currentTarget"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>event.currentTarget</h4></li></ul>
<p>This property will typically be equal to the <code>this</code> of the function.</p><p><em>If you are using <a href="/jQuery.proxy">jQuery.proxy</a> or another form of scope manipulation, <code>this</code> will be equal to whatever context you have provided, not <code>event.currentTarget</code></em></p></div>
  </d:entry>
  <d:entry id="event_data_254_0" d:title="event.data" d:value="eventdata">
    <d:index d:title="event.data" d:value="eventdata"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.data</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Anything">Anything</a></span>
</h2><p class="desc"><strong>Description: </strong> The optional data passed to jQuery.fn.bind when the current executing handler was bound.  </p><ul class="signatures"><li class="signature" id="event-data"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1/">1.1</a></span>event.data</h4></li></ul>
</div>
  </d:entry>
  <d:entry id="event_isdefaultprevented___255_0" d:title="event.isDefaultPrevented()" d:value="eventisDefaultPrevented()">
    <d:index d:title="event.isDefaultPrevented()" d:value="eventisDefaultPrevented()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.isDefaultPrevented()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>Returns whether event.preventDefault() was ever called on this event object. </p><ul class="signatures"><li class="signature" id="event-isDefaultPrevented"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>event.isDefaultPrevented()</h4></li></ul>
</div>
  </d:entry>
  <d:entry id="event_isimmediatepropagationstopped___256_0" d:title="event.isImmediatePropagationStopped()" d:value="eventisImmediatePropagationStopped()">
    <d:index d:title="event.isImmediatePropagationStopped()" d:value="eventisImmediatePropagationStopped()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.isImmediatePropagationStopped()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>  Returns whether event.stopImmediatePropagation() was ever called on this event object. </p><ul class="signatures"><li class="signature" id="event-isImmediatePropagationStopped"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>event.isImmediatePropagationStopped()</h4></li></ul>
<p>This property was introduced in <a href="http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped">DOM level 3</a>.</p></div>
  </d:entry>
  <d:entry id="event_ispropagationstopped___257_0" d:title="event.isPropagationStopped()" d:value="eventisPropagationStopped()">
    <d:index d:title="event.isPropagationStopped()" d:value="eventisPropagationStopped()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.isPropagationStopped()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Boolean">Boolean</a></span>
</h2><p class="desc"><strong>Description: </strong>  Returns whether event.stopPropagation() was ever called on this event object. </p><ul class="signatures"><li class="signature" id="event-isPropagationStopped"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>event.isPropagationStopped()</h4></li></ul>
<p>This event method is described in the <a href="http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-Event-isPropagationStopped">W3C DOM Level 3 specification</a>.</p></div>
  </d:entry>
  <d:entry id="event_namespace_258_0" d:title="event.namespace" d:value="eventnamespace">
    <d:index d:title="event.namespace" d:value="eventnamespace"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.namespace</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong>The namespace specified when the event was triggered.</p><ul class="signatures"><li class="signature" id="event-namespace"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.4.3/">1.4.3</a></span>event.namespace</h4></li></ul>
<p>This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.</p></div>
  </d:entry>
  <d:entry id="event_pagex_259_0" d:title="event.pageX" d:value="eventpageX">
    <d:index d:title="event.pageX" d:value="eventpageX"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.pageX</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Number">Number</a></span>
</h2><p class="desc"><strong>Description: </strong>The mouse position relative to the left edge of the document. </p><ul class="signatures"><li class="signature" id="event-pageX"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0.4/">1.0.4</a></span>event.pageX</h4></li></ul>
</div>
  </d:entry>
  <d:entry id="_ajaxstart__handler_____260_0" d:title=".ajaxStart()" d:value="ajaxStart()">
    <d:index d:title=".ajaxStart()" d:value="ajaxStart()"/>
    <d:index d:title=".ajaxStart( handler() )" d:value="ajaxStart( handler() )"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">.ajaxStart( handler() )</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#jQuery">jQuery</a></span>
</h2><p class="desc"><strong>Description: </strong>Register a handler to be called when the first Ajax request begins. This is an Ajax Event.</p><ul class="signatures"><li class="signature" id="ajaxStart-handler">
<h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>.ajaxStart( handler() )</h4>
<p class="arguement"><strong>handler()</strong>The function to be invoked.</p>
</li></ul>
<p>Whenever an Ajax request is about to be sent, jQuery checks whether there are any other outstanding Ajax requests. If none are in progress, jQuery triggers the <code>ajaxStart</code> event. Any and all handlers that have been registered with the <code>.ajaxStart()</code> method are executed at this time.</p><p>To observe this method in action, we can set up a basic Ajax load request:</p><pre>&lt;div class="trigger"&gt;Trigger&lt;/div&gt;
&lt;div class="result"&gt;&lt;/div&gt;
&lt;div class="log"&gt;&lt;/div&gt;</pre><p>We can attach our event handler to any element:</p><pre>$('.log').ajaxStart(function() {
  $(this).text('Triggered ajaxStart handler.');
});</pre><p>Now, we can make an Ajax request using any jQuery method:</p><pre>$('.trigger').click(function() {
  $('.result').load('ajax/test.html');
});</pre><p>When the user clicks the button and the Ajax request is sent, the log message is displayed.</p><p><strong>Note:</strong> Because <code>.ajaxStart()</code> is implemented as a method of jQuery object instances, we can use the <code>this</code> keyword as we do here to refer to the selected elements within the callback function.</p></div>
  </d:entry>
  <d:entry id="event_pagey_261_0" d:title="event.pageY" d:value="eventpageY">
    <d:index d:title="event.pageY" d:value="eventpageY"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.pageY</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Number">Number</a></span>
</h2><p class="desc"><strong>Description: </strong>The mouse position relative to the top edge of the document. </p><ul class="signatures"><li class="signature" id="event-pageY"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0.4/">1.0.4</a></span>event.pageY</h4></li></ul>
</div>
  </d:entry>
  <d:entry id="event_preventdefault___262_0" d:title="event.preventDefault()" d:value="eventpreventDefault()">
    <d:index d:title="event.preventDefault()" d:value="eventpreventDefault()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.preventDefault()</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#undefined">undefined</a></span>
</h2><p class="desc"><strong>Description: </strong> If this method is called, the default action of the event will not be triggered. </p><ul class="signatures"><li class="signature" id="event-preventDefault"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>event.preventDefault()</h4></li></ul>
<p>For example, clicked anchors will not take the browser to a new URL. We can use <code>event.isDefaultPrevented()</code> to determine if this method has been called by an event handler that was triggered by this event.</p></div>
  </d:entry>
  <d:entry id="event_relatedtarget_263_0" d:title="event.relatedTarget" d:value="eventrelatedTarget">
    <d:index d:title="event.relatedTarget" d:value="eventrelatedTarget"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.relatedTarget</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Element">Element</a></span>
</h2><p class="desc"><strong>Description: </strong>  The other DOM element involved in the event, if any. </p><ul class="signatures"><li class="signature" id="event-relatedTarget"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1.4/">1.1.4</a></span>event.relatedTarget</h4></li></ul>
<p>For <code>mouseout</code>, indicates the element being entered; for <code>mouseover</code>, indicates the element being exited. </p></div>
  </d:entry>
  <d:entry id="event_result_264_0" d:title="event.result" d:value="eventresult">
    <d:index d:title="event.result" d:value="eventresult"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.result</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Object">Object</a></span>
</h2><p class="desc"><strong>Description: </strong> The last value returned by an event handler that was triggered by this event, unless the value was undefined.  </p><ul class="signatures"><li class="signature" id="event-result"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>event.result</h4></li></ul>
<p>This property can be useful for getting previous return values of custom events. </p></div>
  </d:entry>
  <d:entry id="event_stopimmediatepropagation___265_0" d:title="event.stopImmediatePropagation()" d:value="eventstopImmediatePropagation()">
    <d:index d:title="event.stopImmediatePropagation()" d:value="eventstopImmediatePropagation()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.stopImmediatePropagation()</span> <span class="returns"/>
</h2><p class="desc"><strong>Description: </strong> Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.
  </p><ul class="signatures"><li class="signature" id="event-stopImmediatePropagation"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.3/">1.3</a></span>event.stopImmediatePropagation()</h4></li></ul>
<p>In addition to keeping any additional handlers on an element from being executed, this method also stops the bubbling by implicitly calling <code>event.stopPropagation()</code>. To simply prevent the event from bubbling to ancestor elements but allow other event handlers to execute on the same element, we can use <code><a href="http://api.jquery.com/event.stopPropagation">event.stopPropagation()</a></code> instead.</p><p>Use <code><a href="http://api.jquery.com/event.isImmediatePropagationStopped">event.isImmediatePropagationStopped()</a></code> to know whether this method was ever called (on that event object).</p><ul><li>Since the <a href="http://api.jquery.com/live"><code>.live()</code></a> method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by <code><a href="http://api.jquery.com/delegate/">.delegate()</a></code> will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling <code><a href="http://api.jquery.com/event.stopPropagation/">event.stopPropagation()</a></code> or returning <code>false</code>.</li></ul></div>
  </d:entry>
  <d:entry id="event_stoppropagation___266_0" d:title="event.stopPropagation()" d:value="eventstopPropagation()">
    <d:index d:title="event.stopPropagation()" d:value="eventstopPropagation()"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.stopPropagation()</span> <span class="returns"/>
</h2><p class="desc"><strong>Description: </strong>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.   </p><ul class="signatures"><li class="signature" id="event-stopPropagation"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>event.stopPropagation()</h4></li></ul>
<p>We can use <code><a href="/event.isPropagationStopped">event.isPropagationStopped()</a></code> to determine if this method was ever called (on that event object). </p><p>This method works for custom events triggered with <a href="/trigger">trigger()</a>, as well.</p><p>Note that this will not prevent other handlers <em>on the same element</em> from running. </p><ul><li>Since the <a href="http://api.jquery.com/live"><code>.live()</code></a> method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by <code><a href="http://api.jquery.com/delegate/">.delegate()</a></code> will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling <code><a href="http://api.jquery.com/event.stopPropagation/">event.stopPropagation()</a></code> or returning <code>false</code>.</li></ul></div>
  </d:entry>
  <d:entry id="event_target_267_0" d:title="event.target" d:value="eventtarget">
    <d:index d:title="event.target" d:value="eventtarget"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.target</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Element">Element</a></span>
</h2><p class="desc"><strong>Description: </strong> The DOM element that initiated the event.  </p><ul class="signatures"><li class="signature" id="event-target"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>event.target</h4></li></ul>
<p>The <code>target</code> property can be the element that registered for the event or a descendant of it.  It is often useful to compare <code>event.target</code> to <code>this</code> in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.</p></div>
  </d:entry>
  <d:entry id="event_timestamp_268_0" d:title="event.timeStamp" d:value="eventtimeStamp">
    <d:index d:title="event.timeStamp" d:value="eventtimeStamp"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.timeStamp</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Number">Number</a></span>
</h2><p class="desc"><strong>Description: </strong>The difference in milliseconds between the time an event is triggered and January 1, 1970.</p><ul class="signatures"><li class="signature" id="event-timeStamp"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.2.6/">1.2.6</a></span>event.timeStamp</h4></li></ul>
<p>This property can be useful for profiling the performance of certain jQuery functions by getting the <code>event.timeStamp</code> value at two points in the code and noting the difference.</p></div>
  </d:entry>
  <d:entry id="event_type_269_0" d:title="event.type" d:value="eventtype">
    <d:index d:title="event.type" d:value="eventtype"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.type</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#String">String</a></span>
</h2><p class="desc"><strong>Description: </strong> Describes the nature of the event.  </p><ul class="signatures"><li class="signature" id="event-type"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.0/">1.0</a></span>event.type</h4></li></ul>
</div>
  </d:entry>
  <d:entry id="event_which_270_0" d:title="event.which" d:value="eventwhich">
    <d:index d:title="event.which" d:value="eventwhich"/>
    <div><h2 class="jq-clearfix roundTop section-title">
<span class="name">event.which</span> <span class="returns">Returns: <a class="return" href="http://api.jquery.com/Types/#Number">Number</a></span>
</h2><p class="desc"><strong>Description: </strong> For key or button events, this attribute indicates the specific button or key that was pressed.  </p><ul class="signatures"><li class="signature" id="event-which"><h4 class="name">
<span class="versionAdded">version added: <a href="/category/version/1.1.3/">1.1.3</a></span>event.which</h4></li></ul>
<p><code>event.which</code> normalizes <code>event.keyCode</code> and <code>event.charCode</code>. It is recommended to watch <code>event.which</code> for keyboard key input. For more detail, read about <a href="https://developer.mozilla.org/en/DOM/event.charCode#Notes">event.charCode on the MDC</a>. </p></div>
  </d:entry>
</d:dictionary>
